
Trabajo_SED_Micros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009710  08009710  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08009710  08009710  00019710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009718  08009718  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009718  08009718  00019718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800971c  0800971c  0001971c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00004d14  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004d2c  20004d2c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf01  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e0  00000000  00000000  0003cf49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00040530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001558  00000000  00000000  00041bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033a2  00000000  00000000  00043108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e84  00000000  00000000  000464aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e18bb  00000000  00000000  0005e32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013fbe9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006058  00000000  00000000  0013fc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095e0 	.word	0x080095e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080095e0 	.word	0x080095e0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b96e 	b.w	8000ca0 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	468c      	mov	ip, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8083 	bne.w	8000af2 <__udivmoddi4+0x116>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d947      	bls.n	8000a82 <__udivmoddi4+0xa6>
 80009f2:	fab2 f282 	clz	r2, r2
 80009f6:	b142      	cbz	r2, 8000a0a <__udivmoddi4+0x2e>
 80009f8:	f1c2 0020 	rsb	r0, r2, #32
 80009fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4097      	lsls	r7, r2
 8000a04:	ea40 0c01 	orr.w	ip, r0, r1
 8000a08:	4094      	lsls	r4, r2
 8000a0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a0e:	0c23      	lsrs	r3, r4, #16
 8000a10:	fbbc f6f8 	udiv	r6, ip, r8
 8000a14:	fa1f fe87 	uxth.w	lr, r7
 8000a18:	fb08 c116 	mls	r1, r8, r6, ip
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f10e 	mul.w	r1, r6, lr
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d909      	bls.n	8000a3c <__udivmoddi4+0x60>
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2e:	f080 8119 	bcs.w	8000c64 <__udivmoddi4+0x288>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 8116 	bls.w	8000c64 <__udivmoddi4+0x288>
 8000a38:	3e02      	subs	r6, #2
 8000a3a:	443b      	add	r3, r7
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3310 	mls	r3, r8, r0, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x8c>
 8000a54:	193c      	adds	r4, r7, r4
 8000a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a5a:	f080 8105 	bcs.w	8000c68 <__udivmoddi4+0x28c>
 8000a5e:	45a6      	cmp	lr, r4
 8000a60:	f240 8102 	bls.w	8000c68 <__udivmoddi4+0x28c>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	2600      	movs	r6, #0
 8000a72:	b11d      	cbz	r5, 8000a7c <__udivmoddi4+0xa0>
 8000a74:	40d4      	lsrs	r4, r2
 8000a76:	2300      	movs	r3, #0
 8000a78:	e9c5 4300 	strd	r4, r3, [r5]
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	b902      	cbnz	r2, 8000a86 <__udivmoddi4+0xaa>
 8000a84:	deff      	udf	#255	; 0xff
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d150      	bne.n	8000b30 <__udivmoddi4+0x154>
 8000a8e:	1bcb      	subs	r3, r1, r7
 8000a90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a94:	fa1f f887 	uxth.w	r8, r7
 8000a98:	2601      	movs	r6, #1
 8000a9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a9e:	0c21      	lsrs	r1, r4, #16
 8000aa0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0xe4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0xe2>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	f200 80e9 	bhi.w	8000c90 <__udivmoddi4+0x2b4>
 8000abe:	4684      	mov	ip, r0
 8000ac0:	1ac9      	subs	r1, r1, r3
 8000ac2:	b2a3      	uxth	r3, r4
 8000ac4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000acc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad0:	fb08 f800 	mul.w	r8, r8, r0
 8000ad4:	45a0      	cmp	r8, r4
 8000ad6:	d907      	bls.n	8000ae8 <__udivmoddi4+0x10c>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x10a>
 8000ae0:	45a0      	cmp	r8, r4
 8000ae2:	f200 80d9 	bhi.w	8000c98 <__udivmoddi4+0x2bc>
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	eba4 0408 	sub.w	r4, r4, r8
 8000aec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af0:	e7bf      	b.n	8000a72 <__udivmoddi4+0x96>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x12e>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80b1 	beq.w	8000c5e <__udivmoddi4+0x282>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x1cc>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0x140>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80b8 	bhi.w	8000c8c <__udivmoddi4+0x2b0>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	468c      	mov	ip, r1
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0a8      	beq.n	8000a7c <__udivmoddi4+0xa0>
 8000b2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f603 	lsr.w	r6, r0, r3
 8000b38:	4097      	lsls	r7, r2
 8000b3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b42:	40d9      	lsrs	r1, r3
 8000b44:	4330      	orrs	r0, r6
 8000b46:	0c03      	lsrs	r3, r0, #16
 8000b48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb06 f108 	mul.w	r1, r6, r8
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x19c>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b6a:	f080 808d 	bcs.w	8000c88 <__udivmoddi4+0x2ac>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 808a 	bls.w	8000c88 <__udivmoddi4+0x2ac>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	443b      	add	r3, r7
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b281      	uxth	r1, r0
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b88:	fb00 f308 	mul.w	r3, r0, r8
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x1c4>
 8000b90:	1879      	adds	r1, r7, r1
 8000b92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b96:	d273      	bcs.n	8000c80 <__udivmoddi4+0x2a4>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d971      	bls.n	8000c80 <__udivmoddi4+0x2a4>
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	4439      	add	r1, r7
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ba6:	e778      	b.n	8000a9a <__udivmoddi4+0xbe>
 8000ba8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bac:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	0c3b      	lsrs	r3, r7, #16
 8000bca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bce:	fa1f f884 	uxth.w	r8, r4
 8000bd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bda:	fb09 fa08 	mul.w	sl, r9, r8
 8000bde:	458a      	cmp	sl, r1
 8000be0:	fa02 f206 	lsl.w	r2, r2, r6
 8000be4:	fa00 f306 	lsl.w	r3, r0, r6
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x220>
 8000bea:	1861      	adds	r1, r4, r1
 8000bec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf0:	d248      	bcs.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf2:	458a      	cmp	sl, r1
 8000bf4:	d946      	bls.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4421      	add	r1, r4
 8000bfc:	eba1 010a 	sub.w	r1, r1, sl
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c0e:	fb00 f808 	mul.w	r8, r0, r8
 8000c12:	45b8      	cmp	r8, r7
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x24a>
 8000c16:	19e7      	adds	r7, r4, r7
 8000c18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1c:	d22e      	bcs.n	8000c7c <__udivmoddi4+0x2a0>
 8000c1e:	45b8      	cmp	r8, r7
 8000c20:	d92c      	bls.n	8000c7c <__udivmoddi4+0x2a0>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4427      	add	r7, r4
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	eba7 0708 	sub.w	r7, r7, r8
 8000c2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c32:	454f      	cmp	r7, r9
 8000c34:	46c6      	mov	lr, r8
 8000c36:	4649      	mov	r1, r9
 8000c38:	d31a      	bcc.n	8000c70 <__udivmoddi4+0x294>
 8000c3a:	d017      	beq.n	8000c6c <__udivmoddi4+0x290>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x27a>
 8000c3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c42:	eb67 0701 	sbc.w	r7, r7, r1
 8000c46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c4a:	40f2      	lsrs	r2, r6
 8000c4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c50:	40f7      	lsrs	r7, r6
 8000c52:	e9c5 2700 	strd	r2, r7, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	462e      	mov	r6, r5
 8000c60:	4628      	mov	r0, r5
 8000c62:	e70b      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000c64:	4606      	mov	r6, r0
 8000c66:	e6e9      	b.n	8000a3c <__udivmoddi4+0x60>
 8000c68:	4618      	mov	r0, r3
 8000c6a:	e6fd      	b.n	8000a68 <__udivmoddi4+0x8c>
 8000c6c:	4543      	cmp	r3, r8
 8000c6e:	d2e5      	bcs.n	8000c3c <__udivmoddi4+0x260>
 8000c70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c74:	eb69 0104 	sbc.w	r1, r9, r4
 8000c78:	3801      	subs	r0, #1
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0x260>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	e7d2      	b.n	8000c26 <__udivmoddi4+0x24a>
 8000c80:	4660      	mov	r0, ip
 8000c82:	e78d      	b.n	8000ba0 <__udivmoddi4+0x1c4>
 8000c84:	4681      	mov	r9, r0
 8000c86:	e7b9      	b.n	8000bfc <__udivmoddi4+0x220>
 8000c88:	4666      	mov	r6, ip
 8000c8a:	e775      	b.n	8000b78 <__udivmoddi4+0x19c>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e74a      	b.n	8000b26 <__udivmoddi4+0x14a>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	4439      	add	r1, r7
 8000c96:	e713      	b.n	8000ac0 <__udivmoddi4+0xe4>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	e724      	b.n	8000ae8 <__udivmoddi4+0x10c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <delay>:

UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart3_rx;

void delay (uint16_t time) //función para hacer el delay en el ultrasonidos. Cambiar por hilos????
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <delay+0x30>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000cb6:	bf00      	nop
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <delay+0x30>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d3f9      	bcc.n	8000cb8 <delay+0x14>
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20004bb8 	.word	0x20004bb8

08000cd8 <debouncer2>:
//uint32_t tiempo_motor_ventilador, tiempo_ventilador=5000;

//variables sensor temperatura
uint32_t sensorTemp_val;

int debouncer2(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	80fb      	strh	r3, [r7, #6]
	static uint8_t cuenta_boton=0;
	static int cuenta=0;

	if (*button_int==1){
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d13b      	bne.n	8000d66 <debouncer2+0x8e>
		if (cuenta_boton==0) {
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <debouncer2+0x98>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10b      	bne.n	8000d0e <debouncer2+0x36>
			cuenta=HAL_GetTick();
 8000cf6:	f001 fd3b 	bl	8002770 <HAL_GetTick>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <debouncer2+0x9c>)
 8000d00:	601a      	str	r2, [r3, #0]
			cuenta_boton++;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <debouncer2+0x98>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <debouncer2+0x98>)
 8000d0c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-cuenta>=20){
 8000d0e:	f001 fd2f 	bl	8002770 <HAL_GetTick>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <debouncer2+0x9c>)
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	2b13      	cmp	r3, #19
 8000d1c:	d923      	bls.n	8000d66 <debouncer2+0x8e>
			cuenta=HAL_GetTick();
 8000d1e:	f001 fd27 	bl	8002770 <HAL_GetTick>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <debouncer2+0x9c>)
 8000d28:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1){
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f002 ff24 	bl	8003b7c <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d003      	beq.n	8000d42 <debouncer2+0x6a>
				cuenta_boton=1;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <debouncer2+0x98>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e005      	b.n	8000d4e <debouncer2+0x76>
			}
			else{
				cuenta_boton++;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <debouncer2+0x98>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <debouncer2+0x98>)
 8000d4c:	701a      	strb	r2, [r3, #0]
			}
			if (cuenta_boton==3){ //Periodo antirebotes
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <debouncer2+0x98>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d107      	bne.n	8000d66 <debouncer2+0x8e>
				cuenta_boton=0;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <debouncer2+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
				return 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <debouncer2+0x90>
			}
		}

	}
	return 0;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000078 	.word	0x20000078
 8000d74:	2000007c 	.word	0x2000007c

08000d78 <servo>:


void servo(TIM_HandleTypeDef* htim, int grados){
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	 const int MAX=20; //comprobar qe pasa si cambio esto por 13.9 ms. Frecuencia a 72 Hz
 8000d82:	2314      	movs	r3, #20
 8000d84:	617b      	str	r3, [r7, #20]
	 float ms= grados/90.0f +0.5f;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d90:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000df4 <servo+0x7c>
 8000d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000da0:	edc7 7a04 	vstr	s15, [r7, #16]
	 float ciclo = ms/(float)MAX;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dae:	edd7 6a04 	vldr	s13, [r7, #16]
 8000db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db6:	edc7 7a03 	vstr	s15, [r7, #12]
	 mov =htim->Instance->ARR*ciclo;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd4:	ee17 2a90 	vmov	r2, s15
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <servo+0x80>)
 8000dda:	601a      	str	r2, [r3, #0]
	 htim->Instance->CCR1 = mov;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <servo+0x80>)
 8000de2:	6812      	ldr	r2, [r2, #0]
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	42b40000 	.word	0x42b40000
 8000df8:	20004b18 	.word	0x20004b18

08000dfc <puerta>:

void puerta(void)  //PUERTA
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

	if((debouncer2(&boton3,GPIOA,GPIO_PIN_0))==1||readBuf[0]==50) //si pulsamos el botón de desbloqueo o mandamos la orden desde la aplicación
 8000e00:	2201      	movs	r2, #1
 8000e02:	4948      	ldr	r1, [pc, #288]	; (8000f24 <puerta+0x128>)
 8000e04:	4848      	ldr	r0, [pc, #288]	; (8000f28 <puerta+0x12c>)
 8000e06:	f7ff ff67 	bl	8000cd8 <debouncer2>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d003      	beq.n	8000e18 <puerta+0x1c>
 8000e10:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <puerta+0x130>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b32      	cmp	r3, #50	; 0x32
 8000e16:	d119      	bne.n	8000e4c <puerta+0x50>
	{
		  if(bloqueo==1 && abierto==0) //en caso de que la puerta este bloqueada y cerrada
 8000e18:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <puerta+0x134>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d107      	bne.n	8000e30 <puerta+0x34>
 8000e20:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <puerta+0x138>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d103      	bne.n	8000e30 <puerta+0x34>
		 {
			 bloqueo=0; //se desbloquea
 8000e28:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <puerta+0x134>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e00a      	b.n	8000e46 <puerta+0x4a>
		   }
		 else if (bloqueo==0 && abierto==0) //si esta cerrada y desbloqueada
 8000e30:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <puerta+0x134>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d106      	bne.n	8000e46 <puerta+0x4a>
 8000e38:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <puerta+0x138>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <puerta+0x4a>
		 {
			 bloqueo=1; //se bloquea
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <puerta+0x134>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
		 }
		  readBuf[0]=0; //pongo a cero la variable que recibe el valor del bluetooth
 8000e46:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <puerta+0x130>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
	}


	if ((debouncer2(&boton4,GPIOA,GPIO_PIN_1))==1||readBuf[0]==51) //si pulso el botón de apertura o mando la orden desde la app
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4935      	ldr	r1, [pc, #212]	; (8000f24 <puerta+0x128>)
 8000e50:	4839      	ldr	r0, [pc, #228]	; (8000f38 <puerta+0x13c>)
 8000e52:	f7ff ff41 	bl	8000cd8 <debouncer2>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d003      	beq.n	8000e64 <puerta+0x68>
 8000e5c:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <puerta+0x130>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b33      	cmp	r3, #51	; 0x33
 8000e62:	d110      	bne.n	8000e86 <puerta+0x8a>
	{
		 if(abierto==1) //si está abierta
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <puerta+0x138>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d106      	bne.n	8000e7a <puerta+0x7e>
		 {
			 //abierto=0;
			 espera_puerta=0;//pongo el tiempo de espera a 0
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <puerta+0x140>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
			 cerrando=1; //activo el flag que indica que voy a cerrar la puerta
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <puerta+0x144>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e002      	b.n	8000e80 <puerta+0x84>
		 }
		 else
		 {
			  //abierto=1;
			  abriendo=1; //activo el flag que indica que voy a abrir la puerta
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <puerta+0x148>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]

		 }
		 readBuf[0]=0; //pongo a cero la variable que recibe el valor del bluetooth
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <puerta+0x130>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
	}

	 if(abierto==0 && bloqueo==0 && abriendo==1) //Si está cerrada, no bloqueada y el flag de apertura activado
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <puerta+0x138>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d111      	bne.n	8000eb2 <puerta+0xb6>
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <puerta+0x134>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10d      	bne.n	8000eb2 <puerta+0xb6>
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <puerta+0x148>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d109      	bne.n	8000eb2 <puerta+0xb6>
	 {
			 servo(&htim2, 0); //pongo el servo a cero grados(posición de la puerta abierta)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4829      	ldr	r0, [pc, #164]	; (8000f48 <puerta+0x14c>)
 8000ea2:	f7ff ff69 	bl	8000d78 <servo>
			 abierto=1; //indico que ya está abierta la puerta
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <puerta+0x138>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
		 	 //espera_puerta = HAL_GetTick(); //tomo el tiempo actual
		 	 abriendo=0; //pongo el flag de apertura a 0
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <puerta+0x148>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
	 }
	if(abierto==1 && cerrando==0) //si han pasado 10s y está abierta, la cierro y la bloqueo
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <puerta+0x138>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d10d      	bne.n	8000ed6 <puerta+0xda>
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <puerta+0x144>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d109      	bne.n	8000ed6 <puerta+0xda>
		 {
	//		bloqueo=1;
			osDelay(10000);
 8000ec2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ec6:	f005 fedb 	bl	8006c80 <osDelay>
			espera_puerta=0; //reseteo el tiempo de espera
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <puerta+0x140>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
			cerrando = 1; //indico que quiero cerrar la puerta
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <puerta+0x144>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
		 }

	if(abierto==1 && bloqueo==0 && cerrando==1) //Si está abierta, no bloqueada y quiero cerrarla
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <puerta+0x138>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d117      	bne.n	8000f0e <puerta+0x112>
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <puerta+0x134>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d113      	bne.n	8000f0e <puerta+0x112>
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <puerta+0x144>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10f      	bne.n	8000f0e <puerta+0x112>
	{
		servo(&htim2, 90);//ordeno al servo la posición de la puerta cerrada
 8000eee:	215a      	movs	r1, #90	; 0x5a
 8000ef0:	4815      	ldr	r0, [pc, #84]	; (8000f48 <puerta+0x14c>)
 8000ef2:	f7ff ff41 	bl	8000d78 <servo>
		 abierto=0; //indico que está cerrada
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <puerta+0x138>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
	 	 espera_puerta = 0; //reseteo el tiempo
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <puerta+0x140>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
	 	 cerrando=0; //pongo el flag de ciere a 0
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <puerta+0x144>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
	 	 bloqueo=1; //bloqueo la puerta
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <puerta+0x134>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
	}
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, bloqueo); //control de la luz. ENCENDIDA->Bloqueada
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <puerta+0x134>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	480c      	ldr	r0, [pc, #48]	; (8000f4c <puerta+0x150>)
 8000f1c:	f002 fe46 	bl	8003bac <HAL_GPIO_WritePin>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40020000 	.word	0x40020000
 8000f28:	2000005c 	.word	0x2000005c
 8000f2c:	20004c98 	.word	0x20004c98
 8000f30:	20000004 	.word	0x20000004
 8000f34:	2000004c 	.word	0x2000004c
 8000f38:	20000060 	.word	0x20000060
 8000f3c:	20004bb4 	.word	0x20004bb4
 8000f40:	20000054 	.word	0x20000054
 8000f44:	20000050 	.word	0x20000050
 8000f48:	20004c48 	.word	0x20004c48
 8000f4c:	40020800 	.word	0x40020800

08000f50 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //Callback de los botone
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)//Botón de bloqueo
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d102      	bne.n	8000f66 <HAL_GPIO_EXTI_Callback+0x16>
	{
		boton3=1;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_1)//Botón de apertura de la puerta
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d102      	bne.n	8000f72 <HAL_GPIO_EXTI_Callback+0x22>
	{
		boton4=1;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4)//Bloqueo de desactivación de la alarma
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	2b10      	cmp	r3, #16
 8000f76:	d102      	bne.n	8000f7e <HAL_GPIO_EXTI_Callback+0x2e>
	{
		boton2=1;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin==GPIO_PIN_4)
	{
		//desactivar_alarma = 1;
	}*/
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000005c 	.word	0x2000005c
 8000f90:	20000060 	.word	0x20000060
 8000f94:	20000058 	.word	0x20000058

08000f98 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //Callback para la medición del ultrasonidos
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7f1b      	ldrb	r3, [r3, #28]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	f040 8083 	bne.w	80010b0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d11a      	bne.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f004 f94f 	bl	8005258 <HAL_TIM_ReadCapturedValue>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fbe:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 020a 	bic.w	r2, r2, #10
 8000fd4:	621a      	str	r2, [r3, #32]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a1a      	ldr	r2, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0202 	orr.w	r2, r2, #2
 8000fe4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000fe6:	e063      	b.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d15f      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f004 f930 	bl	8005258 <HAL_TIM_ReadCapturedValue>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ffc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001006:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d907      	bls.n	8001022 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <HAL_TIM_IC_CaptureCallback+0x134>)
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	e00f      	b.n	8001042 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d909      	bls.n	8001042 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800103c:	33ff      	adds	r3, #255	; 0xff
 800103e:	4a23      	ldr	r2, [pc, #140]	; (80010cc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001040:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa04 	bl	8000454 <__aeabi_ui2d>
 800104c:	a31a      	add	r3, pc, #104	; (adr r3, 80010b8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fa79 	bl	8000548 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001066:	f7ff fb99 	bl	800079c <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fc7b 	bl	800096c <__aeabi_d2uiz>
 8001076:	4603      	mov	r3, r0
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800107c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 020a 	bic.w	r2, r2, #10
 8001092:	621a      	str	r2, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a12      	ldr	r2, [r2, #32]
 800109e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0202 	bic.w	r2, r2, #2
 80010ae:	60da      	str	r2, [r3, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	b020c49c 	.word	0xb020c49c
 80010bc:	3fa16872 	.word	0x3fa16872
 80010c0:	20000040 	.word	0x20000040
 80010c4:	20000034 	.word	0x20000034
 80010c8:	20000038 	.word	0x20000038
 80010cc:	2000003c 	.word	0x2000003c
 80010d0:	20000041 	.word	0x20000041
 80010d4:	20004bb8 	.word	0x20004bb8

080010d8 <HCSR04_Read>:

void HCSR04_Read (void) //Función de lectura del ultrasonidos
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	//enviamos un pulso en el pin TRIG
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // ponemos el pin TRIG on
 80010dc:	2201      	movs	r2, #1
 80010de:	2104      	movs	r1, #4
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <HCSR04_Read+0x34>)
 80010e2:	f002 fd63 	bl	8003bac <HAL_GPIO_WritePin>
	delay(10);  // esperamos 10 us
 80010e6:	200a      	movs	r0, #10
 80010e8:	f7ff fddc 	bl	8000ca4 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);// ponemos el pin TRIG off
 80010ec:	2200      	movs	r2, #0
 80010ee:	2104      	movs	r1, #4
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <HCSR04_Read+0x34>)
 80010f2:	f002 fd5b 	bl	8003bac <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); //Habilitamos las interrupciones para esperar a la recepción
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HCSR04_Read+0x38>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <HCSR04_Read+0x38>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 0202 	orr.w	r2, r2, #2
 8001104:	60da      	str	r2, [r3, #12]
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020000 	.word	0x40020000
 8001110:	20004bb8 	.word	0x20004bb8

08001114 <LDR>:

void LDR(void) //función de lectura del LDR
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); //iniciamos el convertidor ADC
 8001118:	4812      	ldr	r0, [pc, #72]	; (8001164 <LDR+0x50>)
 800111a:	f001 fb79 	bl	8002810 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800111e:	2164      	movs	r1, #100	; 0x64
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <LDR+0x50>)
 8001122:	f001 fc7a 	bl	8002a1a <HAL_ADC_PollForConversion>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <LDR+0x24>
		LDR_val=HAL_ADC_GetValue(&hadc1); //guardamos el valor medido en LDR_val
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <LDR+0x50>)
 800112e:	f001 fcff 	bl	8002b30 <HAL_ADC_GetValue>
 8001132:	4603      	mov	r3, r0
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <LDR+0x54>)
 8001136:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); //paramos la conversión
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <LDR+0x50>)
 800113a:	f001 fc3b 	bl	80029b4 <HAL_ADC_Stop>
	if(LDR_val<60) //en caso de que el valor sea menor a 60 (luz ambiente)
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <LDR+0x54>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b3b      	cmp	r3, #59	; 0x3b
 8001144:	d806      	bhi.n	8001154 <LDR+0x40>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1); //Encendemos la luz
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <LDR+0x58>)
 800114e:	f002 fd2d 	bl	8003bac <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0); //Apagamos la luz

}
 8001152:	e005      	b.n	8001160 <LDR+0x4c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0); //Apagamos la luz
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <LDR+0x58>)
 800115c:	f002 fd26 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20004b68 	.word	0x20004b68
 8001168:	20004990 	.word	0x20004990
 800116c:	40020800 	.word	0x40020800

08001170 <temperatura>:
void temperatura(void) //Función para leer la temperatura
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8001174:	4812      	ldr	r0, [pc, #72]	; (80011c0 <temperatura+0x50>)
 8001176:	f001 fb4b 	bl	8002810 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 800117a:	2164      	movs	r1, #100	; 0x64
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <temperatura+0x50>)
 800117e:	f001 fc4c 	bl	8002a1a <HAL_ADC_PollForConversion>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <temperatura+0x24>
		sensorTemp_val=HAL_ADC_GetValue(&hadc2);
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <temperatura+0x50>)
 800118a:	f001 fcd1 	bl	8002b30 <HAL_ADC_GetValue>
 800118e:	4603      	mov	r3, r0
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <temperatura+0x54>)
 8001192:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc2);
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <temperatura+0x50>)
 8001196:	f001 fc0d 	bl	80029b4 <HAL_ADC_Stop>
	if(sensorTemp_val<10) //si la temperatura es menor de 10 grados
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <temperatura+0x54>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b09      	cmp	r3, #9
 80011a0:	d806      	bhi.n	80011b0 <temperatura+0x40>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <temperatura+0x58>)
 80011aa:	f002 fcff 	bl	8003bac <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,0);

}
 80011ae:	e005      	b.n	80011bc <temperatura+0x4c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <temperatura+0x58>)
 80011b8:	f002 fcf8 	bl	8003bac <HAL_GPIO_WritePin>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20004a84 	.word	0x20004a84
 80011c4:	20004acc 	.word	0x20004acc
 80011c8:	40020c00 	.word	0x40020c00

080011cc <subePersiana>:

void subePersiana(int s) //Función de subida de la persiana
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	//TIM9->CCR1=s;
	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, s);
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <subePersiana+0x2c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,GPIO_PIN_SET); //Giro horario
 80011dc:	2201      	movs	r2, #1
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <subePersiana+0x30>)
 80011e2:	f002 fce3 	bl	8003bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <subePersiana+0x30>)
 80011ec:	f002 fcde 	bl	8003bac <HAL_GPIO_WritePin>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20004c00 	.word	0x20004c00
 80011fc:	40020800 	.word	0x40020800

08001200 <bajaPersiana>:

void bajaPersiana(int s) //Función para bajar la persiana
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	//TIM9->CCR1=s;
	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, s);
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <bajaPersiana+0x2c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <bajaPersiana+0x30>)
 8001216:	f002 fcc9 	bl	8003bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_SET); //Giro antihorario
 800121a:	2201      	movs	r2, #1
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <bajaPersiana+0x30>)
 8001220:	f002 fcc4 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20004c00 	.word	0x20004c00
 8001230:	40020800 	.word	0x40020800

08001234 <pareMotor>:

void pareMotor() //Función que para el motor
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	//TIM9->CCR1=s;
	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <pareMotor+0x24>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <pareMotor+0x28>)
 8001246:	f002 fcb1 	bl	8003bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <pareMotor+0x28>)
 8001250:	f002 fcac 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20004c00 	.word	0x20004c00
 800125c:	40020800 	.word	0x40020800

08001260 <persianas>:
//Modificando el tiempo_persiana damos mas vueltas al motor
//Actualmente con 5 s da 3 vueltas
//Actualizar en función de la longitud de la persiana


void persianas(){ //Función del control completo de la persiana
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

	if(subida==0){ //Si está bajada
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <persianas+0xb8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d123      	bne.n	80012b4 <persianas+0x54>
		if(subiendo==0){ //Y no se está subiendo
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <persianas+0xbc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10b      	bne.n	800128c <persianas+0x2c>
			if(readBuf[0]==52){ //Si detecta que pido desde la aplicación que suba
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <persianas+0xc0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b34      	cmp	r3, #52	; 0x34
 800127a:	d14b      	bne.n	8001314 <persianas+0xb4>
				subePersiana(5000); //subo la persiana
 800127c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001280:	f7ff ffa4 	bl	80011cc <subePersiana>
				//tiempo_motor=HAL_GetTick(); //cojo el tiempo
				subiendo=1; //pongo el flag de subiendo a 1
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <persianas+0xbc>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
			subida=0;
			readBuf[0]=0;
			//}
		}
	}
}
 800128a:	e043      	b.n	8001314 <persianas+0xb4>
		else if(subiendo==1){
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <persianas+0xbc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d13f      	bne.n	8001314 <persianas+0xb4>
			osDelay(5000);
 8001294:	f241 3088 	movw	r0, #5000	; 0x1388
 8001298:	f005 fcf2 	bl	8006c80 <osDelay>
			pareMotor(); //paro el motor
 800129c:	f7ff ffca 	bl	8001234 <pareMotor>
			subiendo=0; //pongo la flag de subiendo a 0
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <persianas+0xbc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
			subida=1;   //declaro que ya esta subida
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <persianas+0xb8>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
			readBuf[0]=0; //reseteo la variable de recepción del bluetooth
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <persianas+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
}
 80012b2:	e02f      	b.n	8001314 <persianas+0xb4>
	else if(subida==1){ //si esta subida
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <persianas+0xb8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d12b      	bne.n	8001314 <persianas+0xb4>
		if(bajando==0){ //no se está bajando aun
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <persianas+0xc4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d114      	bne.n	80012ee <persianas+0x8e>
			if(readBuf[0]==52||LDR_val<60){  //las persianas se bajan al pedirlo desde el movil o al bajar la
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <persianas+0xc0>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b34      	cmp	r3, #52	; 0x34
 80012ca:	d003      	beq.n	80012d4 <persianas+0x74>
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <persianas+0xc8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b3b      	cmp	r3, #59	; 0x3b
 80012d2:	d81f      	bhi.n	8001314 <persianas+0xb4>
				bajaPersiana(5000);			// luminosidad (hacerse de noche)
 80012d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80012d8:	f7ff ff92 	bl	8001200 <bajaPersiana>
				tiempo_motor=HAL_GetTick();
 80012dc:	f001 fa48 	bl	8002770 <HAL_GetTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <persianas+0xcc>)
 80012e4:	6013      	str	r3, [r2, #0]
				bajando=1; //activo el flag de bajando
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <persianas+0xc4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	e012      	b.n	8001314 <persianas+0xb4>
		else if(bajando==1){ //si está bajando
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <persianas+0xc4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10e      	bne.n	8001314 <persianas+0xb4>
			osDelay(5000);
 80012f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80012fa:	f005 fcc1 	bl	8006c80 <osDelay>
			pareMotor(); //paro el motor
 80012fe:	f7ff ff99 	bl	8001234 <pareMotor>
			bajando=0; //reseteo flags
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <persianas+0xc4>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
			subida=0;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <persianas+0xb8>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
			readBuf[0]=0;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <persianas+0xc0>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000068 	.word	0x20000068
 800131c:	20000064 	.word	0x20000064
 8001320:	20004c98 	.word	0x20004c98
 8001324:	2000006c 	.word	0x2000006c
 8001328:	20004990 	.word	0x20004990
 800132c:	20004b1c 	.word	0x20004b1c

08001330 <movimientoCalor>:

//Ventilador

void movimientoCalor(int s)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	//TIM10->CCR1=s;
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, s);
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <movimientoCalor+0x30>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <movimientoCalor+0x34>)
 8001348:	f002 fc30 	bl	8003bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <movimientoCalor+0x34>)
 8001354:	f002 fc2a 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20004ad0 	.word	0x20004ad0
 8001364:	40020000 	.word	0x40020000

08001368 <movimientoFrio>:
void movimientoFrio(int s)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	//TIM10->CCR1=s;
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, s);
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <movimientoFrio+0x30>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <movimientoFrio+0x34>)
 8001380:	f002 fc14 	bl	8003bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <movimientoFrio+0x34>)
 800138c:	f002 fc0e 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20004ad0 	.word	0x20004ad0
 800139c:	40020000 	.word	0x40020000

080013a0 <pararMovimiento>:
void pararMovimiento()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	//TIM10->CCR1=s;
	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <pararMovimiento+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <pararMovimiento+0x2c>)
 80013b4:	f002 fbfa 	bl	8003bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <pararMovimiento+0x2c>)
 80013c0:	f002 fbf4 	bl	8003bac <HAL_GPIO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20004c00 	.word	0x20004c00
 80013cc:	40020000 	.word	0x40020000

080013d0 <ventilador>:


void ventilador(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

	if(readBuf[0]==53||sensorTemp_val<20){//el ventilador da calor si se pide desde el movil o al subir la temperatura
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <ventilador+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b35      	cmp	r3, #53	; 0x35
 80013da:	d003      	beq.n	80013e4 <ventilador+0x14>
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <ventilador+0x5c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b13      	cmp	r3, #19
 80013e2:	d807      	bhi.n	80013f4 <ventilador+0x24>
				movimientoCalor(5000);   // por debajo de 20 ºC
 80013e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80013e8:	f7ff ffa2 	bl	8001330 <movimientoCalor>
				//tiempo_motor_ventilador=HAL_GetTick();
				dando_calor=1;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <ventilador+0x60>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e016      	b.n	8001422 <ventilador+0x52>

		}

	else if(readBuf[0]==53||sensorTemp_val>25){  //el ventilador da frio si se pide desde el movil o al subir la temperatura
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <ventilador+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b35      	cmp	r3, #53	; 0x35
 80013fa:	d003      	beq.n	8001404 <ventilador+0x34>
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <ventilador+0x5c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b19      	cmp	r3, #25
 8001402:	d907      	bls.n	8001414 <ventilador+0x44>
				movimientoFrio(5000);			// por encima de 25 ºC
 8001404:	f241 3088 	movw	r0, #5000	; 0x1388
 8001408:	f7ff ffae 	bl	8001368 <movimientoFrio>
				//tiempo_motor_ventilador=HAL_GetTick();
				dando_frio=1;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <ventilador+0x64>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e006      	b.n	8001422 <ventilador+0x52>

		}
	else if (readBuf[0]==53){ //parar motor desde aplicación
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <ventilador+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b35      	cmp	r3, #53	; 0x35
 800141a:	d102      	bne.n	8001422 <ventilador+0x52>
		pararMovimiento();
 800141c:	f7ff ffc0 	bl	80013a0 <pararMovimiento>
	}

}
 8001420:	e7ff      	b.n	8001422 <ventilador+0x52>
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20004c98 	.word	0x20004c98
 800142c:	20004acc 	.word	0x20004acc
 8001430:	20000070 	.word	0x20000070
 8001434:	20000074 	.word	0x20000074

08001438 <alarma>:


void alarma(void){ //Función completa de la alarma
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HCSR04_Read(); //Leemos el valor del ultrasonidos
 800143c:	f7ff fe4c 	bl	80010d8 <HCSR04_Read>
	osDelay(100);
 8001440:	2064      	movs	r0, #100	; 0x64
 8001442:	f005 fc1d 	bl	8006c80 <osDelay>
	if(Distance<10){ //Si la distancia es menor de 10 cm
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <alarma+0x84>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b09      	cmp	r3, #9
 800144c:	d80c      	bhi.n	8001468 <alarma+0x30>
		tiempo_alarma=HAL_GetTick(); //tomamos el tiempo en ese instante
 800144e:	f001 f98f 	bl	8002770 <HAL_GetTick>
 8001452:	4603      	mov	r3, r0
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <alarma+0x88>)
 8001456:	6013      	str	r3, [r2, #0]
 		htim4.Instance->CCR1=zumb; //encendemos el zumbador
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <alarma+0x8c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <alarma+0x90>)
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
		sonando=1;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <alarma+0x94>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
	}
	if(sonando==1){ //si está sonando
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <alarma+0x94>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d122      	bne.n	80014b6 <alarma+0x7e>
		if(HAL_GetTick()-tiempo_alarma>5000||(debouncer2(&boton2,GPIOA,GPIO_PIN_4))==1||readBuf[0]==49){ //si pasan 5 s, pulso el botón, o lo pido desde la app la desactivo
 8001470:	f001 f97e 	bl	8002770 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <alarma+0x88>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d80b      	bhi.n	800149c <alarma+0x64>
 8001484:	2210      	movs	r2, #16
 8001486:	4912      	ldr	r1, [pc, #72]	; (80014d0 <alarma+0x98>)
 8001488:	4812      	ldr	r0, [pc, #72]	; (80014d4 <alarma+0x9c>)
 800148a:	f7ff fc25 	bl	8000cd8 <debouncer2>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d003      	beq.n	800149c <alarma+0x64>
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <alarma+0xa0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b31      	cmp	r3, #49	; 0x31
 800149a:	d10c      	bne.n	80014b6 <alarma+0x7e>
			htim4.Instance->CCR1=0; //paro el zumbador
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <alarma+0x8c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
			tiempo_alarma=0; //reseteo tiempos y flags
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <alarma+0x88>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
			sonando=0;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <alarma+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
			readBuf[0]=0;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <alarma+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000041 	.word	0x20000041
 80014c0:	20000044 	.word	0x20000044
 80014c4:	20004998 	.word	0x20004998
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000048 	.word	0x20000048
 80014d0:	40020000 	.word	0x40020000
 80014d4:	20000058 	.word	0x20000058
 80014d8:	20004c98 	.word	0x20004c98

080014dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { //callback para el bluetooth
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 /* Se recibe el caracter y se pide el siguiente*/
// CDC_Transmit_FS(readBuf, 1);
 if(huart->Instance==huart3.Instance)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_UART_RxCpltCallback+0x28>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d104      	bne.n	80014fa <HAL_UART_RxCpltCallback+0x1e>
 HAL_UART_Receive_IT(&huart3, (uint8_t*)readBuf, 1);
 80014f0:	2201      	movs	r2, #1
 80014f2:	4905      	ldr	r1, [pc, #20]	; (8001508 <HAL_UART_RxCpltCallback+0x2c>)
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <HAL_UART_RxCpltCallback+0x28>)
 80014f6:	f004 fc28 	bl	8005d4a <HAL_UART_Receive_IT>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20004a40 	.word	0x20004a40
 8001508:	20004c98 	.word	0x20004c98

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f001 f8f8 	bl	8002704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 f888 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f000 fc0e 	bl	8001d38 <MX_GPIO_Init>
  MX_TIM1_Init();
 800151c:	f000 f992 	bl	8001844 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001520:	f000 f9e6 	bl	80018f0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001524:	f000 f8ea 	bl	80016fc <MX_ADC1_Init>
  MX_TIM3_Init();
 8001528:	f000 fa58 	bl	80019dc <MX_TIM3_Init>
  MX_DMA_Init();
 800152c:	f000 fbe4 	bl	8001cf8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001530:	f000 fbb8 	bl	8001ca4 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001534:	f000 faac 	bl	8001a90 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001538:	f000 fb20 	bl	8001b7c <MX_TIM9_Init>
  MX_ADC2_Init();
 800153c:	f000 f930 	bl	80017a0 <MX_ADC2_Init>
  MX_TIM10_Init();
 8001540:	f000 fb62 	bl	8001c08 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001544:	2100      	movs	r1, #0
 8001546:	4822      	ldr	r0, [pc, #136]	; (80015d0 <main+0xc4>)
 8001548:	f003 fa30 	bl	80049ac <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800154c:	2100      	movs	r1, #0
 800154e:	4821      	ldr	r0, [pc, #132]	; (80015d4 <main+0xc8>)
 8001550:	f003 f914 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001554:	2100      	movs	r1, #0
 8001556:	4820      	ldr	r0, [pc, #128]	; (80015d8 <main+0xcc>)
 8001558:	f003 f910 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800155c:	2100      	movs	r1, #0
 800155e:	481f      	ldr	r0, [pc, #124]	; (80015dc <main+0xd0>)
 8001560:	f003 f90c 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	481e      	ldr	r0, [pc, #120]	; (80015e0 <main+0xd4>)
 8001568:	f003 f908 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)readBuf, 1);
 800156c:	2201      	movs	r2, #1
 800156e:	491d      	ldr	r1, [pc, #116]	; (80015e4 <main+0xd8>)
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <main+0xdc>)
 8001572:	f004 fbea 	bl	8005d4a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001576:	f005 faa7 	bl	8006ac8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Alarma */
  AlarmaHandle = osThreadNew(StartAlarma, NULL, &Alarma_attributes);
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <main+0xe0>)
 800157c:	2100      	movs	r1, #0
 800157e:	481c      	ldr	r0, [pc, #112]	; (80015f0 <main+0xe4>)
 8001580:	f005 faec 	bl	8006b5c <osThreadNew>
 8001584:	4603      	mov	r3, r0
 8001586:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <main+0xe8>)
 8001588:	6013      	str	r3, [r2, #0]

  /* creation of Puerta */
  PuertaHandle = osThreadNew(StartPuerta, NULL, &Puerta_attributes);
 800158a:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <main+0xec>)
 800158c:	2100      	movs	r1, #0
 800158e:	481b      	ldr	r0, [pc, #108]	; (80015fc <main+0xf0>)
 8001590:	f005 fae4 	bl	8006b5c <osThreadNew>
 8001594:	4603      	mov	r3, r0
 8001596:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <main+0xf4>)
 8001598:	6013      	str	r3, [r2, #0]

  /* creation of Ventilador */
  VentiladorHandle = osThreadNew(StartVentilador, NULL, &Ventilador_attributes);
 800159a:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <main+0xf8>)
 800159c:	2100      	movs	r1, #0
 800159e:	481a      	ldr	r0, [pc, #104]	; (8001608 <main+0xfc>)
 80015a0:	f005 fadc 	bl	8006b5c <osThreadNew>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <main+0x100>)
 80015a8:	6013      	str	r3, [r2, #0]

  /* creation of Persiana */
  PersianaHandle = osThreadNew(StartPersiana, NULL, &Persiana_attributes);
 80015aa:	4a19      	ldr	r2, [pc, #100]	; (8001610 <main+0x104>)
 80015ac:	2100      	movs	r1, #0
 80015ae:	4819      	ldr	r0, [pc, #100]	; (8001614 <main+0x108>)
 80015b0:	f005 fad4 	bl	8006b5c <osThreadNew>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <main+0x10c>)
 80015b8:	6013      	str	r3, [r2, #0]

  /* creation of LDR */
  LDRHandle = osThreadNew(StartLDR, NULL, &LDR_attributes);
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <main+0x110>)
 80015bc:	2100      	movs	r1, #0
 80015be:	4818      	ldr	r0, [pc, #96]	; (8001620 <main+0x114>)
 80015c0:	f005 facc 	bl	8006b5c <osThreadNew>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <main+0x118>)
 80015c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015ca:	f005 faa1 	bl	8006b10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <main+0xc2>
 80015d0:	20004bb8 	.word	0x20004bb8
 80015d4:	20004c48 	.word	0x20004c48
 80015d8:	20004c00 	.word	0x20004c00
 80015dc:	20004ad0 	.word	0x20004ad0
 80015e0:	20004998 	.word	0x20004998
 80015e4:	20004c98 	.word	0x20004c98
 80015e8:	20004a40 	.word	0x20004a40
 80015ec:	0800963c 	.word	0x0800963c
 80015f0:	08001ed9 	.word	0x08001ed9
 80015f4:	20004994 	.word	0x20004994
 80015f8:	08009660 	.word	0x08009660
 80015fc:	08001eed 	.word	0x08001eed
 8001600:	20004c94 	.word	0x20004c94
 8001604:	08009684 	.word	0x08009684
 8001608:	08001f01 	.word	0x08001f01
 800160c:	20004bb0 	.word	0x20004bb0
 8001610:	080096a8 	.word	0x080096a8
 8001614:	08001f19 	.word	0x08001f19
 8001618:	20004c90 	.word	0x20004c90
 800161c:	080096cc 	.word	0x080096cc
 8001620:	08001f2d 	.word	0x08001f2d
 8001624:	20004c9c 	.word	0x20004c9c

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	; 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	2230      	movs	r2, #48	; 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f007 ffca 	bl	80095d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <SystemClock_Config+0xcc>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <SystemClock_Config+0xcc>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <SystemClock_Config+0xcc>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <SystemClock_Config+0xd0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <SystemClock_Config+0xd0>)
 8001672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <SystemClock_Config+0xd0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	2302      	movs	r3, #2
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001698:	2304      	movs	r3, #4
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800169c:	2348      	movs	r3, #72	; 0x48
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016a4:	2307      	movs	r3, #7
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 faaf 	bl	8003c10 <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016b8:	f000 fc54 	bl	8001f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c0:	2302      	movs	r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2102      	movs	r1, #2
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fd10 	bl	8004100 <HAL_RCC_ClockConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016e6:	f000 fc3d 	bl	8001f64 <Error_Handler>
  }
}
 80016ea:	bf00      	nop
 80016ec:	3750      	adds	r7, #80	; 0x50
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000

080016fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_ADC1_Init+0x98>)
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <MX_ADC1_Init+0x9c>)
 8001712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_ADC1_Init+0x98>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <MX_ADC1_Init+0x98>)
 800171c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001720:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_ADC1_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_ADC1_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_ADC1_Init+0x98>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_ADC1_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_ADC1_Init+0x98>)
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <MX_ADC1_Init+0xa0>)
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_ADC1_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_ADC1_Init+0x98>)
 800174a:	2201      	movs	r2, #1
 800174c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_ADC1_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_ADC1_Init+0x98>)
 8001758:	2201      	movs	r2, #1
 800175a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_ADC1_Init+0x98>)
 800175e:	f001 f813 	bl	8002788 <HAL_ADC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001768:	f000 fbfc 	bl	8001f64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800176c:	2303      	movs	r3, #3
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_ADC1_Init+0x98>)
 800177e:	f001 f9e5 	bl	8002b4c <HAL_ADC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001788:	f000 fbec 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20004b68 	.word	0x20004b68
 8001798:	40012000 	.word	0x40012000
 800179c:	0f000001 	.word	0x0f000001

080017a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_ADC2_Init+0x98>)
 80017b4:	4a21      	ldr	r2, [pc, #132]	; (800183c <MX_ADC2_Init+0x9c>)
 80017b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_ADC2_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <MX_ADC2_Init+0x98>)
 80017c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <MX_ADC2_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_ADC2_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_ADC2_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <MX_ADC2_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <MX_ADC2_Init+0x98>)
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <MX_ADC2_Init+0xa0>)
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_ADC2_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_ADC2_Init+0x98>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_ADC2_Init+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_ADC2_Init+0x98>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <MX_ADC2_Init+0x98>)
 8001802:	f000 ffc1 	bl	8002788 <HAL_ADC_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800180c:	f000 fbaa 	bl	8001f64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001810:	230b      	movs	r3, #11
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_ADC2_Init+0x98>)
 8001822:	f001 f993 	bl	8002b4c <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800182c:	f000 fb9a 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20004a84 	.word	0x20004a84
 800183c:	40012100 	.word	0x40012100
 8001840:	0f000001 	.word	0x0f000001

08001844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <MX_TIM1_Init+0xa4>)
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <MX_TIM1_Init+0xa8>)
 8001864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <MX_TIM1_Init+0xa4>)
 8001868:	2247      	movs	r2, #71	; 0x47
 800186a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_TIM1_Init+0xa4>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_TIM1_Init+0xa4>)
 8001874:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_TIM1_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MX_TIM1_Init+0xa4>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_TIM1_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800188c:	4816      	ldr	r0, [pc, #88]	; (80018e8 <MX_TIM1_Init+0xa4>)
 800188e:	f003 f83d 	bl	800490c <HAL_TIM_IC_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001898:	f000 fb64 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	480f      	ldr	r0, [pc, #60]	; (80018e8 <MX_TIM1_Init+0xa4>)
 80018ac:	f004 f970 	bl	8005b90 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018b6:	f000 fb55 	bl	8001f64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018be:	2301      	movs	r3, #1
 80018c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_TIM1_Init+0xa4>)
 80018d2:	f003 fa9b 	bl	8004e0c <HAL_TIM_IC_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80018dc:	f000 fb42 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20004bb8 	.word	0x20004bb8
 80018ec:	40010000 	.word	0x40010000

080018f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08e      	sub	sp, #56	; 0x38
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <MX_TIM2_Init+0xe8>)
 8001922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <MX_TIM2_Init+0xe8>)
 800192a:	2247      	movs	r2, #71	; 0x47
 800192c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <MX_TIM2_Init+0xe8>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <MX_TIM2_Init+0xe8>)
 8001936:	f644 6220 	movw	r2, #20000	; 0x4e20
 800193a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <MX_TIM2_Init+0xe8>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <MX_TIM2_Init+0xe8>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001948:	4823      	ldr	r0, [pc, #140]	; (80019d8 <MX_TIM2_Init+0xe8>)
 800194a:	f002 fe07 	bl	800455c <HAL_TIM_Base_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001954:	f000 fb06 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800195e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001962:	4619      	mov	r1, r3
 8001964:	481c      	ldr	r0, [pc, #112]	; (80019d8 <MX_TIM2_Init+0xe8>)
 8001966:	f003 fbaf 	bl	80050c8 <HAL_TIM_ConfigClockSource>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001970:	f000 faf8 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001974:	4818      	ldr	r0, [pc, #96]	; (80019d8 <MX_TIM2_Init+0xe8>)
 8001976:	f002 feb1 	bl	80046dc <HAL_TIM_PWM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001980:	f000 faf0 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	4619      	mov	r1, r3
 8001992:	4811      	ldr	r0, [pc, #68]	; (80019d8 <MX_TIM2_Init+0xe8>)
 8001994:	f004 f8fc 	bl	8005b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800199e:	f000 fae1 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a2:	2360      	movs	r3, #96	; 0x60
 80019a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <MX_TIM2_Init+0xe8>)
 80019ba:	f003 fac3 	bl	8004f44 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019c4:	f000 face 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <MX_TIM2_Init+0xe8>)
 80019ca:	f000 fc4d 	bl	8002268 <HAL_TIM_MspPostInit>

}
 80019ce:	bf00      	nop
 80019d0:	3738      	adds	r7, #56	; 0x38
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20004c48 	.word	0x20004c48

080019dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	615a      	str	r2, [r3, #20]
 80019fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a00:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <MX_TIM3_Init+0xb0>)
 8001a02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a06:	2247      	movs	r2, #71	; 0x47
 8001a08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a12:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a24:	4818      	ldr	r0, [pc, #96]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a26:	f002 fe59 	bl	80046dc <HAL_TIM_PWM_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a30:	f000 fa98 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	4619      	mov	r1, r3
 8001a42:	4811      	ldr	r0, [pc, #68]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a44:	f004 f8a4 	bl	8005b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a4e:	f000 fa89 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a52:	2360      	movs	r3, #96	; 0x60
 8001a54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2204      	movs	r2, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a6a:	f003 fa6b 	bl	8004f44 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a74:	f000 fa76 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM3_Init+0xac>)
 8001a7a:	f000 fbf5 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20004b20 	.word	0x20004b20
 8001a8c:	40000400 	.word	0x40000400

08001a90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001ac2:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <MX_TIM4_Init+0xe8>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001ac8:	2247      	movs	r2, #71	; 0x47
 8001aca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3922;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001ad4:	f640 7252 	movw	r2, #3922	; 0xf52
 8001ad8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ae6:	4823      	ldr	r0, [pc, #140]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001ae8:	f002 fd38 	bl	800455c <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001af2:	f000 fa37 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b00:	4619      	mov	r1, r3
 8001b02:	481c      	ldr	r0, [pc, #112]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001b04:	f003 fae0 	bl	80050c8 <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b0e:	f000 fa29 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b12:	4818      	ldr	r0, [pc, #96]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001b14:	f002 fde2 	bl	80046dc <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b1e:	f000 fa21 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 0320 	add.w	r3, r7, #32
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001b32:	f004 f82d 	bl	8005b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b3c:	f000 fa12 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001b58:	f003 f9f4 	bl	8004f44 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b62:	f000 f9ff 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b66:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM4_Init+0xe4>)
 8001b68:	f000 fb7e 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001b6c:	bf00      	nop
 8001b6e:	3738      	adds	r7, #56	; 0x38
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20004998 	.word	0x20004998
 8001b78:	40000800 	.word	0x40000800

08001b7c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001b96:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <MX_TIM9_Init+0x88>)
 8001b98:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 72-1;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001b9c:	2247      	movs	r2, #71	; 0x47
 8001b9e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001ba8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bac:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001bba:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001bbc:	f002 fd8e 	bl	80046dc <HAL_TIM_PWM_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001bc6:	f000 f9cd 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	; 0x60
 8001bcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001be2:	f003 f9af 	bl	8004f44 <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001bec:	f000 f9ba 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM9_Init+0x84>)
 8001bf2:	f000 fb39 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20004c00 	.word	0x20004c00
 8001c04:	40014000 	.word	0x40014000

08001c08 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c22:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <MX_TIM10_Init+0x98>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c28:	2247      	movs	r2, #71	; 0x47
 8001c2a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c38:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c46:	4815      	ldr	r0, [pc, #84]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c48:	f002 fc88 	bl	800455c <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001c52:	f000 f987 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001c56:	4811      	ldr	r0, [pc, #68]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c58:	f002 fd40 	bl	80046dc <HAL_TIM_PWM_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001c62:	f000 f97f 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c66:	2360      	movs	r3, #96	; 0x60
 8001c68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4807      	ldr	r0, [pc, #28]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c7e:	f003 f961 	bl	8004f44 <HAL_TIM_PWM_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001c88:	f000 f96c 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <MX_TIM10_Init+0x94>)
 8001c8e:	f000 faeb 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001c92:	bf00      	nop
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20004ad0 	.word	0x20004ad0
 8001ca0:	40014400 	.word	0x40014400

08001ca4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <MX_USART3_UART_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cca:	2204      	movs	r2, #4
 8001ccc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cdc:	f003 ffe8 	bl	8005cb0 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f000 f93d 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20004a40 	.word	0x20004a40
 8001cf4:	40004800 	.word	0x40004800

08001cf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_DMA_Init+0x3c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <MX_DMA_Init+0x3c>)
 8001d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_DMA_Init+0x3c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2105      	movs	r1, #5
 8001d1e:	200c      	movs	r0, #12
 8001d20:	f001 f9ea 	bl	80030f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d24:	200c      	movs	r0, #12
 8001d26:	f001 fa03 	bl	8003130 <HAL_NVIC_EnableIRQ>

}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800

08001d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	4b5d      	ldr	r3, [pc, #372]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a5c      	ldr	r2, [pc, #368]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d58:	f043 0310 	orr.w	r3, r3, #16
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	4b56      	ldr	r3, [pc, #344]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a55      	ldr	r2, [pc, #340]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b4f      	ldr	r3, [pc, #316]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a4e      	ldr	r2, [pc, #312]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a47      	ldr	r2, [pc, #284]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b45      	ldr	r3, [pc, #276]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a40      	ldr	r2, [pc, #256]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a39      	ldr	r2, [pc, #228]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <MX_GPIO_Init+0x190>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_ULTRASONIDOS_Pin|IN2_ventilador_Pin|IN1_ventilador_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 7141 	mov.w	r1, #772	; 0x304
 8001dfc:	4833      	ldr	r0, [pc, #204]	; (8001ecc <MX_GPIO_Init+0x194>)
 8001dfe:	f001 fed5 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|LED_sensorTemp_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001e08:	4831      	ldr	r0, [pc, #196]	; (8001ed0 <MX_GPIO_Init+0x198>)
 8001e0a:	f001 fecf 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_Pin|IN1_Pin|LUZ_Pin|LED_GARAJE_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001e14:	482f      	ldr	r0, [pc, #188]	; (8001ed4 <MX_GPIO_Init+0x19c>)
 8001e16:	f001 fec9 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOTON_BLOQUEO_Pin BOTON_ABRIR_PUERTA_Pin BOTON_ALARMA_Pin */
  GPIO_InitStruct.Pin = BOTON_BLOQUEO_Pin|BOTON_ABRIR_PUERTA_Pin|BOTON_ALARMA_Pin;
 8001e1a:	2313      	movs	r3, #19
 8001e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4827      	ldr	r0, [pc, #156]	; (8001ecc <MX_GPIO_Init+0x194>)
 8001e30:	f001 fd08 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_ULTRASONIDOS_Pin IN2_ventilador_Pin IN1_ventilador_Pin */
  GPIO_InitStruct.Pin = TRIG_ULTRASONIDOS_Pin|IN2_ventilador_Pin|IN1_ventilador_Pin;
 8001e34:	f44f 7341 	mov.w	r3, #772	; 0x304
 8001e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	481f      	ldr	r0, [pc, #124]	; (8001ecc <MX_GPIO_Init+0x194>)
 8001e4e:	f001 fcf9 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 LED_sensorTemp_Pin PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_sensorTemp_Pin|GPIO_PIN_15;
 8001e52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <MX_GPIO_Init+0x198>)
 8001e6c:	f001 fcea 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN1_Pin LUZ_Pin LED_GARAJE_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin|LUZ_Pin|LED_GARAJE_Pin;
 8001e70:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_GPIO_Init+0x19c>)
 8001e8a:	f001 fcdb 	bl	8003844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2105      	movs	r1, #5
 8001e92:	2006      	movs	r0, #6
 8001e94:	f001 f930 	bl	80030f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e98:	2006      	movs	r0, #6
 8001e9a:	f001 f949 	bl	8003130 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2105      	movs	r1, #5
 8001ea2:	2007      	movs	r0, #7
 8001ea4:	f001 f928 	bl	80030f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ea8:	2007      	movs	r0, #7
 8001eaa:	f001 f941 	bl	8003130 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2105      	movs	r1, #5
 8001eb2:	200a      	movs	r0, #10
 8001eb4:	f001 f920 	bl	80030f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001eb8:	200a      	movs	r0, #10
 8001eba:	f001 f939 	bl	8003130 <HAL_NVIC_EnableIRQ>

}
 8001ebe:	bf00      	nop
 8001ec0:	3730      	adds	r7, #48	; 0x30
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40020800 	.word	0x40020800

08001ed8 <StartAlarma>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAlarma */
void StartAlarma(void *argument)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  alarma();
 8001ee0:	f7ff faaa 	bl	8001438 <alarma>
	  osDelay(1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f004 fecb 	bl	8006c80 <osDelay>
	  alarma();
 8001eea:	e7f9      	b.n	8001ee0 <StartAlarma+0x8>

08001eec <StartPuerta>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPuerta */
void StartPuerta(void *argument)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPuerta */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f004 fec3 	bl	8006c80 <osDelay>
	puerta();
 8001efa:	f7fe ff7f 	bl	8000dfc <puerta>
    osDelay(1);
 8001efe:	e7f9      	b.n	8001ef4 <StartPuerta+0x8>

08001f00 <StartVentilador>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVentilador */
void StartVentilador(void *argument)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVentilador */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f004 feb9 	bl	8006c80 <osDelay>
    ventilador();
 8001f0e:	f7ff fa5f 	bl	80013d0 <ventilador>
    temperatura();
 8001f12:	f7ff f92d 	bl	8001170 <temperatura>
    osDelay(1);
 8001f16:	e7f7      	b.n	8001f08 <StartVentilador+0x8>

08001f18 <StartPersiana>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPersiana */
void StartPersiana(void *argument)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPersiana */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f004 fead 	bl	8006c80 <osDelay>
    persianas();
 8001f26:	f7ff f99b 	bl	8001260 <persianas>
    osDelay(1);
 8001f2a:	e7f9      	b.n	8001f20 <StartPersiana+0x8>

08001f2c <StartLDR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLDR */
void StartLDR(void *argument)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLDR */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f004 fea3 	bl	8006c80 <osDelay>
    LDR();
 8001f3a:	f7ff f8eb 	bl	8001114 <LDR>
    osDelay(1);
 8001f3e:	e7f9      	b.n	8001f34 <StartLDR+0x8>

08001f40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f52:	f000 fbf9 	bl	8002748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40001000 	.word	0x40001000

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <Error_Handler+0x8>
	...

08001f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_MspInit+0x54>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	210f      	movs	r1, #15
 8001fb2:	f06f 0001 	mvn.w	r0, #1
 8001fb6:	f001 f89f 	bl	80030f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	; (80020a0 <HAL_ADC_MspInit+0xd8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d128      	bne.n	800203c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8002022:	2308      	movs	r3, #8
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002026:	2303      	movs	r3, #3
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	481c      	ldr	r0, [pc, #112]	; (80020a8 <HAL_ADC_MspInit+0xe0>)
 8002036:	f001 fc05 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800203a:	e02c      	b.n	8002096 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <HAL_ADC_MspInit+0xe4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d127      	bne.n	8002096 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8002050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_ADC_MspInit+0xdc>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Sensor_temperatura_Pin;
 800207e:	2302      	movs	r3, #2
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Sensor_temperatura_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <HAL_ADC_MspInit+0xe8>)
 8002092:	f001 fbd7 	bl	8003844 <HAL_GPIO_Init>
}
 8002096:	bf00      	nop
 8002098:	3730      	adds	r7, #48	; 0x30
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40012000 	.word	0x40012000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40012100 	.word	0x40012100
 80020b0:	40020800 	.word	0x40020800

080020b4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_TIM_IC_MspInit+0x94>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d134      	bne.n	8002140 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_TIM_IC_MspInit+0x98>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_TIM_IC_MspInit+0x98>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_TIM_IC_MspInit+0x98>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_TIM_IC_MspInit+0x98>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a14      	ldr	r2, [pc, #80]	; (800214c <HAL_TIM_IC_MspInit+0x98>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_TIM_IC_MspInit+0x98>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_ULTRASONIDOS_Pin;
 800210e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002120:	2301      	movs	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_ULTRASONIDOS_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4809      	ldr	r0, [pc, #36]	; (8002150 <HAL_TIM_IC_MspInit+0x9c>)
 800212c:	f001 fb8a 	bl	8003844 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2105      	movs	r1, #5
 8002134:	201b      	movs	r0, #27
 8002136:	f000 ffdf 	bl	80030f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800213a:	201b      	movs	r0, #27
 800213c:	f000 fff8 	bl	8003130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40010000 	.word	0x40010000
 800214c:	40023800 	.word	0x40023800
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d116      	bne.n	8002194 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2105      	movs	r1, #5
 8002186:	201c      	movs	r0, #28
 8002188:	f000 ffb6 	bl	80030f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800218c:	201c      	movs	r0, #28
 800218e:	f000 ffcf 	bl	8003130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002192:	e026      	b.n	80021e2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <HAL_TIM_Base_MspInit+0x9c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
}
 80021ba:	e012      	b.n	80021e2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10d      	bne.n	80021e2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_TIM_Base_MspInit+0x98>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40014400 	.word	0x40014400

080021f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a15      	ldr	r2, [pc, #84]	; (800225c <HAL_TIM_PWM_MspInit+0x64>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10e      	bne.n	8002228 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_TIM_PWM_MspInit+0x68>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_TIM_PWM_MspInit+0x68>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_TIM_PWM_MspInit+0x68>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002226:	e012      	b.n	800224e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM9)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <HAL_TIM_PWM_MspInit+0x6c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d10d      	bne.n	800224e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_TIM_PWM_MspInit+0x68>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_TIM_PWM_MspInit+0x68>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_TIM_PWM_MspInit+0x68>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40000400 	.word	0x40000400
 8002260:	40023800 	.word	0x40023800
 8002264:	40014000 	.word	0x40014000

08002268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d11f      	bne.n	80022ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 80022a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b8:	2301      	movs	r3, #1
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	484d      	ldr	r0, [pc, #308]	; (80023f8 <HAL_TIM_MspPostInit+0x190>)
 80022c4:	f001 fabe 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80022c8:	e090      	b.n	80023ec <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM3)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_TIM_MspPostInit+0x194>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d11e      	bne.n	8002312 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a45      	ldr	r2, [pc, #276]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002300:	2302      	movs	r3, #2
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	483b      	ldr	r0, [pc, #236]	; (80023f8 <HAL_TIM_MspPostInit+0x190>)
 800230c:	f001 fa9a 	bl	8003844 <HAL_GPIO_Init>
}
 8002310:	e06c      	b.n	80023ec <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM4)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3a      	ldr	r2, [pc, #232]	; (8002400 <HAL_TIM_MspPostInit+0x198>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d11f      	bne.n	800235c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 8002326:	f043 0308 	orr.w	r3, r3, #8
 800232a:	6313      	str	r3, [r2, #48]	; 0x30
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ZUMBADOR_Pin;
 8002338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800234a:	2302      	movs	r3, #2
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ZUMBADOR_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	482b      	ldr	r0, [pc, #172]	; (8002404 <HAL_TIM_MspPostInit+0x19c>)
 8002356:	f001 fa75 	bl	8003844 <HAL_GPIO_Init>
}
 800235a:	e047      	b.n	80023ec <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM9)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <HAL_TIM_MspPostInit+0x1a0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d11e      	bne.n	80023a4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENABLE_PUENTE_H_Pin;
 8002382:	2320      	movs	r3, #32
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002392:	2303      	movs	r3, #3
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENABLE_PUENTE_H_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	481b      	ldr	r0, [pc, #108]	; (800240c <HAL_TIM_MspPostInit+0x1a4>)
 800239e:	f001 fa51 	bl	8003844 <HAL_GPIO_Init>
}
 80023a2:	e023      	b.n	80023ec <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM10)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_TIM_MspPostInit+0x1a8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d11e      	bne.n	80023ec <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_TIM_MspPostInit+0x18c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80023dc:	2303      	movs	r3, #3
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	480b      	ldr	r0, [pc, #44]	; (8002414 <HAL_TIM_MspPostInit+0x1ac>)
 80023e8:	f001 fa2c 	bl	8003844 <HAL_GPIO_Init>
}
 80023ec:	bf00      	nop
 80023ee:	3730      	adds	r7, #48	; 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800
 8002404:	40020c00 	.word	0x40020c00
 8002408:	40014000 	.word	0x40014000
 800240c:	40021000 	.word	0x40021000
 8002410:	40014400 	.word	0x40014400
 8002414:	40020400 	.word	0x40020400

08002418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a34      	ldr	r2, [pc, #208]	; (8002508 <HAL_UART_MspInit+0xf0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d162      	bne.n	8002500 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_UART_MspInit+0xf4>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a32      	ldr	r2, [pc, #200]	; (800250c <HAL_UART_MspInit+0xf4>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_UART_MspInit+0xf4>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b2c      	ldr	r3, [pc, #176]	; (800250c <HAL_UART_MspInit+0xf4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a2b      	ldr	r2, [pc, #172]	; (800250c <HAL_UART_MspInit+0xf4>)
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_UART_MspInit+0xf4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002484:	2307      	movs	r3, #7
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	4820      	ldr	r0, [pc, #128]	; (8002510 <HAL_UART_MspInit+0xf8>)
 8002490:	f001 f9d8 	bl	8003844 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_UART_MspInit+0xfc>)
 8002496:	4a20      	ldr	r2, [pc, #128]	; (8002518 <HAL_UART_MspInit+0x100>)
 8002498:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_UART_MspInit+0xfc>)
 800249c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024d4:	480f      	ldr	r0, [pc, #60]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024d6:	f000 fe39 	bl	800314c <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80024e0:	f7ff fd40 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2105      	movs	r1, #5
 80024f4:	2027      	movs	r0, #39	; 0x27
 80024f6:	f000 fdff 	bl	80030f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024fa:	2027      	movs	r0, #39	; 0x27
 80024fc:	f000 fe18 	bl	8003130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40004800 	.word	0x40004800
 800250c:	40023800 	.word	0x40023800
 8002510:	40020400 	.word	0x40020400
 8002514:	200049e0 	.word	0x200049e0
 8002518:	40026028 	.word	0x40026028

0800251c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800252c:	2200      	movs	r2, #0
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	2036      	movs	r0, #54	; 0x36
 8002532:	f000 fde1 	bl	80030f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002536:	2036      	movs	r0, #54	; 0x36
 8002538:	f000 fdfa 	bl	8003130 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <HAL_InitTick+0xa4>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_InitTick+0xa4>)
 8002546:	f043 0310 	orr.w	r3, r3, #16
 800254a:	6413      	str	r3, [r2, #64]	; 0x40
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_InitTick+0xa4>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002558:	f107 0210 	add.w	r2, r7, #16
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f001 ffc8 	bl	80044f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002568:	f001 ff9e 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 800256c:	4603      	mov	r3, r0
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_InitTick+0xa8>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	3b01      	subs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_InitTick+0xac>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <HAL_InitTick+0xb0>)
 8002584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_InitTick+0xac>)
 8002588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800258c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_InitTick+0xac>)
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_InitTick+0xac>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_InitTick+0xac>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80025a0:	4809      	ldr	r0, [pc, #36]	; (80025c8 <HAL_InitTick+0xac>)
 80025a2:	f001 ffdb 	bl	800455c <HAL_TIM_Base_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80025ac:	4806      	ldr	r0, [pc, #24]	; (80025c8 <HAL_InitTick+0xac>)
 80025ae:	f002 f825 	bl	80045fc <HAL_TIM_Base_Start_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3730      	adds	r7, #48	; 0x30
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	431bde83 	.word	0x431bde83
 80025c8:	20004ca0 	.word	0x20004ca0
 80025cc:	40001000 	.word	0x40001000

080025d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <NMI_Handler+0x4>

080025d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025da:	e7fe      	b.n	80025da <HardFault_Handler+0x4>

080025dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <MemManage_Handler+0x4>

080025e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <BusFault_Handler+0x4>

080025e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <UsageFault_Handler+0x4>

080025ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON_BLOQUEO_Pin);
 8002600:	2001      	movs	r0, #1
 8002602:	f001 faed 	bl	8003be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}

0800260a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sensor_temperatura_Pin);
 800260e:	2002      	movs	r0, #2
 8002610:	f001 fae6 	bl	8003be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON_ALARMA_Pin);
 800261c:	2010      	movs	r0, #16
 800261e:	f001 fadf 	bl	8003be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <DMA1_Stream1_IRQHandler+0x10>)
 800262e:	f000 fecd 	bl	80033cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200049e0 	.word	0x200049e0

0800263c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <TIM1_CC_IRQHandler+0x10>)
 8002642:	f002 fadb 	bl	8004bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20004bb8 	.word	0x20004bb8

08002650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <TIM2_IRQHandler+0x10>)
 8002656:	f002 fad1 	bl	8004bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20004c48 	.word	0x20004c48

08002664 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <USART3_IRQHandler+0x10>)
 800266a:	f003 fb9f 	bl	8005dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20004a40 	.word	0x20004a40

08002678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM6_DAC_IRQHandler+0x10>)
 800267e:	f002 fabd 	bl	8004bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20004ca0 	.word	0x20004ca0

0800268c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <SystemInit+0x20>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <SystemInit+0x20>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026b6:	490e      	ldr	r1, [pc, #56]	; (80026f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026cc:	4c0b      	ldr	r4, [pc, #44]	; (80026fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026da:	f7ff ffd7 	bl	800268c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026de:	f006 ff45 	bl	800956c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e2:	f7fe ff13 	bl	800150c <main>
  bx  lr    
 80026e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80026f4:	08009720 	.word	0x08009720
  ldr r2, =_sbss
 80026f8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80026fc:	20004d2c 	.word	0x20004d2c

08002700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC_IRQHandler>
	...

08002704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_Init+0x40>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <HAL_Init+0x40>)
 800270e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_Init+0x40>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_Init+0x40>)
 800271a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a07      	ldr	r2, [pc, #28]	; (8002744 <HAL_Init+0x40>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800272c:	2003      	movs	r0, #3
 800272e:	f000 fcd8 	bl	80030e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002732:	200f      	movs	r0, #15
 8002734:	f7ff fef2 	bl	800251c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002738:	f7ff fc1a 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_IncTick+0x24>)
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000010 	.word	0x20000010
 800276c:	20004ce8 	.word	0x20004ce8

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20004ce8 	.word	0x20004ce8

08002788 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e033      	b.n	8002806 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fc0e 	bl	8001fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d118      	bne.n	80027f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ce:	f023 0302 	bic.w	r3, r3, #2
 80027d2:	f043 0202 	orr.w	r2, r3, #2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fad8 	bl	8002d90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
 80027f6:	e001      	b.n	80027fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ADC_Start+0x1a>
 8002826:	2302      	movs	r3, #2
 8002828:	e0b2      	b.n	8002990 <HAL_ADC_Start+0x180>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d018      	beq.n	8002872 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <HAL_ADC_Start+0x18c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_ADC_Start+0x190>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9a      	lsrs	r2, r3, #18
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002864:	e002      	b.n	800286c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3b01      	subs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d17a      	bne.n	8002976 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028be:	d106      	bne.n	80028ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f023 0206 	bic.w	r2, r3, #6
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_ADC_Start+0x194>)
 80028de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d12a      	bne.n	800294c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <HAL_ADC_Start+0x198>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d015      	beq.n	800292c <HAL_ADC_Start+0x11c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a29      	ldr	r2, [pc, #164]	; (80029ac <HAL_ADC_Start+0x19c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d105      	bne.n	8002916 <HAL_ADC_Start+0x106>
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HAL_ADC_Start+0x194>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <HAL_ADC_Start+0x1a0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d136      	bne.n	800298e <HAL_ADC_Start+0x17e>
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_ADC_Start+0x194>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d130      	bne.n	800298e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d129      	bne.n	800298e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	e020      	b.n	800298e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <HAL_ADC_Start+0x198>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d11b      	bne.n	800298e <HAL_ADC_Start+0x17e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d114      	bne.n	800298e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	e00b      	b.n	800298e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f043 0210 	orr.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	20000008 	.word	0x20000008
 80029a0:	431bde83 	.word	0x431bde83
 80029a4:	40012300 	.word	0x40012300
 80029a8:	40012000 	.word	0x40012000
 80029ac:	40012100 	.word	0x40012100
 80029b0:	40012200 	.word	0x40012200

080029b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Stop+0x16>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e021      	b.n	8002a0e <HAL_ADC_Stop+0x5a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d113      	bne.n	8002a60 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a46:	d10b      	bne.n	8002a60 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e063      	b.n	8002b28 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a60:	f7ff fe86 	bl	8002770 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a66:	e021      	b.n	8002aac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d01d      	beq.n	8002aac <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_ADC_PollForConversion+0x6c>
 8002a76:	f7ff fe7b 	bl	8002770 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d212      	bcs.n	8002aac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d00b      	beq.n	8002aac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e03d      	b.n	8002b28 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d1d6      	bne.n	8002a68 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f06f 0212 	mvn.w	r2, #18
 8002ac2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d123      	bne.n	8002b26 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11f      	bne.n	8002b26 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d111      	bne.n	8002b26 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1c>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e105      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x228>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d925      	bls.n	8002bc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68d9      	ldr	r1, [r3, #12]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b1e      	subs	r3, #30
 8002b8e:	2207      	movs	r2, #7
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43da      	mvns	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4403      	add	r3, r0
 8002bb6:	3b1e      	subs	r3, #30
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	e022      	b.n	8002c0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6919      	ldr	r1, [r3, #16]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	2207      	movs	r2, #7
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	400a      	ands	r2, r1
 8002be6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6919      	ldr	r1, [r3, #16]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4403      	add	r3, r0
 8002c00:	409a      	lsls	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d824      	bhi.n	8002c5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	3b05      	subs	r3, #5
 8002c24:	221f      	movs	r2, #31
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	400a      	ands	r2, r1
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	4618      	mov	r0, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b05      	subs	r3, #5
 8002c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
 8002c5a:	e04c      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d824      	bhi.n	8002cae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	3b23      	subs	r3, #35	; 0x23
 8002c76:	221f      	movs	r2, #31
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	400a      	ands	r2, r1
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	4618      	mov	r0, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b23      	subs	r3, #35	; 0x23
 8002ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
 8002cac:	e023      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b41      	subs	r3, #65	; 0x41
 8002cc0:	221f      	movs	r2, #31
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	400a      	ands	r2, r1
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4618      	mov	r0, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3b41      	subs	r3, #65	; 0x41
 8002cea:	fa00 f203 	lsl.w	r2, r0, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf6:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_ADC_ConfigChannel+0x234>)
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <HAL_ADC_ConfigChannel+0x238>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d109      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x1cc>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b12      	cmp	r3, #18
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_ADC_ConfigChannel+0x238>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d123      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x21e>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d003      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x1e6>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b11      	cmp	r3, #17
 8002d30:	d11b      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d111      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_ADC_ConfigChannel+0x23c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_ADC_ConfigChannel+0x240>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	0c9a      	lsrs	r2, r3, #18
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f9      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40012300 	.word	0x40012300
 8002d84:	40012000 	.word	0x40012000
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	431bde83 	.word	0x431bde83

08002d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <ADC_Init+0x1f0>)
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <ADC_Init+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	e00f      	b.n	8002e8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0202 	bic.w	r2, r2, #2
 8002e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7e1b      	ldrb	r3, [r3, #24]
 8002ea8:	005a      	lsls	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6859      	ldr	r1, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	035a      	lsls	r2, r3, #13
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	e007      	b.n	8002f04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	051a      	lsls	r2, r3, #20
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f46:	025a      	lsls	r2, r3, #9
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	029a      	lsls	r2, r3, #10
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40012300 	.word	0x40012300
 8002f84:	0f000001 	.word	0x0f000001

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4907      	ldr	r1, [pc, #28]	; (8003024 <__NVIC_EnableIRQ+0x38>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	; (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	; (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ff4c 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800310a:	f7ff ff61 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 800310e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	6978      	ldr	r0, [r7, #20]
 8003116:	f7ff ffb1 	bl	800307c <NVIC_EncodePriority>
 800311a:	4602      	mov	r2, r0
 800311c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff80 	bl	8003028 <__NVIC_SetPriority>
}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff54 	bl	8002fec <__NVIC_EnableIRQ>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff fb0a 	bl	8002770 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e099      	b.n	800329c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	e00f      	b.n	80031aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7ff faf1 	bl	8002770 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d908      	bls.n	80031aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e078      	b.n	800329c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e8      	bne.n	800318a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_DMA_Init+0x158>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b04      	cmp	r3, #4
 800323c:	d117      	bne.n	800326e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa7b 	bl	800374c <DMA_CheckFifoParam>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800326a:	2301      	movs	r3, #1
 800326c:	e016      	b.n	800329c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa32 	bl	80036e0 <DMA_CalcBaseAndBitshift>
 800327c:	4603      	mov	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	223f      	movs	r2, #63	; 0x3f
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f010803f 	.word	0xf010803f

080032a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032b6:	f7ff fa5b 	bl	8002770 <HAL_GetTick>
 80032ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d008      	beq.n	80032da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e052      	b.n	8003380 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0216 	bic.w	r2, r2, #22
 80032e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <HAL_DMA_Abort+0x62>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0208 	bic.w	r2, r2, #8
 8003318:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332a:	e013      	b.n	8003354 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800332c:	f7ff fa20 	bl	8002770 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b05      	cmp	r3, #5
 8003338:	d90c      	bls.n	8003354 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e015      	b.n	8003380 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1e4      	bne.n	800332c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	223f      	movs	r2, #63	; 0x3f
 8003368:	409a      	lsls	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e00c      	b.n	80033c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2205      	movs	r2, #5
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033d8:	4b92      	ldr	r3, [pc, #584]	; (8003624 <HAL_DMA_IRQHandler+0x258>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a92      	ldr	r2, [pc, #584]	; (8003628 <HAL_DMA_IRQHandler+0x25c>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	2208      	movs	r2, #8
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01a      	beq.n	8003438 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	2208      	movs	r2, #8
 8003426:	409a      	lsls	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2201      	movs	r2, #1
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	2201      	movs	r2, #1
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f043 0202 	orr.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2204      	movs	r2, #4
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d012      	beq.n	80034a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2204      	movs	r2, #4
 8003492:	409a      	lsls	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2210      	movs	r2, #16
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d043      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d03c      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2210      	movs	r2, #16
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d018      	beq.n	800350e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d024      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
 80034fa:	e01f      	b.n	800353c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
 800350c:	e016      	b.n	800353c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0208 	bic.w	r2, r2, #8
 800352a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	2220      	movs	r2, #32
 8003542:	409a      	lsls	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 808e 	beq.w	800366a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8086 	beq.w	800366a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	2220      	movs	r2, #32
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b05      	cmp	r3, #5
 8003574:	d136      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0216 	bic.w	r2, r2, #22
 8003584:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003594:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <HAL_DMA_IRQHandler+0x1da>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0208 	bic.w	r2, r2, #8
 80035b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	223f      	movs	r2, #63	; 0x3f
 80035bc:	409a      	lsls	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d07d      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
        }
        return;
 80035e2:	e078      	b.n	80036d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01c      	beq.n	800362c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	2b00      	cmp	r3, #0
 8003606:	d030      	beq.n	800366a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
 8003610:	e02b      	b.n	800366a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d027      	beq.n	800366a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
 8003622:	e022      	b.n	800366a <HAL_DMA_IRQHandler+0x29e>
 8003624:	20000008 	.word	0x20000008
 8003628:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0210 	bic.w	r2, r2, #16
 8003648:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	2b00      	cmp	r3, #0
 8003670:	d032      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d022      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2205      	movs	r2, #5
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3301      	adds	r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d307      	bcc.n	80036b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f2      	bne.n	8003696 <HAL_DMA_IRQHandler+0x2ca>
 80036b0:	e000      	b.n	80036b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036b2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
 80036d4:	e000      	b.n	80036d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80036d6:	bf00      	nop
    }
  }
}
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop

080036e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3b10      	subs	r3, #16
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <DMA_CalcBaseAndBitshift+0x64>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <DMA_CalcBaseAndBitshift+0x68>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d909      	bls.n	8003722 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	659a      	str	r2, [r3, #88]	; 0x58
 8003720:	e007      	b.n	8003732 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	aaaaaaab 	.word	0xaaaaaaab
 8003748:	08009708 	.word	0x08009708

0800374c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11f      	bne.n	80037a6 <DMA_CheckFifoParam+0x5a>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d856      	bhi.n	800381a <DMA_CheckFifoParam+0xce>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <DMA_CheckFifoParam+0x28>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	08003785 	.word	0x08003785
 8003778:	08003797 	.word	0x08003797
 800377c:	08003785 	.word	0x08003785
 8003780:	0800381b 	.word	0x0800381b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d046      	beq.n	800381e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003794:	e043      	b.n	800381e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800379e:	d140      	bne.n	8003822 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a4:	e03d      	b.n	8003822 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ae:	d121      	bne.n	80037f4 <DMA_CheckFifoParam+0xa8>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d837      	bhi.n	8003826 <DMA_CheckFifoParam+0xda>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <DMA_CheckFifoParam+0x70>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d3 	.word	0x080037d3
 80037c4:	080037cd 	.word	0x080037cd
 80037c8:	080037e5 	.word	0x080037e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      break;
 80037d0:	e030      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d025      	beq.n	800382a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e2:	e022      	b.n	800382a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ec:	d11f      	bne.n	800382e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037f2:	e01c      	b.n	800382e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d903      	bls.n	8003802 <DMA_CheckFifoParam+0xb6>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d003      	beq.n	8003808 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003800:	e018      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      break;
 8003806:	e015      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00e      	beq.n	8003832 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      break;
 8003818:	e00b      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      break;
 800381a:	bf00      	nop
 800381c:	e00a      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e008      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e006      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e004      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;   
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
    }
  } 
  
  return status; 
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop

08003844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e16b      	b.n	8003b38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003860:	2201      	movs	r2, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	f040 815a 	bne.w	8003b32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d005      	beq.n	8003896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003892:	2b02      	cmp	r3, #2
 8003894:	d130      	bne.n	80038f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038cc:	2201      	movs	r2, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 0201 	and.w	r2, r3, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b03      	cmp	r3, #3
 8003902:	d017      	beq.n	8003934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d123      	bne.n	8003988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	08da      	lsrs	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3208      	adds	r2, #8
 8003948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	220f      	movs	r2, #15
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	08da      	lsrs	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3208      	adds	r2, #8
 8003982:	69b9      	ldr	r1, [r7, #24]
 8003984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2203      	movs	r2, #3
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80b4 	beq.w	8003b32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	4b60      	ldr	r3, [pc, #384]	; (8003b50 <HAL_GPIO_Init+0x30c>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	4a5f      	ldr	r2, [pc, #380]	; (8003b50 <HAL_GPIO_Init+0x30c>)
 80039d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d8:	6453      	str	r3, [r2, #68]	; 0x44
 80039da:	4b5d      	ldr	r3, [pc, #372]	; (8003b50 <HAL_GPIO_Init+0x30c>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e6:	4a5b      	ldr	r2, [pc, #364]	; (8003b54 <HAL_GPIO_Init+0x310>)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	3302      	adds	r3, #2
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	220f      	movs	r2, #15
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <HAL_GPIO_Init+0x314>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02b      	beq.n	8003a6a <HAL_GPIO_Init+0x226>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a51      	ldr	r2, [pc, #324]	; (8003b5c <HAL_GPIO_Init+0x318>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d025      	beq.n	8003a66 <HAL_GPIO_Init+0x222>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a50      	ldr	r2, [pc, #320]	; (8003b60 <HAL_GPIO_Init+0x31c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01f      	beq.n	8003a62 <HAL_GPIO_Init+0x21e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4f      	ldr	r2, [pc, #316]	; (8003b64 <HAL_GPIO_Init+0x320>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_Init+0x21a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4e      	ldr	r2, [pc, #312]	; (8003b68 <HAL_GPIO_Init+0x324>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_GPIO_Init+0x216>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4d      	ldr	r2, [pc, #308]	; (8003b6c <HAL_GPIO_Init+0x328>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_Init+0x212>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4c      	ldr	r2, [pc, #304]	; (8003b70 <HAL_GPIO_Init+0x32c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x20e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4b      	ldr	r2, [pc, #300]	; (8003b74 <HAL_GPIO_Init+0x330>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x20a>
 8003a4a:	2307      	movs	r3, #7
 8003a4c:	e00e      	b.n	8003a6c <HAL_GPIO_Init+0x228>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	e00c      	b.n	8003a6c <HAL_GPIO_Init+0x228>
 8003a52:	2306      	movs	r3, #6
 8003a54:	e00a      	b.n	8003a6c <HAL_GPIO_Init+0x228>
 8003a56:	2305      	movs	r3, #5
 8003a58:	e008      	b.n	8003a6c <HAL_GPIO_Init+0x228>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	e006      	b.n	8003a6c <HAL_GPIO_Init+0x228>
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e004      	b.n	8003a6c <HAL_GPIO_Init+0x228>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e002      	b.n	8003a6c <HAL_GPIO_Init+0x228>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_GPIO_Init+0x228>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	f002 0203 	and.w	r2, r2, #3
 8003a72:	0092      	lsls	r2, r2, #2
 8003a74:	4093      	lsls	r3, r2
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a7c:	4935      	ldr	r1, [pc, #212]	; (8003b54 <HAL_GPIO_Init+0x310>)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	3302      	adds	r3, #2
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	43db      	mvns	r3, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4013      	ands	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aae:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b02:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b2c:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3301      	adds	r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	f67f ae90 	bls.w	8003860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40013800 	.word	0x40013800
 8003b58:	40020000 	.word	0x40020000
 8003b5c:	40020400 	.word	0x40020400
 8003b60:	40020800 	.word	0x40020800
 8003b64:	40020c00 	.word	0x40020c00
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40021400 	.word	0x40021400
 8003b70:	40021800 	.word	0x40021800
 8003b74:	40021c00 	.word	0x40021c00
 8003b78:	40013c00 	.word	0x40013c00

08003b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e001      	b.n	8003b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bbc:	787b      	ldrb	r3, [r7, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bc8:	e003      	b.n	8003bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	041a      	lsls	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	619a      	str	r2, [r3, #24]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bf6:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd f9a6 	bl	8000f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40013c00 	.word	0x40013c00

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e264      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d075      	beq.n	8003d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2e:	4ba3      	ldr	r3, [pc, #652]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d00c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3a:	4ba0      	ldr	r3, [pc, #640]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d112      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c46:	4b9d      	ldr	r3, [pc, #628]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	4b99      	ldr	r3, [pc, #612]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d05b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x108>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d157      	bne.n	8003d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e23f      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d106      	bne.n	8003c84 <HAL_RCC_OscConfig+0x74>
 8003c76:	4b91      	ldr	r3, [pc, #580]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a90      	ldr	r2, [pc, #576]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x98>
 8003c8e:	4b8b      	ldr	r3, [pc, #556]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a8a      	ldr	r2, [pc, #552]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a87      	ldr	r2, [pc, #540]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003ca8:	4b84      	ldr	r3, [pc, #528]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a83      	ldr	r2, [pc, #524]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b81      	ldr	r3, [pc, #516]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a80      	ldr	r2, [pc, #512]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fd52 	bl	8002770 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fd4e 	bl	8002770 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e204      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b76      	ldr	r3, [pc, #472]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xc0>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fd3e 	bl	8002770 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe fd3a 	bl	8002770 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e1f0      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	4b6c      	ldr	r3, [pc, #432]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0xe8>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d063      	beq.n	8003dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d26:	4b65      	ldr	r3, [pc, #404]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d32:	4b62      	ldr	r3, [pc, #392]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d11c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3e:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d116      	bne.n	8003d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	4b5c      	ldr	r3, [pc, #368]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_RCC_OscConfig+0x152>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e1c4      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4952      	ldr	r1, [pc, #328]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e03a      	b.n	8003dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCC_OscConfig+0x2b0>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fe fcf3 	bl	8002770 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fe fcef 	bl	8002770 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1a5      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4940      	ldr	r1, [pc, #256]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]
 8003dc0:	e015      	b.n	8003dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <HAL_RCC_OscConfig+0x2b0>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fcd2 	bl	8002770 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd0:	f7fe fcce 	bl	8002770 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e184      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d030      	beq.n	8003e5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e02:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <HAL_RCC_OscConfig+0x2b4>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fe fcb2 	bl	8002770 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e10:	f7fe fcae 	bl	8002770 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e164      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x200>
 8003e2e:	e015      	b.n	8003e5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCC_OscConfig+0x2b4>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7fe fc9b 	bl	8002770 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e3e:	f7fe fc97 	bl	8002770 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e14d      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a0 	beq.w	8003faa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e96:	2301      	movs	r3, #1
 8003e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x2b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d121      	bne.n	8003eea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <HAL_RCC_OscConfig+0x2b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <HAL_RCC_OscConfig+0x2b8>)
 8003eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb2:	f7fe fc5d 	bl	8002770 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	e011      	b.n	8003ede <HAL_RCC_OscConfig+0x2ce>
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470000 	.word	0x42470000
 8003ec4:	42470e80 	.word	0x42470e80
 8003ec8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ecc:	f7fe fc50 	bl	8002770 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e106      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b85      	ldr	r3, [pc, #532]	; (80040f4 <HAL_RCC_OscConfig+0x4e4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2f0>
 8003ef2:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a80      	ldr	r2, [pc, #512]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	e01c      	b.n	8003f3a <HAL_RCC_OscConfig+0x32a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d10c      	bne.n	8003f22 <HAL_RCC_OscConfig+0x312>
 8003f08:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a7a      	ldr	r2, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	4a77      	ldr	r2, [pc, #476]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f20:	e00b      	b.n	8003f3a <HAL_RCC_OscConfig+0x32a>
 8003f22:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a74      	ldr	r2, [pc, #464]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	4b72      	ldr	r3, [pc, #456]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a71      	ldr	r2, [pc, #452]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f34:	f023 0304 	bic.w	r3, r3, #4
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d015      	beq.n	8003f6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe fc15 	bl	8002770 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fe fc11 	bl	8002770 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0c5      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ee      	beq.n	8003f4a <HAL_RCC_OscConfig+0x33a>
 8003f6c:	e014      	b.n	8003f98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe fbff 	bl	8002770 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fe fbfb 	bl	8002770 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0af      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8c:	4b5a      	ldr	r3, [pc, #360]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ee      	bne.n	8003f76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4b56      	ldr	r3, [pc, #344]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 809b 	beq.w	80040ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb4:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d05c      	beq.n	800407a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d141      	bne.n	800404c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <HAL_RCC_OscConfig+0x4ec>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fe fbcf 	bl	8002770 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fe fbcb 	bl	8002770 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e081      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	019b      	lsls	r3, r3, #6
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	3b01      	subs	r3, #1
 800400e:	041b      	lsls	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	061b      	lsls	r3, r3, #24
 8004018:	4937      	ldr	r1, [pc, #220]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <HAL_RCC_OscConfig+0x4ec>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fe fba4 	bl	8002770 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe fba0 	bl	8002770 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e056      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b2e      	ldr	r3, [pc, #184]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x41c>
 800404a:	e04e      	b.n	80040ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCC_OscConfig+0x4ec>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fe fb8d 	bl	8002770 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe fb89 	bl	8002770 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e03f      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406c:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x44a>
 8004078:	e037      	b.n	80040ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e032      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d028      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d121      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d11a      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040b6:	4013      	ands	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040be:	4293      	cmp	r3, r2
 80040c0:	d111      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	3b01      	subs	r3, #1
 80040d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40007000 	.word	0x40007000
 80040f8:	40023800 	.word	0x40023800
 80040fc:	42470060 	.word	0x42470060

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0cc      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b68      	ldr	r3, [pc, #416]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d90c      	bls.n	800413c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b8      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a58      	ldr	r2, [pc, #352]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800415e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a52      	ldr	r2, [pc, #328]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b50      	ldr	r3, [pc, #320]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	494d      	ldr	r1, [pc, #308]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d044      	beq.n	8004220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d119      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d003      	beq.n	80041be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	4b3b      	ldr	r3, [pc, #236]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e067      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4934      	ldr	r1, [pc, #208]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f0:	f7fe fabe 	bl	8002770 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fe faba 	bl	8002770 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e04f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d20c      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e032      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4916      	ldr	r1, [pc, #88]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	490e      	ldr	r1, [pc, #56]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004286:	f000 f821 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490a      	ldr	r1, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe f938 	bl	800251c <HAL_InitTick>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023c00 	.word	0x40023c00
 80042bc:	40023800 	.word	0x40023800
 80042c0:	080096f0 	.word	0x080096f0
 80042c4:	20000008 	.word	0x20000008
 80042c8:	2000000c 	.word	0x2000000c

080042cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	2300      	movs	r3, #0
 80042de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e4:	4b67      	ldr	r3, [pc, #412]	; (8004484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d00d      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x40>
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	f200 80bd 	bhi.w	8004470 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x34>
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d003      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x3a>
 80042fe:	e0b7      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004300:	4b61      	ldr	r3, [pc, #388]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004302:	60bb      	str	r3, [r7, #8]
       break;
 8004304:	e0b7      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004306:	4b61      	ldr	r3, [pc, #388]	; (800448c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004308:	60bb      	str	r3, [r7, #8]
      break;
 800430a:	e0b4      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800430c:	4b5d      	ldr	r3, [pc, #372]	; (8004484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004314:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004316:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04d      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004322:	4b58      	ldr	r3, [pc, #352]	; (8004484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	461a      	mov	r2, r3
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	ea02 0800 	and.w	r8, r2, r0
 800433a:	ea03 0901 	and.w	r9, r3, r1
 800433e:	4640      	mov	r0, r8
 8004340:	4649      	mov	r1, r9
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	014b      	lsls	r3, r1, #5
 800434c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004350:	0142      	lsls	r2, r0, #5
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	ebb0 0008 	subs.w	r0, r0, r8
 800435a:	eb61 0109 	sbc.w	r1, r1, r9
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	018b      	lsls	r3, r1, #6
 8004368:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800436c:	0182      	lsls	r2, r0, #6
 800436e:	1a12      	subs	r2, r2, r0
 8004370:	eb63 0301 	sbc.w	r3, r3, r1
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	00d9      	lsls	r1, r3, #3
 800437e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004382:	00d0      	lsls	r0, r2, #3
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	eb12 0208 	adds.w	r2, r2, r8
 800438c:	eb43 0309 	adc.w	r3, r3, r9
 8004390:	f04f 0000 	mov.w	r0, #0
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	0259      	lsls	r1, r3, #9
 800439a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800439e:	0250      	lsls	r0, r2, #9
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	f7fc fafc 	bl	80009ac <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4613      	mov	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e04a      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043be:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	461a      	mov	r2, r3
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	ea02 0400 	and.w	r4, r2, r0
 80043d6:	ea03 0501 	and.w	r5, r3, r1
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	014b      	lsls	r3, r1, #5
 80043e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043ec:	0142      	lsls	r2, r0, #5
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	1b00      	subs	r0, r0, r4
 80043f4:	eb61 0105 	sbc.w	r1, r1, r5
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	018b      	lsls	r3, r1, #6
 8004402:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004406:	0182      	lsls	r2, r0, #6
 8004408:	1a12      	subs	r2, r2, r0
 800440a:	eb63 0301 	sbc.w	r3, r3, r1
 800440e:	f04f 0000 	mov.w	r0, #0
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	00d9      	lsls	r1, r3, #3
 8004418:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800441c:	00d0      	lsls	r0, r2, #3
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	1912      	adds	r2, r2, r4
 8004424:	eb45 0303 	adc.w	r3, r5, r3
 8004428:	f04f 0000 	mov.w	r0, #0
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	0299      	lsls	r1, r3, #10
 8004432:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004436:	0290      	lsls	r0, r2, #10
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	f7fc fab0 	bl	80009ac <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	3301      	adds	r3, #1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	60bb      	str	r3, [r7, #8]
      break;
 800446e:	e002      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004472:	60bb      	str	r3, [r7, #8]
      break;
 8004474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004476:	68bb      	ldr	r3, [r7, #8]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	00f42400 	.word	0x00f42400
 800448c:	007a1200 	.word	0x007a1200

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000008 	.word	0x20000008

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044ac:	f7ff fff0 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0a9b      	lsrs	r3, r3, #10
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	08009700 	.word	0x08009700

080044d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044d4:	f7ff ffdc 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0b5b      	lsrs	r3, r3, #13
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	08009700 	.word	0x08009700

080044f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	220f      	movs	r2, #15
 8004506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_RCC_GetClockConfig+0x5c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0203 	and.w	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <HAL_RCC_GetClockConfig+0x5c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <HAL_RCC_GetClockConfig+0x5c>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCC_GetClockConfig+0x5c>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	08db      	lsrs	r3, r3, #3
 8004532:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <HAL_RCC_GetClockConfig+0x60>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0207 	and.w	r2, r3, #7
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	40023c00 	.word	0x40023c00

0800455c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e041      	b.n	80045f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fd fde6 	bl	8002154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 febe 	bl	800531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d001      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e04e      	b.n	80046b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d022      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463e:	d01d      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d018      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <HAL_TIM_Base_Start_IT+0xd0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00e      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d111      	bne.n	80046a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b06      	cmp	r3, #6
 800468c:	d010      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469e:	e007      	b.n	80046b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40010400 	.word	0x40010400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40001800 	.word	0x40001800

080046dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e041      	b.n	8004772 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fd fd78 	bl	80021f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f000 fdfe 	bl	800531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_TIM_PWM_Start+0x24>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e022      	b.n	80047e6 <HAL_TIM_PWM_Start+0x6a>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d109      	bne.n	80047ba <HAL_TIM_PWM_Start+0x3e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	e015      	b.n	80047e6 <HAL_TIM_PWM_Start+0x6a>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d109      	bne.n	80047d4 <HAL_TIM_PWM_Start+0x58>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e008      	b.n	80047e6 <HAL_TIM_PWM_Start+0x6a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07c      	b.n	80048e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_PWM_Start+0x82>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fc:	e013      	b.n	8004826 <HAL_TIM_PWM_Start+0xaa>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b04      	cmp	r3, #4
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0x92>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480c:	e00b      	b.n	8004826 <HAL_TIM_PWM_Start+0xaa>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xa2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800481c:	e003      	b.n	8004826 <HAL_TIM_PWM_Start+0xaa>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f001 f988 	bl	8005b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2d      	ldr	r2, [pc, #180]	; (80048f0 <HAL_TIM_PWM_Start+0x174>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIM_PWM_Start+0xcc>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2c      	ldr	r2, [pc, #176]	; (80048f4 <HAL_TIM_PWM_Start+0x178>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_TIM_PWM_Start+0xd0>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <HAL_TIM_PWM_Start+0xd2>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <HAL_TIM_PWM_Start+0x174>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d022      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x136>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004874:	d01d      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x136>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <HAL_TIM_PWM_Start+0x17c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d018      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x136>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <HAL_TIM_PWM_Start+0x180>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x136>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <HAL_TIM_PWM_Start+0x184>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x136>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <HAL_TIM_PWM_Start+0x178>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x136>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	; (8004904 <HAL_TIM_PWM_Start+0x188>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x136>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a16      	ldr	r2, [pc, #88]	; (8004908 <HAL_TIM_PWM_Start+0x18c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d111      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d010      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	e007      	b.n	80048e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40014000 	.word	0x40014000
 8004908:	40001800 	.word	0x40001800

0800490c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e041      	b.n	80049a2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fd fbbe 	bl	80020b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fce6 	bl	800531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <HAL_TIM_IC_Start_IT+0x1e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e013      	b.n	80049f2 <HAL_TIM_IC_Start_IT+0x46>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d104      	bne.n	80049da <HAL_TIM_IC_Start_IT+0x2e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e00b      	b.n	80049f2 <HAL_TIM_IC_Start_IT+0x46>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d104      	bne.n	80049ea <HAL_TIM_IC_Start_IT+0x3e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e003      	b.n	80049f2 <HAL_TIM_IC_Start_IT+0x46>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <HAL_TIM_IC_Start_IT+0x58>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e013      	b.n	8004a2c <HAL_TIM_IC_Start_IT+0x80>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d104      	bne.n	8004a14 <HAL_TIM_IC_Start_IT+0x68>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e00b      	b.n	8004a2c <HAL_TIM_IC_Start_IT+0x80>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d104      	bne.n	8004a24 <HAL_TIM_IC_Start_IT+0x78>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e003      	b.n	8004a2c <HAL_TIM_IC_Start_IT+0x80>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d102      	bne.n	8004a3a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a34:	7b7b      	ldrb	r3, [r7, #13]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e0cc      	b.n	8004bd8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_IC_Start_IT+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	e013      	b.n	8004a76 <HAL_TIM_IC_Start_IT+0xca>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_IC_Start_IT+0xb2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	e00b      	b.n	8004a76 <HAL_TIM_IC_Start_IT+0xca>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_IC_Start_IT+0xc2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a6c:	e003      	b.n	8004a76 <HAL_TIM_IC_Start_IT+0xca>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_IC_Start_IT+0xda>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a84:	e013      	b.n	8004aae <HAL_TIM_IC_Start_IT+0x102>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_IC_Start_IT+0xea>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a94:	e00b      	b.n	8004aae <HAL_TIM_IC_Start_IT+0x102>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d104      	bne.n	8004aa6 <HAL_TIM_IC_Start_IT+0xfa>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	e003      	b.n	8004aae <HAL_TIM_IC_Start_IT+0x102>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d841      	bhi.n	8004b38 <HAL_TIM_IC_Start_IT+0x18c>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <HAL_TIM_IC_Start_IT+0x110>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004b39 	.word	0x08004b39
 8004ac4:	08004b39 	.word	0x08004b39
 8004ac8:	08004b39 	.word	0x08004b39
 8004acc:	08004b03 	.word	0x08004b03
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004b39 	.word	0x08004b39
 8004ad8:	08004b39 	.word	0x08004b39
 8004adc:	08004b15 	.word	0x08004b15
 8004ae0:	08004b39 	.word	0x08004b39
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004b39 	.word	0x08004b39
 8004aec:	08004b27 	.word	0x08004b27
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0202 	orr.w	r2, r2, #2
 8004afe:	60da      	str	r2, [r3, #12]
      break;
 8004b00:	e01d      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0204 	orr.w	r2, r2, #4
 8004b10:	60da      	str	r2, [r3, #12]
      break;
 8004b12:	e014      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0208 	orr.w	r2, r2, #8
 8004b22:	60da      	str	r2, [r3, #12]
      break;
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0210 	orr.w	r2, r2, #16
 8004b34:	60da      	str	r2, [r3, #12]
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d148      	bne.n	8004bd6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	6839      	ldr	r1, [r7, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fff9 	bl	8005b44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <HAL_TIM_IC_Start_IT+0x234>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d022      	beq.n	8004ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b64:	d01d      	beq.n	8004ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <HAL_TIM_IC_Start_IT+0x238>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_TIM_IC_Start_IT+0x23c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_TIM_IC_Start_IT+0x240>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_TIM_IC_Start_IT+0x244>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_TIM_IC_Start_IT+0x248>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <HAL_TIM_IC_Start_IT+0x24c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d111      	bne.n	8004bc6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d010      	beq.n	8004bd6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	e007      	b.n	8004bd6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40010400 	.word	0x40010400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40001800 	.word	0x40001800

08004bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0202 	mvn.w	r2, #2
 8004c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc f9aa 	bl	8000f98 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fb4a 	bl	80052e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fb51 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0204 	mvn.w	r2, #4
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc f980 	bl	8000f98 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fb20 	bl	80052e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fb27 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0208 	mvn.w	r2, #8
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fc f956 	bl	8000f98 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 faf6 	bl	80052e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fafd 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0210 	mvn.w	r2, #16
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fc f92c 	bl	8000f98 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 facc 	bl	80052e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fad3 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d107      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0201 	mvn.w	r2, #1
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fd f8e0 	bl	8001f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d107      	bne.n	8004dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 ff78 	bl	8005c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d10e      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d107      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa98 	bl	8005308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d10e      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d107      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0220 	mvn.w	r2, #32
 8004dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 ff42 	bl	8005c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e088      	b.n	8004f3c <HAL_TIM_IC_ConfigChannel+0x130>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11b      	bne.n	8004e70 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f000 fcb8 	bl	80057bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 020c 	bic.w	r2, r2, #12
 8004e5a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	619a      	str	r2, [r3, #24]
 8004e6e:	e060      	b.n	8004f32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d11c      	bne.n	8004eb0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f000 fd3c 	bl	8005902 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e98:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6999      	ldr	r1, [r3, #24]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	021a      	lsls	r2, r3, #8
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	619a      	str	r2, [r3, #24]
 8004eae:	e040      	b.n	8004f32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d11b      	bne.n	8004eee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	6819      	ldr	r1, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f000 fd89 	bl	80059dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 020c 	bic.w	r2, r2, #12
 8004ed8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	61da      	str	r2, [r3, #28]
 8004eec:	e021      	b.n	8004f32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b0c      	cmp	r3, #12
 8004ef2:	d11c      	bne.n	8004f2e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6819      	ldr	r1, [r3, #0]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f000 fda6 	bl	8005a54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f16:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69d9      	ldr	r1, [r3, #28]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	021a      	lsls	r2, r3, #8
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	61da      	str	r2, [r3, #28]
 8004f2c:	e001      	b.n	8004f32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e0ae      	b.n	80050c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	f200 809f 	bhi.w	80050b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f72:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004fad 	.word	0x08004fad
 8004f7c:	080050b1 	.word	0x080050b1
 8004f80:	080050b1 	.word	0x080050b1
 8004f84:	080050b1 	.word	0x080050b1
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	080050b1 	.word	0x080050b1
 8004f90:	080050b1 	.word	0x080050b1
 8004f94:	080050b1 	.word	0x080050b1
 8004f98:	0800502f 	.word	0x0800502f
 8004f9c:	080050b1 	.word	0x080050b1
 8004fa0:	080050b1 	.word	0x080050b1
 8004fa4:	080050b1 	.word	0x080050b1
 8004fa8:	0800506f 	.word	0x0800506f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fa52 	bl	800545c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0204 	bic.w	r2, r2, #4
 8004fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6999      	ldr	r1, [r3, #24]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	619a      	str	r2, [r3, #24]
      break;
 8004fea:	e064      	b.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 faa2 	bl	800553c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6999      	ldr	r1, [r3, #24]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	021a      	lsls	r2, r3, #8
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	619a      	str	r2, [r3, #24]
      break;
 800502c:	e043      	b.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 faf7 	bl	8005628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0208 	orr.w	r2, r2, #8
 8005048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0204 	bic.w	r2, r2, #4
 8005058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69d9      	ldr	r1, [r3, #28]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	61da      	str	r2, [r3, #28]
      break;
 800506c:	e023      	b.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fb4b 	bl	8005710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69d9      	ldr	r1, [r3, #28]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	021a      	lsls	r2, r3, #8
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	61da      	str	r2, [r3, #28]
      break;
 80050ae:	e002      	b.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75fb      	strb	r3, [r7, #23]
      break;
 80050b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050be:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIM_ConfigClockSource+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e0b4      	b.n	800524e <HAL_TIM_ConfigClockSource+0x186>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800510a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	d03e      	beq.n	800519c <HAL_TIM_ConfigClockSource+0xd4>
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	f200 8087 	bhi.w	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	f000 8086 	beq.w	800523a <HAL_TIM_ConfigClockSource+0x172>
 800512e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005132:	d87f      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b70      	cmp	r3, #112	; 0x70
 8005136:	d01a      	beq.n	800516e <HAL_TIM_ConfigClockSource+0xa6>
 8005138:	2b70      	cmp	r3, #112	; 0x70
 800513a:	d87b      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d050      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005140:	2b60      	cmp	r3, #96	; 0x60
 8005142:	d877      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b50      	cmp	r3, #80	; 0x50
 8005146:	d03c      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005148:	2b50      	cmp	r3, #80	; 0x50
 800514a:	d873      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d058      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x13a>
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d86f      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	d064      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005158:	2b30      	cmp	r3, #48	; 0x30
 800515a:	d86b      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d060      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005160:	2b20      	cmp	r3, #32
 8005162:	d867      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d05c      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005168:	2b10      	cmp	r3, #16
 800516a:	d05a      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 800516c:	e062      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6899      	ldr	r1, [r3, #8]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f000 fcc1 	bl	8005b04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	609a      	str	r2, [r3, #8]
      break;
 800519a:	e04f      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6899      	ldr	r1, [r3, #8]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f000 fcaa 	bl	8005b04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051be:	609a      	str	r2, [r3, #8]
      break;
 80051c0:	e03c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f000 fb68 	bl	80058a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2150      	movs	r1, #80	; 0x50
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fc77 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 80051e0:	e02c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f000 fbc4 	bl	800597c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2160      	movs	r1, #96	; 0x60
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fc67 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 8005200:	e01c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	461a      	mov	r2, r3
 8005210:	f000 fb48 	bl	80058a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fc57 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 8005220:	e00c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f000 fc4e 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 8005232:	e003      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e000      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800523a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d831      	bhi.n	80052d0 <HAL_TIM_ReadCapturedValue+0x78>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <HAL_TIM_ReadCapturedValue+0x1c>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	080052a9 	.word	0x080052a9
 8005278:	080052d1 	.word	0x080052d1
 800527c:	080052d1 	.word	0x080052d1
 8005280:	080052d1 	.word	0x080052d1
 8005284:	080052b3 	.word	0x080052b3
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052d1 	.word	0x080052d1
 8005290:	080052d1 	.word	0x080052d1
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052d1 	.word	0x080052d1
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	080052d1 	.word	0x080052d1
 80052a4:	080052c7 	.word	0x080052c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ae:	60fb      	str	r3, [r7, #12]

      break;
 80052b0:	e00f      	b.n	80052d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	60fb      	str	r3, [r7, #12]

      break;
 80052ba:	e00a      	b.n	80052d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	60fb      	str	r3, [r7, #12]

      break;
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	60fb      	str	r3, [r7, #12]

      break;
 80052ce:	e000      	b.n	80052d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80052d0:	bf00      	nop
  }

  return tmpreg;
 80052d2:	68fb      	ldr	r3, [r7, #12]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a40      	ldr	r2, [pc, #256]	; (8005430 <TIM_Base_SetConfig+0x114>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533a:	d00f      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a3d      	ldr	r2, [pc, #244]	; (8005434 <TIM_Base_SetConfig+0x118>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00b      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a3c      	ldr	r2, [pc, #240]	; (8005438 <TIM_Base_SetConfig+0x11c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d007      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a3b      	ldr	r2, [pc, #236]	; (800543c <TIM_Base_SetConfig+0x120>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3a      	ldr	r2, [pc, #232]	; (8005440 <TIM_Base_SetConfig+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d108      	bne.n	800536e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2f      	ldr	r2, [pc, #188]	; (8005430 <TIM_Base_SetConfig+0x114>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02b      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537c:	d027      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2c      	ldr	r2, [pc, #176]	; (8005434 <TIM_Base_SetConfig+0x118>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d023      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2b      	ldr	r2, [pc, #172]	; (8005438 <TIM_Base_SetConfig+0x11c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01f      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2a      	ldr	r2, [pc, #168]	; (800543c <TIM_Base_SetConfig+0x120>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01b      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a29      	ldr	r2, [pc, #164]	; (8005440 <TIM_Base_SetConfig+0x124>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d017      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a28      	ldr	r2, [pc, #160]	; (8005444 <TIM_Base_SetConfig+0x128>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a27      	ldr	r2, [pc, #156]	; (8005448 <TIM_Base_SetConfig+0x12c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00f      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a26      	ldr	r2, [pc, #152]	; (800544c <TIM_Base_SetConfig+0x130>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00b      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a25      	ldr	r2, [pc, #148]	; (8005450 <TIM_Base_SetConfig+0x134>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a24      	ldr	r2, [pc, #144]	; (8005454 <TIM_Base_SetConfig+0x138>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a23      	ldr	r2, [pc, #140]	; (8005458 <TIM_Base_SetConfig+0x13c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <TIM_Base_SetConfig+0x114>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_Base_SetConfig+0xf8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <TIM_Base_SetConfig+0x124>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d103      	bne.n	800541c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	615a      	str	r2, [r3, #20]
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40010400 	.word	0x40010400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800
 8005450:	40001800 	.word	0x40001800
 8005454:	40001c00 	.word	0x40001c00
 8005458:	40002000 	.word	0x40002000

0800545c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0201 	bic.w	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 0302 	bic.w	r3, r3, #2
 80054a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a20      	ldr	r2, [pc, #128]	; (8005534 <TIM_OC1_SetConfig+0xd8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC1_SetConfig+0x64>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <TIM_OC1_SetConfig+0xdc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10c      	bne.n	80054da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0308 	bic.w	r3, r3, #8
 80054c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 0304 	bic.w	r3, r3, #4
 80054d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <TIM_OC1_SetConfig+0xd8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_OC1_SetConfig+0x8e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a14      	ldr	r2, [pc, #80]	; (8005538 <TIM_OC1_SetConfig+0xdc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d111      	bne.n	800550e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40010000 	.word	0x40010000
 8005538:	40010400 	.word	0x40010400

0800553c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0210 	bic.w	r2, r3, #16
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0320 	bic.w	r3, r3, #32
 8005586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a22      	ldr	r2, [pc, #136]	; (8005620 <TIM_OC2_SetConfig+0xe4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC2_SetConfig+0x68>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a21      	ldr	r2, [pc, #132]	; (8005624 <TIM_OC2_SetConfig+0xe8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10d      	bne.n	80055c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <TIM_OC2_SetConfig+0xe4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_OC2_SetConfig+0x94>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a16      	ldr	r2, [pc, #88]	; (8005624 <TIM_OC2_SetConfig+0xe8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d113      	bne.n	80055f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40010400 	.word	0x40010400

08005628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a21      	ldr	r2, [pc, #132]	; (8005708 <TIM_OC3_SetConfig+0xe0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_OC3_SetConfig+0x66>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a20      	ldr	r2, [pc, #128]	; (800570c <TIM_OC3_SetConfig+0xe4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d10d      	bne.n	80056aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <TIM_OC3_SetConfig+0xe0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC3_SetConfig+0x92>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a15      	ldr	r2, [pc, #84]	; (800570c <TIM_OC3_SetConfig+0xe4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d113      	bne.n	80056e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	621a      	str	r2, [r3, #32]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800575a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	031b      	lsls	r3, r3, #12
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <TIM_OC4_SetConfig+0xa4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_OC4_SetConfig+0x68>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a11      	ldr	r2, [pc, #68]	; (80057b8 <TIM_OC4_SetConfig+0xa8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d109      	bne.n	800578c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800577e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	019b      	lsls	r3, r3, #6
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40010400 	.word	0x40010400

080057bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0201 	bic.w	r2, r3, #1
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a28      	ldr	r2, [pc, #160]	; (8005888 <TIM_TI1_SetConfig+0xcc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01b      	beq.n	8005822 <TIM_TI1_SetConfig+0x66>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f0:	d017      	beq.n	8005822 <TIM_TI1_SetConfig+0x66>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a25      	ldr	r2, [pc, #148]	; (800588c <TIM_TI1_SetConfig+0xd0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <TIM_TI1_SetConfig+0x66>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a24      	ldr	r2, [pc, #144]	; (8005890 <TIM_TI1_SetConfig+0xd4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00f      	beq.n	8005822 <TIM_TI1_SetConfig+0x66>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a23      	ldr	r2, [pc, #140]	; (8005894 <TIM_TI1_SetConfig+0xd8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00b      	beq.n	8005822 <TIM_TI1_SetConfig+0x66>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <TIM_TI1_SetConfig+0xdc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d007      	beq.n	8005822 <TIM_TI1_SetConfig+0x66>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a21      	ldr	r2, [pc, #132]	; (800589c <TIM_TI1_SetConfig+0xe0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_TI1_SetConfig+0x66>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <TIM_TI1_SetConfig+0xe4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <TIM_TI1_SetConfig+0x6a>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <TIM_TI1_SetConfig+0x6c>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e003      	b.n	8005846 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	b2db      	uxtb	r3, r3
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f023 030a 	bic.w	r3, r3, #10
 8005860:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f003 030a 	and.w	r3, r3, #10
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40010000 	.word	0x40010000
 800588c:	40000400 	.word	0x40000400
 8005890:	40000800 	.word	0x40000800
 8005894:	40000c00 	.word	0x40000c00
 8005898:	40010400 	.word	0x40010400
 800589c:	40014000 	.word	0x40014000
 80058a0:	40001800 	.word	0x40001800

080058a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0201 	bic.w	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 030a 	bic.w	r3, r3, #10
 80058e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
 800590e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f023 0210 	bic.w	r2, r3, #16
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	031b      	lsls	r3, r3, #12
 8005946:	b29b      	uxth	r3, r3
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005954:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	621a      	str	r2, [r3, #32]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f023 0210 	bic.w	r2, r3, #16
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	031b      	lsls	r3, r3, #12
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 0303 	bic.w	r3, r3, #3
 8005a08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	621a      	str	r2, [r3, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	031b      	lsls	r3, r3, #12
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	031b      	lsls	r3, r3, #12
 8005aac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f043 0307 	orr.w	r3, r3, #7
 8005af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	609a      	str	r2, [r3, #8]
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	021a      	lsls	r2, r3, #8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	2201      	movs	r2, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1a      	ldr	r2, [r3, #32]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	43db      	mvns	r3, r3
 8005b66:	401a      	ands	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e05a      	b.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a21      	ldr	r2, [pc, #132]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d022      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d01d      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d018      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1a      	ldr	r2, [pc, #104]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00e      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d009      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d004      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d10c      	bne.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40000c00 	.word	0x40000c00
 8005c7c:	40010400 	.word	0x40010400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40001800 	.word	0x40001800

08005c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e03f      	b.n	8005d42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fc fb9e 	bl	8002418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	; 0x24
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fcdb 	bl	80066b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	4613      	mov	r3, r2
 8005d56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d11d      	bne.n	8005da0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_UART_Receive_IT+0x26>
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e016      	b.n	8005da2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Receive_IT+0x38>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e00f      	b.n	8005da2 <HAL_UART_Receive_IT+0x58>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	461a      	mov	r2, r3
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fab6 	bl	8006308 <UART_Start_Receive_IT>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	e000      	b.n	8005da2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b0ba      	sub	sp, #232	; 0xe8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10f      	bne.n	8005e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_UART_IRQHandler+0x66>
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fb95 	bl	800653a <UART_Receive_IT>
      return;
 8005e10:	e256      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80de 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x22c>
 8005e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d106      	bne.n	8005e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80d1 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_UART_IRQHandler+0xae>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_UART_IRQHandler+0xd2>
 8005e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	f043 0202 	orr.w	r2, r3, #2
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_UART_IRQHandler+0xf6>
 8005e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x126>
 8005eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f043 0208 	orr.w	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 81ed 	beq.w	80062b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <HAL_UART_IRQHandler+0x14e>
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fb20 	bl	800653a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	bf0c      	ite	eq
 8005f08:	2301      	moveq	r3, #1
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <HAL_UART_IRQHandler+0x17a>
 8005f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d04f      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa28 	bl	800637c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d141      	bne.n	8005fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3314      	adds	r3, #20
 8005f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3314      	adds	r3, #20
 8005f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1d9      	bne.n	8005f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d013      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	4a7d      	ldr	r2, [pc, #500]	; (8006188 <HAL_UART_IRQHandler+0x3dc>)
 8005f94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fd f9f4 	bl	8003388 <HAL_DMA_Abort_IT>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	e00e      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f990 	bl	80062dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	e00a      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f98c 	bl	80062dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	e006      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f988 	bl	80062dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fd2:	e170      	b.n	80062b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	bf00      	nop
    return;
 8005fd6:	e16e      	b.n	80062b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	f040 814a 	bne.w	8006276 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8143 	beq.w	8006276 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 813c 	beq.w	8006276 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	f040 80b4 	bne.w	800618c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8140 	beq.w	80062ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800603e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006042:	429a      	cmp	r2, r3
 8006044:	f080 8139 	bcs.w	80062ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800604e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605a:	f000 8088 	beq.w	800616e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800608a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800608e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1d9      	bne.n	800605e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3314      	adds	r3, #20
 80060ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e1      	bne.n	80060aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3314      	adds	r3, #20
 8006106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800610a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800610c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006110:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e3      	bne.n	80060e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	f023 0310 	bic.w	r3, r3, #16
 8006142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006150:	65ba      	str	r2, [r7, #88]	; 0x58
 8006152:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800615e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e3      	bne.n	800612c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	4618      	mov	r0, r3
 800616a:	f7fd f89d 	bl	80032a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006176:	b29b      	uxth	r3, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8b6 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006184:	e099      	b.n	80062ba <HAL_UART_IRQHandler+0x50e>
 8006186:	bf00      	nop
 8006188:	08006443 	.word	0x08006443
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006194:	b29b      	uxth	r3, r3
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 808b 	beq.w	80062be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8086 	beq.w	80062be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061d6:	647a      	str	r2, [r7, #68]	; 0x44
 80061d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e3      	bne.n	80061b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3314      	adds	r3, #20
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	623b      	str	r3, [r7, #32]
   return(result);
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800620e:	633a      	str	r2, [r7, #48]	; 0x30
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e3      	bne.n	80061ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006254:	61fa      	str	r2, [r7, #28]
 8006256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	617b      	str	r3, [r7, #20]
   return(result);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f83e 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006274:	e023      	b.n	80062be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_UART_IRQHandler+0x4ea>
 8006282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f8eb 	bl	800646a <UART_Transmit_IT>
    return;
 8006294:	e014      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00e      	beq.n	80062c0 <HAL_UART_IRQHandler+0x514>
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f92b 	bl	800650a <UART_EndTransmit_IT>
    return;
 80062b4:	e004      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
    return;
 80062b6:	bf00      	nop
 80062b8:	e002      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
      return;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
      return;
 80062be:	bf00      	nop
  }
}
 80062c0:	37e8      	adds	r7, #232	; 0xe8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop

080062c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4613      	mov	r3, r2
 8006314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2222      	movs	r2, #34	; 0x22
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800634c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0201 	orr.w	r2, r2, #1
 800635c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0220 	orr.w	r2, r2, #32
 800636c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b095      	sub	sp, #84	; 0x54
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800639a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063a4:	643a      	str	r2, [r7, #64]	; 0x40
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3314      	adds	r3, #20
 80063be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e5      	bne.n	80063b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d119      	bne.n	8006428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	60bb      	str	r3, [r7, #8]
   return(result);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f023 0310 	bic.w	r3, r3, #16
 800640a:	647b      	str	r3, [r7, #68]	; 0x44
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006414:	61ba      	str	r2, [r7, #24]
 8006416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6979      	ldr	r1, [r7, #20]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	613b      	str	r3, [r7, #16]
   return(result);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006436:	bf00      	nop
 8006438:	3754      	adds	r7, #84	; 0x54
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f7ff ff3d 	bl	80062dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b21      	cmp	r3, #33	; 0x21
 800647c:	d13e      	bne.n	80064fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006486:	d114      	bne.n	80064b2 <UART_Transmit_IT+0x48>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d110      	bne.n	80064b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	1c9a      	adds	r2, r3, #2
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	621a      	str	r2, [r3, #32]
 80064b0:	e008      	b.n	80064c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6211      	str	r1, [r2, #32]
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4619      	mov	r1, r3
 80064d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10f      	bne.n	80064f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	e000      	b.n	80064fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064fc:	2302      	movs	r3, #2
  }
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fecc 	bl	80062c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b08c      	sub	sp, #48	; 0x30
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b22      	cmp	r3, #34	; 0x22
 800654c:	f040 80ab 	bne.w	80066a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d117      	bne.n	800658a <UART_Receive_IT+0x50>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d113      	bne.n	800658a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006578:	b29a      	uxth	r2, r3
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	1c9a      	adds	r2, r3, #2
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	629a      	str	r2, [r3, #40]	; 0x28
 8006588:	e026      	b.n	80065d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659c:	d007      	beq.n	80065ae <UART_Receive_IT+0x74>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <UART_Receive_IT+0x82>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e008      	b.n	80065ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4619      	mov	r1, r3
 80065e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d15a      	bne.n	80066a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0220 	bic.w	r2, r2, #32
 80065fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800660a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0201 	bic.w	r2, r2, #1
 800661a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	2b01      	cmp	r3, #1
 800662a:	d135      	bne.n	8006698 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	613b      	str	r3, [r7, #16]
   return(result);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f023 0310 	bic.w	r3, r3, #16
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	623a      	str	r2, [r7, #32]
 8006654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	69f9      	ldr	r1, [r7, #28]
 8006658:	6a3a      	ldr	r2, [r7, #32]
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e5      	bne.n	8006632 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b10      	cmp	r3, #16
 8006672:	d10a      	bne.n	800668a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff fe2d 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
 8006696:	e002      	b.n	800669e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fa ff1f 	bl	80014dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	e002      	b.n	80066a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3730      	adds	r7, #48	; 0x30
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	b09f      	sub	sp, #124	; 0x7c
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c6:	68d9      	ldr	r1, [r3, #12]
 80066c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	ea40 0301 	orr.w	r3, r0, r1
 80066d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	431a      	orrs	r2, r3
 80066dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80066ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066f4:	f021 010c 	bic.w	r1, r1, #12
 80066f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fe:	430b      	orrs	r3, r1
 8006700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800670c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670e:	6999      	ldr	r1, [r3, #24]
 8006710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	ea40 0301 	orr.w	r3, r0, r1
 8006718:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800671a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4bc5      	ldr	r3, [pc, #788]	; (8006a34 <UART_SetConfig+0x384>)
 8006720:	429a      	cmp	r2, r3
 8006722:	d004      	beq.n	800672e <UART_SetConfig+0x7e>
 8006724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4bc3      	ldr	r3, [pc, #780]	; (8006a38 <UART_SetConfig+0x388>)
 800672a:	429a      	cmp	r2, r3
 800672c:	d103      	bne.n	8006736 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800672e:	f7fd fecf 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 8006732:	6778      	str	r0, [r7, #116]	; 0x74
 8006734:	e002      	b.n	800673c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006736:	f7fd feb7 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 800673a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006744:	f040 80b6 	bne.w	80068b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800674a:	461c      	mov	r4, r3
 800674c:	f04f 0500 	mov.w	r5, #0
 8006750:	4622      	mov	r2, r4
 8006752:	462b      	mov	r3, r5
 8006754:	1891      	adds	r1, r2, r2
 8006756:	6439      	str	r1, [r7, #64]	; 0x40
 8006758:	415b      	adcs	r3, r3
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
 800675c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006760:	1912      	adds	r2, r2, r4
 8006762:	eb45 0303 	adc.w	r3, r5, r3
 8006766:	f04f 0000 	mov.w	r0, #0
 800676a:	f04f 0100 	mov.w	r1, #0
 800676e:	00d9      	lsls	r1, r3, #3
 8006770:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006774:	00d0      	lsls	r0, r2, #3
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	1911      	adds	r1, r2, r4
 800677c:	6639      	str	r1, [r7, #96]	; 0x60
 800677e:	416b      	adcs	r3, r5
 8006780:	667b      	str	r3, [r7, #100]	; 0x64
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	461a      	mov	r2, r3
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	1891      	adds	r1, r2, r2
 800678e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006790:	415b      	adcs	r3, r3
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006794:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006798:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800679c:	f7fa f906 	bl	80009ac <__aeabi_uldivmod>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4ba5      	ldr	r3, [pc, #660]	; (8006a3c <UART_SetConfig+0x38c>)
 80067a6:	fba3 2302 	umull	r2, r3, r3, r2
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	011e      	lsls	r6, r3, #4
 80067ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b0:	461c      	mov	r4, r3
 80067b2:	f04f 0500 	mov.w	r5, #0
 80067b6:	4622      	mov	r2, r4
 80067b8:	462b      	mov	r3, r5
 80067ba:	1891      	adds	r1, r2, r2
 80067bc:	6339      	str	r1, [r7, #48]	; 0x30
 80067be:	415b      	adcs	r3, r3
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
 80067c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067c6:	1912      	adds	r2, r2, r4
 80067c8:	eb45 0303 	adc.w	r3, r5, r3
 80067cc:	f04f 0000 	mov.w	r0, #0
 80067d0:	f04f 0100 	mov.w	r1, #0
 80067d4:	00d9      	lsls	r1, r3, #3
 80067d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067da:	00d0      	lsls	r0, r2, #3
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	1911      	adds	r1, r2, r4
 80067e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80067e4:	416b      	adcs	r3, r5
 80067e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	461a      	mov	r2, r3
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	1891      	adds	r1, r2, r2
 80067f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80067f6:	415b      	adcs	r3, r3
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006802:	f7fa f8d3 	bl	80009ac <__aeabi_uldivmod>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4b8c      	ldr	r3, [pc, #560]	; (8006a3c <UART_SetConfig+0x38c>)
 800680c:	fba3 1302 	umull	r1, r3, r3, r2
 8006810:	095b      	lsrs	r3, r3, #5
 8006812:	2164      	movs	r1, #100	; 0x64
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	3332      	adds	r3, #50	; 0x32
 800681e:	4a87      	ldr	r2, [pc, #540]	; (8006a3c <UART_SetConfig+0x38c>)
 8006820:	fba2 2303 	umull	r2, r3, r2, r3
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800682c:	441e      	add	r6, r3
 800682e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006830:	4618      	mov	r0, r3
 8006832:	f04f 0100 	mov.w	r1, #0
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	1894      	adds	r4, r2, r2
 800683c:	623c      	str	r4, [r7, #32]
 800683e:	415b      	adcs	r3, r3
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
 8006842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006846:	1812      	adds	r2, r2, r0
 8006848:	eb41 0303 	adc.w	r3, r1, r3
 800684c:	f04f 0400 	mov.w	r4, #0
 8006850:	f04f 0500 	mov.w	r5, #0
 8006854:	00dd      	lsls	r5, r3, #3
 8006856:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800685a:	00d4      	lsls	r4, r2, #3
 800685c:	4622      	mov	r2, r4
 800685e:	462b      	mov	r3, r5
 8006860:	1814      	adds	r4, r2, r0
 8006862:	653c      	str	r4, [r7, #80]	; 0x50
 8006864:	414b      	adcs	r3, r1
 8006866:	657b      	str	r3, [r7, #84]	; 0x54
 8006868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	461a      	mov	r2, r3
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	1891      	adds	r1, r2, r2
 8006874:	61b9      	str	r1, [r7, #24]
 8006876:	415b      	adcs	r3, r3
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800687e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006882:	f7fa f893 	bl	80009ac <__aeabi_uldivmod>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4b6c      	ldr	r3, [pc, #432]	; (8006a3c <UART_SetConfig+0x38c>)
 800688c:	fba3 1302 	umull	r1, r3, r3, r2
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	2164      	movs	r1, #100	; 0x64
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	3332      	adds	r3, #50	; 0x32
 800689e:	4a67      	ldr	r2, [pc, #412]	; (8006a3c <UART_SetConfig+0x38c>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	f003 0207 	and.w	r2, r3, #7
 80068aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4432      	add	r2, r6
 80068b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068b2:	e0b9      	b.n	8006a28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b6:	461c      	mov	r4, r3
 80068b8:	f04f 0500 	mov.w	r5, #0
 80068bc:	4622      	mov	r2, r4
 80068be:	462b      	mov	r3, r5
 80068c0:	1891      	adds	r1, r2, r2
 80068c2:	6139      	str	r1, [r7, #16]
 80068c4:	415b      	adcs	r3, r3
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068cc:	1912      	adds	r2, r2, r4
 80068ce:	eb45 0303 	adc.w	r3, r5, r3
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f04f 0100 	mov.w	r1, #0
 80068da:	00d9      	lsls	r1, r3, #3
 80068dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068e0:	00d0      	lsls	r0, r2, #3
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	eb12 0804 	adds.w	r8, r2, r4
 80068ea:	eb43 0905 	adc.w	r9, r3, r5
 80068ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f04f 0100 	mov.w	r1, #0
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	008b      	lsls	r3, r1, #2
 8006902:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006906:	0082      	lsls	r2, r0, #2
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7fa f84e 	bl	80009ac <__aeabi_uldivmod>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4b49      	ldr	r3, [pc, #292]	; (8006a3c <UART_SetConfig+0x38c>)
 8006916:	fba3 2302 	umull	r2, r3, r3, r2
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	011e      	lsls	r6, r3, #4
 800691e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006920:	4618      	mov	r0, r3
 8006922:	f04f 0100 	mov.w	r1, #0
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	1894      	adds	r4, r2, r2
 800692c:	60bc      	str	r4, [r7, #8]
 800692e:	415b      	adcs	r3, r3
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006936:	1812      	adds	r2, r2, r0
 8006938:	eb41 0303 	adc.w	r3, r1, r3
 800693c:	f04f 0400 	mov.w	r4, #0
 8006940:	f04f 0500 	mov.w	r5, #0
 8006944:	00dd      	lsls	r5, r3, #3
 8006946:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800694a:	00d4      	lsls	r4, r2, #3
 800694c:	4622      	mov	r2, r4
 800694e:	462b      	mov	r3, r5
 8006950:	1814      	adds	r4, r2, r0
 8006952:	64bc      	str	r4, [r7, #72]	; 0x48
 8006954:	414b      	adcs	r3, r1
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4618      	mov	r0, r3
 800695e:	f04f 0100 	mov.w	r1, #0
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	008b      	lsls	r3, r1, #2
 800696c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006970:	0082      	lsls	r2, r0, #2
 8006972:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006976:	f7fa f819 	bl	80009ac <__aeabi_uldivmod>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4b2f      	ldr	r3, [pc, #188]	; (8006a3c <UART_SetConfig+0x38c>)
 8006980:	fba3 1302 	umull	r1, r3, r3, r2
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	2164      	movs	r1, #100	; 0x64
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	3332      	adds	r3, #50	; 0x32
 8006992:	4a2a      	ldr	r2, [pc, #168]	; (8006a3c <UART_SetConfig+0x38c>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800699e:	441e      	add	r6, r3
 80069a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069a2:	4618      	mov	r0, r3
 80069a4:	f04f 0100 	mov.w	r1, #0
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	1894      	adds	r4, r2, r2
 80069ae:	603c      	str	r4, [r7, #0]
 80069b0:	415b      	adcs	r3, r3
 80069b2:	607b      	str	r3, [r7, #4]
 80069b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b8:	1812      	adds	r2, r2, r0
 80069ba:	eb41 0303 	adc.w	r3, r1, r3
 80069be:	f04f 0400 	mov.w	r4, #0
 80069c2:	f04f 0500 	mov.w	r5, #0
 80069c6:	00dd      	lsls	r5, r3, #3
 80069c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069cc:	00d4      	lsls	r4, r2, #3
 80069ce:	4622      	mov	r2, r4
 80069d0:	462b      	mov	r3, r5
 80069d2:	eb12 0a00 	adds.w	sl, r2, r0
 80069d6:	eb43 0b01 	adc.w	fp, r3, r1
 80069da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	4618      	mov	r0, r3
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	008b      	lsls	r3, r1, #2
 80069ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069f2:	0082      	lsls	r2, r0, #2
 80069f4:	4650      	mov	r0, sl
 80069f6:	4659      	mov	r1, fp
 80069f8:	f7f9 ffd8 	bl	80009ac <__aeabi_uldivmod>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <UART_SetConfig+0x38c>)
 8006a02:	fba3 1302 	umull	r1, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2164      	movs	r1, #100	; 0x64
 8006a0a:	fb01 f303 	mul.w	r3, r1, r3
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	3332      	adds	r3, #50	; 0x32
 8006a14:	4a09      	ldr	r2, [pc, #36]	; (8006a3c <UART_SetConfig+0x38c>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f003 020f 	and.w	r2, r3, #15
 8006a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4432      	add	r2, r6
 8006a26:	609a      	str	r2, [r3, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	377c      	adds	r7, #124	; 0x7c
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a32:	bf00      	nop
 8006a34:	40011000 	.word	0x40011000
 8006a38:	40011400 	.word	0x40011400
 8006a3c:	51eb851f 	.word	0x51eb851f

08006a40 <__NVIC_SetPriority>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	6039      	str	r1, [r7, #0]
 8006a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	db0a      	blt.n	8006a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	490c      	ldr	r1, [pc, #48]	; (8006a8c <__NVIC_SetPriority+0x4c>)
 8006a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5e:	0112      	lsls	r2, r2, #4
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	440b      	add	r3, r1
 8006a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a68:	e00a      	b.n	8006a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4908      	ldr	r1, [pc, #32]	; (8006a90 <__NVIC_SetPriority+0x50>)
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	3b04      	subs	r3, #4
 8006a78:	0112      	lsls	r2, r2, #4
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	761a      	strb	r2, [r3, #24]
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	e000e100 	.word	0xe000e100
 8006a90:	e000ed00 	.word	0xe000ed00

08006a94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <SysTick_Handler+0x1c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a9c:	f001 fcfe 	bl	800849c <xTaskGetSchedulerState>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d001      	beq.n	8006aaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006aa6:	f002 fae7 	bl	8009078 <xPortSysTickHandler>
  }
}
 8006aaa:	bf00      	nop
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	e000e010 	.word	0xe000e010

08006ab4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ab8:	2100      	movs	r1, #0
 8006aba:	f06f 0004 	mvn.w	r0, #4
 8006abe:	f7ff ffbf 	bl	8006a40 <__NVIC_SetPriority>
#endif
}
 8006ac2:	bf00      	nop
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ace:	f3ef 8305 	mrs	r3, IPSR
 8006ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ad4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ada:	f06f 0305 	mvn.w	r3, #5
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	e00c      	b.n	8006afc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <osKernelInitialize+0x44>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d105      	bne.n	8006af6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006aea:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <osKernelInitialize+0x44>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	607b      	str	r3, [r7, #4]
 8006af4:	e002      	b.n	8006afc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006af6:	f04f 33ff 	mov.w	r3, #4294967295
 8006afa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006afc:	687b      	ldr	r3, [r7, #4]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000080 	.word	0x20000080

08006b10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b16:	f3ef 8305 	mrs	r3, IPSR
 8006b1a:	603b      	str	r3, [r7, #0]
  return(result);
 8006b1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b22:	f06f 0305 	mvn.w	r3, #5
 8006b26:	607b      	str	r3, [r7, #4]
 8006b28:	e010      	b.n	8006b4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	; (8006b58 <osKernelStart+0x48>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d109      	bne.n	8006b46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b32:	f7ff ffbf 	bl	8006ab4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b36:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <osKernelStart+0x48>)
 8006b38:	2202      	movs	r2, #2
 8006b3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b3c:	f001 f866 	bl	8007c0c <vTaskStartScheduler>
      stat = osOK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	e002      	b.n	8006b4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b4c:	687b      	ldr	r3, [r7, #4]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000080 	.word	0x20000080

08006b5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08e      	sub	sp, #56	; 0x38
 8006b60:	af04      	add	r7, sp, #16
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b6c:	f3ef 8305 	mrs	r3, IPSR
 8006b70:	617b      	str	r3, [r7, #20]
  return(result);
 8006b72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d17e      	bne.n	8006c76 <osThreadNew+0x11a>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d07b      	beq.n	8006c76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b7e:	2380      	movs	r3, #128	; 0x80
 8006b80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b82:	2318      	movs	r3, #24
 8006b84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d045      	beq.n	8006c22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <osThreadNew+0x48>
        name = attr->name;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <osThreadNew+0x6e>
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	2b38      	cmp	r3, #56	; 0x38
 8006bbc:	d805      	bhi.n	8006bca <osThreadNew+0x6e>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <osThreadNew+0x72>
        return (NULL);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e054      	b.n	8006c78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	089b      	lsrs	r3, r3, #2
 8006bdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00e      	beq.n	8006c04 <osThreadNew+0xa8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b5b      	cmp	r3, #91	; 0x5b
 8006bec:	d90a      	bls.n	8006c04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d006      	beq.n	8006c04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <osThreadNew+0xa8>
        mem = 1;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	e010      	b.n	8006c26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10c      	bne.n	8006c26 <osThreadNew+0xca>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d108      	bne.n	8006c26 <osThreadNew+0xca>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <osThreadNew+0xca>
          mem = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	e001      	b.n	8006c26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d110      	bne.n	8006c4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c34:	9202      	str	r2, [sp, #8]
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	6a3a      	ldr	r2, [r7, #32]
 8006c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fe0c 	bl	8007860 <xTaskCreateStatic>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	e013      	b.n	8006c76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d110      	bne.n	8006c76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	f107 0310 	add.w	r3, r7, #16
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 fe57 	bl	800791a <xTaskCreate>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d001      	beq.n	8006c76 <osThreadNew+0x11a>
            hTask = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c76:	693b      	ldr	r3, [r7, #16]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3728      	adds	r7, #40	; 0x28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c88:	f3ef 8305 	mrs	r3, IPSR
 8006c8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <osDelay+0x1c>
    stat = osErrorISR;
 8006c94:	f06f 0305 	mvn.w	r3, #5
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	e007      	b.n	8006cac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 ff7c 	bl	8007ba4 <vTaskDelay>
    }
  }

  return (stat);
 8006cac:	68fb      	ldr	r3, [r7, #12]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4a07      	ldr	r2, [pc, #28]	; (8006ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4a06      	ldr	r2, [pc, #24]	; (8006ce8 <vApplicationGetIdleTaskMemory+0x30>)
 8006cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2280      	movs	r2, #128	; 0x80
 8006cd4:	601a      	str	r2, [r3, #0]
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000084 	.word	0x20000084
 8006ce8:	200000e0 	.word	0x200000e0

08006cec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4a07      	ldr	r2, [pc, #28]	; (8006d18 <vApplicationGetTimerTaskMemory+0x2c>)
 8006cfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4a06      	ldr	r2, [pc, #24]	; (8006d1c <vApplicationGetTimerTaskMemory+0x30>)
 8006d02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d0a:	601a      	str	r2, [r3, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	200002e0 	.word	0x200002e0
 8006d1c:	2000033c 	.word	0x2000033c

08006d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f103 0208 	add.w	r2, r3, #8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f103 0208 	add.w	r2, r3, #8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f103 0208 	add.w	r2, r3, #8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	601a      	str	r2, [r3, #0]
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d103      	bne.n	8006de2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e00c      	b.n	8006dfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3308      	adds	r3, #8
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e002      	b.n	8006df0 <vListInsert+0x2e>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d2f6      	bcs.n	8006dea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	601a      	str	r2, [r3, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6892      	ldr	r2, [r2, #8]
 8006e4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6852      	ldr	r2, [r2, #4]
 8006e54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d103      	bne.n	8006e68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	1e5a      	subs	r2, r3, #1
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006eb2:	f002 f84f 	bl	8008f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	68f9      	ldr	r1, [r7, #12]
 8006ec0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	441a      	add	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	441a      	add	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	22ff      	movs	r2, #255	; 0xff
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d114      	bne.n	8006f32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01a      	beq.n	8006f46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3310      	adds	r3, #16
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 f903 	bl	8008120 <xTaskRemoveFromEventList>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d012      	beq.n	8006f46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <xQueueGenericReset+0xcc>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	e009      	b.n	8006f46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3310      	adds	r3, #16
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fef2 	bl	8006d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3324      	adds	r3, #36	; 0x24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff feed 	bl	8006d20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f46:	f002 f835 	bl	8008fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f4a:	2301      	movs	r3, #1
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	e000ed04 	.word	0xe000ed04

08006f58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08e      	sub	sp, #56	; 0x38
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <xQueueGenericCreateStatic+0x52>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <xQueueGenericCreateStatic+0x56>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <xQueueGenericCreateStatic+0x58>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	623b      	str	r3, [r7, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <xQueueGenericCreateStatic+0x7e>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <xQueueGenericCreateStatic+0x82>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <xQueueGenericCreateStatic+0x84>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	61fb      	str	r3, [r7, #28]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ff6:	2350      	movs	r3, #80	; 0x50
 8006ff8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b50      	cmp	r3, #80	; 0x50
 8006ffe:	d00a      	beq.n	8007016 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	61bb      	str	r3, [r7, #24]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007016:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800702a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	4613      	mov	r3, r2
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f805 	bl	8007048 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	; 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d103      	bne.n	8007064 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e002      	b.n	800706a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007076:	2101      	movs	r1, #1
 8007078:	69b8      	ldr	r0, [r7, #24]
 800707a:	f7ff ff05 	bl	8006e88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08e      	sub	sp, #56	; 0x38
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800709e:	2300      	movs	r3, #0
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xQueueGenericSend+0x32>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <xQueueGenericSend+0x40>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <xQueueGenericSend+0x44>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <xQueueGenericSend+0x46>
 80070d4:	2300      	movs	r3, #0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <xQueueGenericSend+0x60>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d103      	bne.n	80070fe <xQueueGenericSend+0x6e>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <xQueueGenericSend+0x72>
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <xQueueGenericSend+0x74>
 8007102:	2300      	movs	r3, #0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <xQueueGenericSend+0x8e>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	623b      	str	r3, [r7, #32]
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800711e:	f001 f9bd 	bl	800849c <xTaskGetSchedulerState>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <xQueueGenericSend+0x9e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <xQueueGenericSend+0xa2>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <xQueueGenericSend+0xa4>
 8007132:	2300      	movs	r3, #0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xQueueGenericSend+0xbe>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	61fb      	str	r3, [r7, #28]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800714e:	f001 ff01 	bl	8008f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	429a      	cmp	r2, r3
 800715c:	d302      	bcc.n	8007164 <xQueueGenericSend+0xd4>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d129      	bne.n	80071b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800716a:	f000 fa0b 	bl	8007584 <prvCopyDataToQueue>
 800716e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d010      	beq.n	800719a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	3324      	adds	r3, #36	; 0x24
 800717c:	4618      	mov	r0, r3
 800717e:	f000 ffcf 	bl	8008120 <xTaskRemoveFromEventList>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007188:	4b3f      	ldr	r3, [pc, #252]	; (8007288 <xQueueGenericSend+0x1f8>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	e00a      	b.n	80071b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071a0:	4b39      	ldr	r3, [pc, #228]	; (8007288 <xQueueGenericSend+0x1f8>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071b0:	f001 ff00 	bl	8008fb4 <vPortExitCritical>
				return pdPASS;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e063      	b.n	8007280 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d103      	bne.n	80071c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071be:	f001 fef9 	bl	8008fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e05c      	b.n	8007280 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071cc:	f107 0314 	add.w	r3, r7, #20
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 f809 	bl	80081e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071d6:	2301      	movs	r3, #1
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071da:	f001 feeb 	bl	8008fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071de:	f000 fd7b 	bl	8007cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071e2:	f001 feb7 	bl	8008f54 <vPortEnterCritical>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ec:	b25b      	sxtb	r3, r3
 80071ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f2:	d103      	bne.n	80071fc <xQueueGenericSend+0x16c>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007202:	b25b      	sxtb	r3, r3
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d103      	bne.n	8007212 <xQueueGenericSend+0x182>
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007212:	f001 fecf 	bl	8008fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007216:	1d3a      	adds	r2, r7, #4
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fff8 	bl	8008214 <xTaskCheckForTimeOut>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d124      	bne.n	8007274 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800722a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722c:	f000 faa2 	bl	8007774 <prvIsQueueFull>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d018      	beq.n	8007268 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	3310      	adds	r3, #16
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f000 ff1e 	bl	8008080 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007246:	f000 fa2d 	bl	80076a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800724a:	f000 fd53 	bl	8007cf4 <xTaskResumeAll>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	f47f af7c 	bne.w	800714e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <xQueueGenericSend+0x1f8>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	e772      	b.n	800714e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800726a:	f000 fa1b 	bl	80076a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800726e:	f000 fd41 	bl	8007cf4 <xTaskResumeAll>
 8007272:	e76c      	b.n	800714e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007276:	f000 fa15 	bl	80076a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800727a:	f000 fd3b 	bl	8007cf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800727e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007280:	4618      	mov	r0, r3
 8007282:	3738      	adds	r7, #56	; 0x38
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b090      	sub	sp, #64	; 0x40
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d103      	bne.n	80072c8 <xQueueGenericSendFromISR+0x3c>
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <xQueueGenericSendFromISR+0x40>
 80072c8:	2301      	movs	r3, #1
 80072ca:	e000      	b.n	80072ce <xQueueGenericSendFromISR+0x42>
 80072cc:	2300      	movs	r3, #0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d103      	bne.n	80072f6 <xQueueGenericSendFromISR+0x6a>
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <xQueueGenericSendFromISR+0x6e>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <xQueueGenericSendFromISR+0x70>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	623b      	str	r3, [r7, #32]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007316:	f001 feff 	bl	8009118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800731a:	f3ef 8211 	mrs	r2, BASEPRI
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	61fa      	str	r2, [r7, #28]
 8007330:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007332:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007334:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	429a      	cmp	r2, r3
 8007340:	d302      	bcc.n	8007348 <xQueueGenericSendFromISR+0xbc>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d12f      	bne.n	80073a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800734e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800735e:	f000 f911 	bl	8007584 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007362:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736a:	d112      	bne.n	8007392 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d016      	beq.n	80073a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	3324      	adds	r3, #36	; 0x24
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fed1 	bl	8008120 <xTaskRemoveFromEventList>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00e      	beq.n	80073a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e007      	b.n	80073a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007392:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007396:	3301      	adds	r3, #1
 8007398:	b2db      	uxtb	r3, r3
 800739a:	b25a      	sxtb	r2, r3
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073a2:	2301      	movs	r3, #1
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80073a6:	e001      	b.n	80073ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3740      	adds	r7, #64	; 0x40
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08c      	sub	sp, #48	; 0x30
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <xQueueReceive+0x30>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	623b      	str	r3, [r7, #32]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <xQueueReceive+0x3e>
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <xQueueReceive+0x42>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <xQueueReceive+0x44>
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <xQueueReceive+0x5e>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	61fb      	str	r3, [r7, #28]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007422:	f001 f83b 	bl	800849c <xTaskGetSchedulerState>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d102      	bne.n	8007432 <xQueueReceive+0x6e>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <xQueueReceive+0x72>
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <xQueueReceive+0x74>
 8007436:	2300      	movs	r3, #0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <xQueueReceive+0x8e>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	61bb      	str	r3, [r7, #24]
}
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007452:	f001 fd7f 	bl	8008f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	d01f      	beq.n	80074a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007466:	f000 f8f7 	bl	8007658 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	1e5a      	subs	r2, r3, #1
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00f      	beq.n	800749a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	3310      	adds	r3, #16
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fe4e 	bl	8008120 <xTaskRemoveFromEventList>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800748a:	4b3d      	ldr	r3, [pc, #244]	; (8007580 <xQueueReceive+0x1bc>)
 800748c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800749a:	f001 fd8b 	bl	8008fb4 <vPortExitCritical>
				return pdPASS;
 800749e:	2301      	movs	r3, #1
 80074a0:	e069      	b.n	8007576 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074a8:	f001 fd84 	bl	8008fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e062      	b.n	8007576 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d106      	bne.n	80074c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074b6:	f107 0310 	add.w	r3, r7, #16
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fe94 	bl	80081e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074c4:	f001 fd76 	bl	8008fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074c8:	f000 fc06 	bl	8007cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074cc:	f001 fd42 	bl	8008f54 <vPortEnterCritical>
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074d6:	b25b      	sxtb	r3, r3
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074dc:	d103      	bne.n	80074e6 <xQueueReceive+0x122>
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ec:	b25b      	sxtb	r3, r3
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d103      	bne.n	80074fc <xQueueReceive+0x138>
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074fc:	f001 fd5a 	bl	8008fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007500:	1d3a      	adds	r2, r7, #4
 8007502:	f107 0310 	add.w	r3, r7, #16
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fe83 	bl	8008214 <xTaskCheckForTimeOut>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d123      	bne.n	800755c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007516:	f000 f917 	bl	8007748 <prvIsQueueEmpty>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fda9 	bl	8008080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800752e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007530:	f000 f8b8 	bl	80076a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007534:	f000 fbde 	bl	8007cf4 <xTaskResumeAll>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d189      	bne.n	8007452 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800753e:	4b10      	ldr	r3, [pc, #64]	; (8007580 <xQueueReceive+0x1bc>)
 8007540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	e780      	b.n	8007452 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007552:	f000 f8a7 	bl	80076a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007556:	f000 fbcd 	bl	8007cf4 <xTaskResumeAll>
 800755a:	e77a      	b.n	8007452 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800755c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755e:	f000 f8a1 	bl	80076a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007562:	f000 fbc7 	bl	8007cf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007568:	f000 f8ee 	bl	8007748 <prvIsQueueEmpty>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	f43f af6f 	beq.w	8007452 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007574:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007576:	4618      	mov	r0, r3
 8007578:	3730      	adds	r7, #48	; 0x30
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10d      	bne.n	80075be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d14d      	bne.n	8007646 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 ff92 	bl	80084d8 <xTaskPriorityDisinherit>
 80075b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	609a      	str	r2, [r3, #8]
 80075bc:	e043      	b.n	8007646 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d119      	bne.n	80075f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6858      	ldr	r0, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	461a      	mov	r2, r3
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	f001 fff0 	bl	80095b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	441a      	add	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d32b      	bcc.n	8007646 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	605a      	str	r2, [r3, #4]
 80075f6:	e026      	b.n	8007646 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68d8      	ldr	r0, [r3, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	461a      	mov	r2, r3
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	f001 ffd6 	bl	80095b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	425b      	negs	r3, r3
 8007612:	441a      	add	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d207      	bcs.n	8007634 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	425b      	negs	r3, r3
 800762e:	441a      	add	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d105      	bne.n	8007646 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	3b01      	subs	r3, #1
 8007644:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800764e:	697b      	ldr	r3, [r7, #20]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	441a      	add	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	429a      	cmp	r2, r3
 8007682:	d303      	bcc.n	800768c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68d9      	ldr	r1, [r3, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	461a      	mov	r2, r3
 8007696:	6838      	ldr	r0, [r7, #0]
 8007698:	f001 ff8c 	bl	80095b4 <memcpy>
	}
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076ac:	f001 fc52 	bl	8008f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076b8:	e011      	b.n	80076de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d012      	beq.n	80076e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3324      	adds	r3, #36	; 0x24
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fd2a 	bl	8008120 <xTaskRemoveFromEventList>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076d2:	f000 fe01 	bl	80082d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	3b01      	subs	r3, #1
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dce9      	bgt.n	80076ba <prvUnlockQueue+0x16>
 80076e6:	e000      	b.n	80076ea <prvUnlockQueue+0x46>
					break;
 80076e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	22ff      	movs	r2, #255	; 0xff
 80076ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076f2:	f001 fc5f 	bl	8008fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076f6:	f001 fc2d 	bl	8008f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007700:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007702:	e011      	b.n	8007728 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d012      	beq.n	8007732 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3310      	adds	r3, #16
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fd05 	bl	8008120 <xTaskRemoveFromEventList>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800771c:	f000 fddc 	bl	80082d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	3b01      	subs	r3, #1
 8007724:	b2db      	uxtb	r3, r3
 8007726:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800772c:	2b00      	cmp	r3, #0
 800772e:	dce9      	bgt.n	8007704 <prvUnlockQueue+0x60>
 8007730:	e000      	b.n	8007734 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007732:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	22ff      	movs	r2, #255	; 0xff
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800773c:	f001 fc3a 	bl	8008fb4 <vPortExitCritical>
}
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007750:	f001 fc00 	bl	8008f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800775c:	2301      	movs	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	e001      	b.n	8007766 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007766:	f001 fc25 	bl	8008fb4 <vPortExitCritical>

	return xReturn;
 800776a:	68fb      	ldr	r3, [r7, #12]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800777c:	f001 fbea 	bl	8008f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	429a      	cmp	r2, r3
 800778a:	d102      	bne.n	8007792 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800778c:	2301      	movs	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e001      	b.n	8007796 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007796:	f001 fc0d 	bl	8008fb4 <vPortExitCritical>

	return xReturn;
 800779a:	68fb      	ldr	r3, [r7, #12]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ae:	2300      	movs	r3, #0
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	e014      	b.n	80077de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077b4:	4a0f      	ldr	r2, [pc, #60]	; (80077f4 <vQueueAddToRegistry+0x50>)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10b      	bne.n	80077d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077c0:	490c      	ldr	r1, [pc, #48]	; (80077f4 <vQueueAddToRegistry+0x50>)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077ca:	4a0a      	ldr	r2, [pc, #40]	; (80077f4 <vQueueAddToRegistry+0x50>)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4413      	add	r3, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077d6:	e006      	b.n	80077e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3301      	adds	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b07      	cmp	r3, #7
 80077e2:	d9e7      	bls.n	80077b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20004cec 	.word	0x20004cec

080077f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007808:	f001 fba4 	bl	8008f54 <vPortEnterCritical>
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007812:	b25b      	sxtb	r3, r3
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d103      	bne.n	8007822 <vQueueWaitForMessageRestricted+0x2a>
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007828:	b25b      	sxtb	r3, r3
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d103      	bne.n	8007838 <vQueueWaitForMessageRestricted+0x40>
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007838:	f001 fbbc 	bl	8008fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3324      	adds	r3, #36	; 0x24
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fc3b 	bl	80080c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007852:	6978      	ldr	r0, [r7, #20]
 8007854:	f7ff ff26 	bl	80076a4 <prvUnlockQueue>
	}
 8007858:	bf00      	nop
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08e      	sub	sp, #56	; 0x38
 8007864:	af04      	add	r7, sp, #16
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800786e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	623b      	str	r3, [r7, #32]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	61fb      	str	r3, [r7, #28]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078a6:	235c      	movs	r3, #92	; 0x5c
 80078a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b5c      	cmp	r3, #92	; 0x5c
 80078ae:	d00a      	beq.n	80078c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	61bb      	str	r3, [r7, #24]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01e      	beq.n	800790c <xTaskCreateStatic+0xac>
 80078ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01b      	beq.n	800790c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078e6:	2300      	movs	r3, #0
 80078e8:	9303      	str	r3, [sp, #12]
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	f107 0314 	add.w	r3, r7, #20
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f850 	bl	80079a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007906:	f000 f8dd 	bl	8007ac4 <prvAddNewTaskToReadyList>
 800790a:	e001      	b.n	8007910 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007910:	697b      	ldr	r3, [r7, #20]
	}
 8007912:	4618      	mov	r0, r3
 8007914:	3728      	adds	r7, #40	; 0x28
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800791a:	b580      	push	{r7, lr}
 800791c:	b08c      	sub	sp, #48	; 0x30
 800791e:	af04      	add	r7, sp, #16
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800792a:	88fb      	ldrh	r3, [r7, #6]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4618      	mov	r0, r3
 8007930:	f001 fc32 	bl	8009198 <pvPortMalloc>
 8007934:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00e      	beq.n	800795a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800793c:	205c      	movs	r0, #92	; 0x5c
 800793e:	f001 fc2b 	bl	8009198 <pvPortMalloc>
 8007942:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	631a      	str	r2, [r3, #48]	; 0x30
 8007950:	e005      	b.n	800795e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007952:	6978      	ldr	r0, [r7, #20]
 8007954:	f001 fcec 	bl	8009330 <vPortFree>
 8007958:	e001      	b.n	800795e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d017      	beq.n	8007994 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	2300      	movs	r3, #0
 8007970:	9303      	str	r3, [sp, #12]
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	9302      	str	r3, [sp, #8]
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f80e 	bl	80079a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007988:	69f8      	ldr	r0, [r7, #28]
 800798a:	f000 f89b 	bl	8007ac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800798e:	2301      	movs	r3, #1
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	e002      	b.n	800799a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007994:	f04f 33ff 	mov.w	r3, #4294967295
 8007998:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800799a:	69bb      	ldr	r3, [r7, #24]
	}
 800799c:	4618      	mov	r0, r3
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	461a      	mov	r2, r3
 80079bc:	21a5      	movs	r1, #165	; 0xa5
 80079be:	f001 fe07 	bl	80095d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079cc:	3b01      	subs	r3, #1
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f023 0307 	bic.w	r3, r3, #7
 80079da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	f003 0307 	and.w	r3, r3, #7
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	617b      	str	r3, [r7, #20]
}
 80079f8:	bf00      	nop
 80079fa:	e7fe      	b.n	80079fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d01f      	beq.n	8007a42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a02:	2300      	movs	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
 8007a06:	e012      	b.n	8007a2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	7819      	ldrb	r1, [r3, #0]
 8007a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	4413      	add	r3, r2
 8007a16:	3334      	adds	r3, #52	; 0x34
 8007a18:	460a      	mov	r2, r1
 8007a1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d006      	beq.n	8007a36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	2b0f      	cmp	r3, #15
 8007a32:	d9e9      	bls.n	8007a08 <prvInitialiseNewTask+0x64>
 8007a34:	e000      	b.n	8007a38 <prvInitialiseNewTask+0x94>
			{
				break;
 8007a36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a40:	e003      	b.n	8007a4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	2b37      	cmp	r3, #55	; 0x37
 8007a4e:	d901      	bls.n	8007a54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a50:	2337      	movs	r3, #55	; 0x37
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	2200      	movs	r2, #0
 8007a64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff f978 	bl	8006d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	3318      	adds	r3, #24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff f973 	bl	8006d60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	2200      	movs	r2, #0
 8007a94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	68f9      	ldr	r1, [r7, #12]
 8007aa2:	69b8      	ldr	r0, [r7, #24]
 8007aa4:	f001 f928 	bl	8008cf8 <pxPortInitialiseStack>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aba:	bf00      	nop
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007acc:	f001 fa42 	bl	8008f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ad0:	4b2d      	ldr	r3, [pc, #180]	; (8007b88 <prvAddNewTaskToReadyList+0xc4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	4a2c      	ldr	r2, [pc, #176]	; (8007b88 <prvAddNewTaskToReadyList+0xc4>)
 8007ad8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ada:	4b2c      	ldr	r3, [pc, #176]	; (8007b8c <prvAddNewTaskToReadyList+0xc8>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d109      	bne.n	8007af6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ae2:	4a2a      	ldr	r2, [pc, #168]	; (8007b8c <prvAddNewTaskToReadyList+0xc8>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ae8:	4b27      	ldr	r3, [pc, #156]	; (8007b88 <prvAddNewTaskToReadyList+0xc4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d110      	bne.n	8007b12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007af0:	f000 fc16 	bl	8008320 <prvInitialiseTaskLists>
 8007af4:	e00d      	b.n	8007b12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007af6:	4b26      	ldr	r3, [pc, #152]	; (8007b90 <prvAddNewTaskToReadyList+0xcc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007afe:	4b23      	ldr	r3, [pc, #140]	; (8007b8c <prvAddNewTaskToReadyList+0xc8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d802      	bhi.n	8007b12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b0c:	4a1f      	ldr	r2, [pc, #124]	; (8007b8c <prvAddNewTaskToReadyList+0xc8>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b12:	4b20      	ldr	r3, [pc, #128]	; (8007b94 <prvAddNewTaskToReadyList+0xd0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3301      	adds	r3, #1
 8007b18:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <prvAddNewTaskToReadyList+0xd0>)
 8007b1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b1c:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <prvAddNewTaskToReadyList+0xd0>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <prvAddNewTaskToReadyList+0xd4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d903      	bls.n	8007b38 <prvAddNewTaskToReadyList+0x74>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <prvAddNewTaskToReadyList+0xd4>)
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <prvAddNewTaskToReadyList+0xd8>)
 8007b46:	441a      	add	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	f7ff f913 	bl	8006d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b54:	f001 fa2e 	bl	8008fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b58:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <prvAddNewTaskToReadyList+0xcc>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00e      	beq.n	8007b7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <prvAddNewTaskToReadyList+0xc8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d207      	bcs.n	8007b7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <prvAddNewTaskToReadyList+0xdc>)
 8007b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000c10 	.word	0x20000c10
 8007b8c:	2000073c 	.word	0x2000073c
 8007b90:	20000c1c 	.word	0x20000c1c
 8007b94:	20000c2c 	.word	0x20000c2c
 8007b98:	20000c18 	.word	0x20000c18
 8007b9c:	20000740 	.word	0x20000740
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d017      	beq.n	8007be6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bb6:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <vTaskDelay+0x60>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <vTaskDelay+0x30>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	60bb      	str	r3, [r7, #8]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bd4:	f000 f880 	bl	8007cd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bd8:	2100      	movs	r1, #0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fcea 	bl	80085b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007be0:	f000 f888 	bl	8007cf4 <xTaskResumeAll>
 8007be4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d107      	bne.n	8007bfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <vTaskDelay+0x64>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20000c38 	.word	0x20000c38
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	; 0x28
 8007c10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c1a:	463a      	mov	r2, r7
 8007c1c:	1d39      	adds	r1, r7, #4
 8007c1e:	f107 0308 	add.w	r3, r7, #8
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff f848 	bl	8006cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	9202      	str	r2, [sp, #8]
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	460a      	mov	r2, r1
 8007c3a:	4921      	ldr	r1, [pc, #132]	; (8007cc0 <vTaskStartScheduler+0xb4>)
 8007c3c:	4821      	ldr	r0, [pc, #132]	; (8007cc4 <vTaskStartScheduler+0xb8>)
 8007c3e:	f7ff fe0f 	bl	8007860 <xTaskCreateStatic>
 8007c42:	4603      	mov	r3, r0
 8007c44:	4a20      	ldr	r2, [pc, #128]	; (8007cc8 <vTaskStartScheduler+0xbc>)
 8007c46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c48:	4b1f      	ldr	r3, [pc, #124]	; (8007cc8 <vTaskStartScheduler+0xbc>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c50:	2301      	movs	r3, #1
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	e001      	b.n	8007c5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d102      	bne.n	8007c66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c60:	f000 fcfc 	bl	800865c <xTimerCreateTimerTask>
 8007c64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d116      	bne.n	8007c9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	613b      	str	r3, [r7, #16]
}
 8007c7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c80:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <vTaskStartScheduler+0xc0>)
 8007c82:	f04f 32ff 	mov.w	r2, #4294967295
 8007c86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c88:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <vTaskStartScheduler+0xc4>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c8e:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <vTaskStartScheduler+0xc8>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c94:	f001 f8bc 	bl	8008e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c98:	e00e      	b.n	8007cb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca0:	d10a      	bne.n	8007cb8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	60fb      	str	r3, [r7, #12]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <vTaskStartScheduler+0xaa>
}
 8007cb8:	bf00      	nop
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	08009624 	.word	0x08009624
 8007cc4:	080082f1 	.word	0x080082f1
 8007cc8:	20000c34 	.word	0x20000c34
 8007ccc:	20000c30 	.word	0x20000c30
 8007cd0:	20000c1c 	.word	0x20000c1c
 8007cd4:	20000c14 	.word	0x20000c14

08007cd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <vTaskSuspendAll+0x18>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	4a03      	ldr	r2, [pc, #12]	; (8007cf0 <vTaskSuspendAll+0x18>)
 8007ce4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ce6:	bf00      	nop
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20000c38 	.word	0x20000c38

08007cf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d02:	4b42      	ldr	r3, [pc, #264]	; (8007e0c <xTaskResumeAll+0x118>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	603b      	str	r3, [r7, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	e7fe      	b.n	8007d1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d20:	f001 f918 	bl	8008f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d24:	4b39      	ldr	r3, [pc, #228]	; (8007e0c <xTaskResumeAll+0x118>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	4a38      	ldr	r2, [pc, #224]	; (8007e0c <xTaskResumeAll+0x118>)
 8007d2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d2e:	4b37      	ldr	r3, [pc, #220]	; (8007e0c <xTaskResumeAll+0x118>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d162      	bne.n	8007dfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d36:	4b36      	ldr	r3, [pc, #216]	; (8007e10 <xTaskResumeAll+0x11c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d05e      	beq.n	8007dfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d3e:	e02f      	b.n	8007da0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d40:	4b34      	ldr	r3, [pc, #208]	; (8007e14 <xTaskResumeAll+0x120>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3318      	adds	r3, #24
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff f871 	bl	8006e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff f86c 	bl	8006e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	4b2d      	ldr	r3, [pc, #180]	; (8007e18 <xTaskResumeAll+0x124>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d903      	bls.n	8007d70 <xTaskResumeAll+0x7c>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4a2a      	ldr	r2, [pc, #168]	; (8007e18 <xTaskResumeAll+0x124>)
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4a27      	ldr	r2, [pc, #156]	; (8007e1c <xTaskResumeAll+0x128>)
 8007d7e:	441a      	add	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7fe fff7 	bl	8006d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d90:	4b23      	ldr	r3, [pc, #140]	; (8007e20 <xTaskResumeAll+0x12c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d302      	bcc.n	8007da0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d9a:	4b22      	ldr	r3, [pc, #136]	; (8007e24 <xTaskResumeAll+0x130>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007da0:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <xTaskResumeAll+0x120>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1cb      	bne.n	8007d40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dae:	f000 fb55 	bl	800845c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007db2:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <xTaskResumeAll+0x134>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d010      	beq.n	8007de0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007dbe:	f000 f847 	bl	8007e50 <xTaskIncrementTick>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007dc8:	4b16      	ldr	r3, [pc, #88]	; (8007e24 <xTaskResumeAll+0x130>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f1      	bne.n	8007dbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007dda:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <xTaskResumeAll+0x134>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007de0:	4b10      	ldr	r3, [pc, #64]	; (8007e24 <xTaskResumeAll+0x130>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d009      	beq.n	8007dfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007de8:	2301      	movs	r3, #1
 8007dea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <xTaskResumeAll+0x138>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dfc:	f001 f8da 	bl	8008fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8007e00:	68bb      	ldr	r3, [r7, #8]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000c38 	.word	0x20000c38
 8007e10:	20000c10 	.word	0x20000c10
 8007e14:	20000bd0 	.word	0x20000bd0
 8007e18:	20000c18 	.word	0x20000c18
 8007e1c:	20000740 	.word	0x20000740
 8007e20:	2000073c 	.word	0x2000073c
 8007e24:	20000c24 	.word	0x20000c24
 8007e28:	20000c20 	.word	0x20000c20
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <xTaskGetTickCount+0x1c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e3c:	687b      	ldr	r3, [r7, #4]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000c14 	.word	0x20000c14

08007e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e5a:	4b4f      	ldr	r3, [pc, #316]	; (8007f98 <xTaskIncrementTick+0x148>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f040 808f 	bne.w	8007f82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e64:	4b4d      	ldr	r3, [pc, #308]	; (8007f9c <xTaskIncrementTick+0x14c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e6c:	4a4b      	ldr	r2, [pc, #300]	; (8007f9c <xTaskIncrementTick+0x14c>)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d120      	bne.n	8007eba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e78:	4b49      	ldr	r3, [pc, #292]	; (8007fa0 <xTaskIncrementTick+0x150>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	603b      	str	r3, [r7, #0]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <xTaskIncrementTick+0x46>
 8007e98:	4b41      	ldr	r3, [pc, #260]	; (8007fa0 <xTaskIncrementTick+0x150>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	4b41      	ldr	r3, [pc, #260]	; (8007fa4 <xTaskIncrementTick+0x154>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a3f      	ldr	r2, [pc, #252]	; (8007fa0 <xTaskIncrementTick+0x150>)
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	4a3f      	ldr	r2, [pc, #252]	; (8007fa4 <xTaskIncrementTick+0x154>)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	4b3e      	ldr	r3, [pc, #248]	; (8007fa8 <xTaskIncrementTick+0x158>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	4a3d      	ldr	r2, [pc, #244]	; (8007fa8 <xTaskIncrementTick+0x158>)
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	f000 fad1 	bl	800845c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007eba:	4b3c      	ldr	r3, [pc, #240]	; (8007fac <xTaskIncrementTick+0x15c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d349      	bcc.n	8007f58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec4:	4b36      	ldr	r3, [pc, #216]	; (8007fa0 <xTaskIncrementTick+0x150>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ece:	4b37      	ldr	r3, [pc, #220]	; (8007fac <xTaskIncrementTick+0x15c>)
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed4:	601a      	str	r2, [r3, #0]
					break;
 8007ed6:	e03f      	b.n	8007f58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed8:	4b31      	ldr	r3, [pc, #196]	; (8007fa0 <xTaskIncrementTick+0x150>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d203      	bcs.n	8007ef8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ef0:	4a2e      	ldr	r2, [pc, #184]	; (8007fac <xTaskIncrementTick+0x15c>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ef6:	e02f      	b.n	8007f58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	3304      	adds	r3, #4
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe ff99 	bl	8006e34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d004      	beq.n	8007f14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	3318      	adds	r3, #24
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe ff90 	bl	8006e34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f18:	4b25      	ldr	r3, [pc, #148]	; (8007fb0 <xTaskIncrementTick+0x160>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d903      	bls.n	8007f28 <xTaskIncrementTick+0xd8>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	4a22      	ldr	r2, [pc, #136]	; (8007fb0 <xTaskIncrementTick+0x160>)
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4a1f      	ldr	r2, [pc, #124]	; (8007fb4 <xTaskIncrementTick+0x164>)
 8007f36:	441a      	add	r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f7fe ff1b 	bl	8006d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f48:	4b1b      	ldr	r3, [pc, #108]	; (8007fb8 <xTaskIncrementTick+0x168>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d3b8      	bcc.n	8007ec4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f52:	2301      	movs	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f56:	e7b5      	b.n	8007ec4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f58:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <xTaskIncrementTick+0x168>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5e:	4915      	ldr	r1, [pc, #84]	; (8007fb4 <xTaskIncrementTick+0x164>)
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d901      	bls.n	8007f74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007f70:	2301      	movs	r3, #1
 8007f72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f74:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <xTaskIncrementTick+0x16c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d007      	beq.n	8007f8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	e004      	b.n	8007f8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f82:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <xTaskIncrementTick+0x170>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3301      	adds	r3, #1
 8007f88:	4a0d      	ldr	r2, [pc, #52]	; (8007fc0 <xTaskIncrementTick+0x170>)
 8007f8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f8c:	697b      	ldr	r3, [r7, #20]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000c38 	.word	0x20000c38
 8007f9c:	20000c14 	.word	0x20000c14
 8007fa0:	20000bc8 	.word	0x20000bc8
 8007fa4:	20000bcc 	.word	0x20000bcc
 8007fa8:	20000c28 	.word	0x20000c28
 8007fac:	20000c30 	.word	0x20000c30
 8007fb0:	20000c18 	.word	0x20000c18
 8007fb4:	20000740 	.word	0x20000740
 8007fb8:	2000073c 	.word	0x2000073c
 8007fbc:	20000c24 	.word	0x20000c24
 8007fc0:	20000c20 	.word	0x20000c20

08007fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fca:	4b28      	ldr	r3, [pc, #160]	; (800806c <vTaskSwitchContext+0xa8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fd2:	4b27      	ldr	r3, [pc, #156]	; (8008070 <vTaskSwitchContext+0xac>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fd8:	e041      	b.n	800805e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007fda:	4b25      	ldr	r3, [pc, #148]	; (8008070 <vTaskSwitchContext+0xac>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe0:	4b24      	ldr	r3, [pc, #144]	; (8008074 <vTaskSwitchContext+0xb0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	e010      	b.n	800800a <vTaskSwitchContext+0x46>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <vTaskSwitchContext+0x40>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	607b      	str	r3, [r7, #4]
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <vTaskSwitchContext+0x3e>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3b01      	subs	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	491b      	ldr	r1, [pc, #108]	; (8008078 <vTaskSwitchContext+0xb4>)
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	440b      	add	r3, r1
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0e4      	beq.n	8007fe8 <vTaskSwitchContext+0x24>
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4a13      	ldr	r2, [pc, #76]	; (8008078 <vTaskSwitchContext+0xb4>)
 800802a:	4413      	add	r3, r2
 800802c:	60bb      	str	r3, [r7, #8]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	605a      	str	r2, [r3, #4]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	3308      	adds	r3, #8
 8008040:	429a      	cmp	r2, r3
 8008042:	d104      	bne.n	800804e <vTaskSwitchContext+0x8a>
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	605a      	str	r2, [r3, #4]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	4a09      	ldr	r2, [pc, #36]	; (800807c <vTaskSwitchContext+0xb8>)
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	4a06      	ldr	r2, [pc, #24]	; (8008074 <vTaskSwitchContext+0xb0>)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6013      	str	r3, [r2, #0]
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000c38 	.word	0x20000c38
 8008070:	20000c24 	.word	0x20000c24
 8008074:	20000c18 	.word	0x20000c18
 8008078:	20000740 	.word	0x20000740
 800807c:	2000073c 	.word	0x2000073c

08008080 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	60fb      	str	r3, [r7, #12]
}
 80080a2:	bf00      	nop
 80080a4:	e7fe      	b.n	80080a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080a6:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <vTaskPlaceOnEventList+0x44>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3318      	adds	r3, #24
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe fe87 	bl	8006dc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080b4:	2101      	movs	r1, #1
 80080b6:	6838      	ldr	r0, [r7, #0]
 80080b8:	f000 fa7c 	bl	80085b4 <prvAddCurrentTaskToDelayedList>
}
 80080bc:	bf00      	nop
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	2000073c 	.word	0x2000073c

080080c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	617b      	str	r3, [r7, #20]
}
 80080ec:	bf00      	nop
 80080ee:	e7fe      	b.n	80080ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <vTaskPlaceOnEventListRestricted+0x54>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3318      	adds	r3, #24
 80080f6:	4619      	mov	r1, r3
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7fe fe3e 	bl	8006d7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008104:	f04f 33ff 	mov.w	r3, #4294967295
 8008108:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	68b8      	ldr	r0, [r7, #8]
 800810e:	f000 fa51 	bl	80085b4 <prvAddCurrentTaskToDelayedList>
	}
 8008112:	bf00      	nop
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	2000073c 	.word	0x2000073c

08008120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60fb      	str	r3, [r7, #12]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	3318      	adds	r3, #24
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe fe6f 	bl	8006e34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008156:	4b1e      	ldr	r3, [pc, #120]	; (80081d0 <xTaskRemoveFromEventList+0xb0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d11d      	bne.n	800819a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3304      	adds	r3, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fe66 	bl	8006e34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <xTaskRemoveFromEventList+0xb4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d903      	bls.n	800817c <xTaskRemoveFromEventList+0x5c>
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	4a16      	ldr	r2, [pc, #88]	; (80081d4 <xTaskRemoveFromEventList+0xb4>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <xTaskRemoveFromEventList+0xb8>)
 800818a:	441a      	add	r2, r3
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f7fe fdf1 	bl	8006d7a <vListInsertEnd>
 8008198:	e005      	b.n	80081a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	3318      	adds	r3, #24
 800819e:	4619      	mov	r1, r3
 80081a0:	480e      	ldr	r0, [pc, #56]	; (80081dc <xTaskRemoveFromEventList+0xbc>)
 80081a2:	f7fe fdea 	bl	8006d7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081aa:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <xTaskRemoveFromEventList+0xc0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d905      	bls.n	80081c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081b4:	2301      	movs	r3, #1
 80081b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <xTaskRemoveFromEventList+0xc4>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	e001      	b.n	80081c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081c4:	697b      	ldr	r3, [r7, #20]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000c38 	.word	0x20000c38
 80081d4:	20000c18 	.word	0x20000c18
 80081d8:	20000740 	.word	0x20000740
 80081dc:	20000bd0 	.word	0x20000bd0
 80081e0:	2000073c 	.word	0x2000073c
 80081e4:	20000c24 	.word	0x20000c24

080081e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081f0:	4b06      	ldr	r3, [pc, #24]	; (800820c <vTaskInternalSetTimeOutState+0x24>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <vTaskInternalSetTimeOutState+0x28>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	605a      	str	r2, [r3, #4]
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	20000c28 	.word	0x20000c28
 8008210:	20000c14 	.word	0x20000c14

08008214 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	613b      	str	r3, [r7, #16]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008256:	f000 fe7d 	bl	8008f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800825a:	4b1d      	ldr	r3, [pc, #116]	; (80082d0 <xTaskCheckForTimeOut+0xbc>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008272:	d102      	bne.n	800827a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
 8008278:	e023      	b.n	80082c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b15      	ldr	r3, [pc, #84]	; (80082d4 <xTaskCheckForTimeOut+0xc0>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d007      	beq.n	8008296 <xTaskCheckForTimeOut+0x82>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	429a      	cmp	r2, r3
 800828e:	d302      	bcc.n	8008296 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008290:	2301      	movs	r3, #1
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	e015      	b.n	80082c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	429a      	cmp	r2, r3
 800829e:	d20b      	bcs.n	80082b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	1ad2      	subs	r2, r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ff9b 	bl	80081e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	e004      	b.n	80082c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082be:	2301      	movs	r3, #1
 80082c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082c2:	f000 fe77 	bl	8008fb4 <vPortExitCritical>

	return xReturn;
 80082c6:	69fb      	ldr	r3, [r7, #28]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3720      	adds	r7, #32
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20000c14 	.word	0x20000c14
 80082d4:	20000c28 	.word	0x20000c28

080082d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082dc:	4b03      	ldr	r3, [pc, #12]	; (80082ec <vTaskMissedYield+0x14>)
 80082de:	2201      	movs	r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
}
 80082e2:	bf00      	nop
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	20000c24 	.word	0x20000c24

080082f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082f8:	f000 f852 	bl	80083a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <prvIdleTask+0x28>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d9f9      	bls.n	80082f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008304:	4b05      	ldr	r3, [pc, #20]	; (800831c <prvIdleTask+0x2c>)
 8008306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008314:	e7f0      	b.n	80082f8 <prvIdleTask+0x8>
 8008316:	bf00      	nop
 8008318:	20000740 	.word	0x20000740
 800831c:	e000ed04 	.word	0xe000ed04

08008320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008326:	2300      	movs	r3, #0
 8008328:	607b      	str	r3, [r7, #4]
 800832a:	e00c      	b.n	8008346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4a12      	ldr	r2, [pc, #72]	; (8008380 <prvInitialiseTaskLists+0x60>)
 8008338:	4413      	add	r3, r2
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fcf0 	bl	8006d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3301      	adds	r3, #1
 8008344:	607b      	str	r3, [r7, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b37      	cmp	r3, #55	; 0x37
 800834a:	d9ef      	bls.n	800832c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800834c:	480d      	ldr	r0, [pc, #52]	; (8008384 <prvInitialiseTaskLists+0x64>)
 800834e:	f7fe fce7 	bl	8006d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008352:	480d      	ldr	r0, [pc, #52]	; (8008388 <prvInitialiseTaskLists+0x68>)
 8008354:	f7fe fce4 	bl	8006d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008358:	480c      	ldr	r0, [pc, #48]	; (800838c <prvInitialiseTaskLists+0x6c>)
 800835a:	f7fe fce1 	bl	8006d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800835e:	480c      	ldr	r0, [pc, #48]	; (8008390 <prvInitialiseTaskLists+0x70>)
 8008360:	f7fe fcde 	bl	8006d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008364:	480b      	ldr	r0, [pc, #44]	; (8008394 <prvInitialiseTaskLists+0x74>)
 8008366:	f7fe fcdb 	bl	8006d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800836a:	4b0b      	ldr	r3, [pc, #44]	; (8008398 <prvInitialiseTaskLists+0x78>)
 800836c:	4a05      	ldr	r2, [pc, #20]	; (8008384 <prvInitialiseTaskLists+0x64>)
 800836e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008370:	4b0a      	ldr	r3, [pc, #40]	; (800839c <prvInitialiseTaskLists+0x7c>)
 8008372:	4a05      	ldr	r2, [pc, #20]	; (8008388 <prvInitialiseTaskLists+0x68>)
 8008374:	601a      	str	r2, [r3, #0]
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20000740 	.word	0x20000740
 8008384:	20000ba0 	.word	0x20000ba0
 8008388:	20000bb4 	.word	0x20000bb4
 800838c:	20000bd0 	.word	0x20000bd0
 8008390:	20000be4 	.word	0x20000be4
 8008394:	20000bfc 	.word	0x20000bfc
 8008398:	20000bc8 	.word	0x20000bc8
 800839c:	20000bcc 	.word	0x20000bcc

080083a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083a6:	e019      	b.n	80083dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083a8:	f000 fdd4 	bl	8008f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ac:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <prvCheckTasksWaitingTermination+0x50>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe fd3b 	bl	8006e34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083be:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <prvCheckTasksWaitingTermination+0x54>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	4a0b      	ldr	r2, [pc, #44]	; (80083f4 <prvCheckTasksWaitingTermination+0x54>)
 80083c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083c8:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <prvCheckTasksWaitingTermination+0x58>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	4a0a      	ldr	r2, [pc, #40]	; (80083f8 <prvCheckTasksWaitingTermination+0x58>)
 80083d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083d2:	f000 fdef 	bl	8008fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f810 	bl	80083fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <prvCheckTasksWaitingTermination+0x58>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e1      	bne.n	80083a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20000be4 	.word	0x20000be4
 80083f4:	20000c10 	.word	0x20000c10
 80083f8:	20000bf8 	.word	0x20000bf8

080083fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800840a:	2b00      	cmp	r3, #0
 800840c:	d108      	bne.n	8008420 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008412:	4618      	mov	r0, r3
 8008414:	f000 ff8c 	bl	8009330 <vPortFree>
				vPortFree( pxTCB );
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 ff89 	bl	8009330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800841e:	e018      	b.n	8008452 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008426:	2b01      	cmp	r3, #1
 8008428:	d103      	bne.n	8008432 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 ff80 	bl	8009330 <vPortFree>
	}
 8008430:	e00f      	b.n	8008452 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008438:	2b02      	cmp	r3, #2
 800843a:	d00a      	beq.n	8008452 <prvDeleteTCB+0x56>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	60fb      	str	r3, [r7, #12]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <prvDeleteTCB+0x54>
	}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008462:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <prvResetNextTaskUnblockTime+0x38>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <prvResetNextTaskUnblockTime+0x3c>)
 800846e:	f04f 32ff 	mov.w	r2, #4294967295
 8008472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008474:	e008      	b.n	8008488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008476:	4b07      	ldr	r3, [pc, #28]	; (8008494 <prvResetNextTaskUnblockTime+0x38>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4a04      	ldr	r2, [pc, #16]	; (8008498 <prvResetNextTaskUnblockTime+0x3c>)
 8008486:	6013      	str	r3, [r2, #0]
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20000bc8 	.word	0x20000bc8
 8008498:	20000c30 	.word	0x20000c30

0800849c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <xTaskGetSchedulerState+0x34>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d102      	bne.n	80084b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084aa:	2301      	movs	r3, #1
 80084ac:	607b      	str	r3, [r7, #4]
 80084ae:	e008      	b.n	80084c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084b0:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <xTaskGetSchedulerState+0x38>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084b8:	2302      	movs	r3, #2
 80084ba:	607b      	str	r3, [r7, #4]
 80084bc:	e001      	b.n	80084c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084be:	2300      	movs	r3, #0
 80084c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084c2:	687b      	ldr	r3, [r7, #4]
	}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20000c1c 	.word	0x20000c1c
 80084d4:	20000c38 	.word	0x20000c38

080084d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d056      	beq.n	800859c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084ee:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <xTaskPriorityDisinherit+0xd0>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d00a      	beq.n	800850e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	60fb      	str	r3, [r7, #12]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	60bb      	str	r3, [r7, #8]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008530:	1e5a      	subs	r2, r3, #1
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853e:	429a      	cmp	r2, r3
 8008540:	d02c      	beq.n	800859c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008546:	2b00      	cmp	r3, #0
 8008548:	d128      	bne.n	800859c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fc70 	bl	8006e34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <xTaskPriorityDisinherit+0xd4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <xTaskPriorityDisinherit+0xa4>
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a0c      	ldr	r2, [pc, #48]	; (80085ac <xTaskPriorityDisinherit+0xd4>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <xTaskPriorityDisinherit+0xd8>)
 800858a:	441a      	add	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fbf1 	bl	8006d7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800859c:	697b      	ldr	r3, [r7, #20]
	}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	2000073c 	.word	0x2000073c
 80085ac:	20000c18 	.word	0x20000c18
 80085b0:	20000740 	.word	0x20000740

080085b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085be:	4b21      	ldr	r3, [pc, #132]	; (8008644 <prvAddCurrentTaskToDelayedList+0x90>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085c4:	4b20      	ldr	r3, [pc, #128]	; (8008648 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fc32 	bl	8006e34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d10a      	bne.n	80085ee <prvAddCurrentTaskToDelayedList+0x3a>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085de:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <prvAddCurrentTaskToDelayedList+0x94>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3304      	adds	r3, #4
 80085e4:	4619      	mov	r1, r3
 80085e6:	4819      	ldr	r0, [pc, #100]	; (800864c <prvAddCurrentTaskToDelayedList+0x98>)
 80085e8:	f7fe fbc7 	bl	8006d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085ec:	e026      	b.n	800863c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4413      	add	r3, r2
 80085f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085f6:	4b14      	ldr	r3, [pc, #80]	; (8008648 <prvAddCurrentTaskToDelayedList+0x94>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	429a      	cmp	r2, r3
 8008604:	d209      	bcs.n	800861a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008606:	4b12      	ldr	r3, [pc, #72]	; (8008650 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <prvAddCurrentTaskToDelayedList+0x94>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f7fe fbd5 	bl	8006dc2 <vListInsert>
}
 8008618:	e010      	b.n	800863c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800861a:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <prvAddCurrentTaskToDelayedList+0x94>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3304      	adds	r3, #4
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	f7fe fbcb 	bl	8006dc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	d202      	bcs.n	800863c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008636:	4a08      	ldr	r2, [pc, #32]	; (8008658 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6013      	str	r3, [r2, #0]
}
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20000c14 	.word	0x20000c14
 8008648:	2000073c 	.word	0x2000073c
 800864c:	20000bfc 	.word	0x20000bfc
 8008650:	20000bcc 	.word	0x20000bcc
 8008654:	20000bc8 	.word	0x20000bc8
 8008658:	20000c30 	.word	0x20000c30

0800865c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	; 0x28
 8008660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008666:	f000 fb07 	bl	8008c78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800866a:	4b1c      	ldr	r3, [pc, #112]	; (80086dc <xTimerCreateTimerTask+0x80>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d021      	beq.n	80086b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800867a:	1d3a      	adds	r2, r7, #4
 800867c:	f107 0108 	add.w	r1, r7, #8
 8008680:	f107 030c 	add.w	r3, r7, #12
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe fb31 	bl	8006cec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	9202      	str	r2, [sp, #8]
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	2302      	movs	r3, #2
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	2300      	movs	r3, #0
 800869a:	460a      	mov	r2, r1
 800869c:	4910      	ldr	r1, [pc, #64]	; (80086e0 <xTimerCreateTimerTask+0x84>)
 800869e:	4811      	ldr	r0, [pc, #68]	; (80086e4 <xTimerCreateTimerTask+0x88>)
 80086a0:	f7ff f8de 	bl	8007860 <xTaskCreateStatic>
 80086a4:	4603      	mov	r3, r0
 80086a6:	4a10      	ldr	r2, [pc, #64]	; (80086e8 <xTimerCreateTimerTask+0x8c>)
 80086a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086aa:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <xTimerCreateTimerTask+0x8c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086b2:	2301      	movs	r3, #1
 80086b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	613b      	str	r3, [r7, #16]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80086d2:	697b      	ldr	r3, [r7, #20]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000c6c 	.word	0x20000c6c
 80086e0:	0800962c 	.word	0x0800962c
 80086e4:	08008821 	.word	0x08008821
 80086e8:	20000c70 	.word	0x20000c70

080086ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	; 0x28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	623b      	str	r3, [r7, #32]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800871a:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <xTimerGenericCommand+0x98>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d02a      	beq.n	8008778 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2b05      	cmp	r3, #5
 8008732:	dc18      	bgt.n	8008766 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008734:	f7ff feb2 	bl	800849c <xTaskGetSchedulerState>
 8008738:	4603      	mov	r3, r0
 800873a:	2b02      	cmp	r3, #2
 800873c:	d109      	bne.n	8008752 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <xTimerGenericCommand+0x98>)
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f107 0110 	add.w	r1, r7, #16
 8008746:	2300      	movs	r3, #0
 8008748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874a:	f7fe fca1 	bl	8007090 <xQueueGenericSend>
 800874e:	6278      	str	r0, [r7, #36]	; 0x24
 8008750:	e012      	b.n	8008778 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <xTimerGenericCommand+0x98>)
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	f107 0110 	add.w	r1, r7, #16
 800875a:	2300      	movs	r3, #0
 800875c:	2200      	movs	r2, #0
 800875e:	f7fe fc97 	bl	8007090 <xQueueGenericSend>
 8008762:	6278      	str	r0, [r7, #36]	; 0x24
 8008764:	e008      	b.n	8008778 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008766:	4b07      	ldr	r3, [pc, #28]	; (8008784 <xTimerGenericCommand+0x98>)
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	f107 0110 	add.w	r1, r7, #16
 800876e:	2300      	movs	r3, #0
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	f7fe fd8b 	bl	800728c <xQueueGenericSendFromISR>
 8008776:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800877a:	4618      	mov	r0, r3
 800877c:	3728      	adds	r7, #40	; 0x28
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20000c6c 	.word	0x20000c6c

08008788 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af02      	add	r7, sp, #8
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008792:	4b22      	ldr	r3, [pc, #136]	; (800881c <prvProcessExpiredTimer+0x94>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	3304      	adds	r3, #4
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fb47 	bl	8006e34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d022      	beq.n	80087fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	699a      	ldr	r2, [r3, #24]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	18d1      	adds	r1, r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	6978      	ldr	r0, [r7, #20]
 80087c2:	f000 f8d1 	bl	8008968 <prvInsertTimerInActiveList>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01f      	beq.n	800880c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087cc:	2300      	movs	r3, #0
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	2300      	movs	r3, #0
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	2100      	movs	r1, #0
 80087d6:	6978      	ldr	r0, [r7, #20]
 80087d8:	f7ff ff88 	bl	80086ec <xTimerGenericCommand>
 80087dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d113      	bne.n	800880c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	60fb      	str	r3, [r7, #12]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008800:	f023 0301 	bic.w	r3, r3, #1
 8008804:	b2da      	uxtb	r2, r3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	6978      	ldr	r0, [r7, #20]
 8008812:	4798      	blx	r3
}
 8008814:	bf00      	nop
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000c64 	.word	0x20000c64

08008820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008828:	f107 0308 	add.w	r3, r7, #8
 800882c:	4618      	mov	r0, r3
 800882e:	f000 f857 	bl	80088e0 <prvGetNextExpireTime>
 8008832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	4619      	mov	r1, r3
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 f803 	bl	8008844 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800883e:	f000 f8d5 	bl	80089ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008842:	e7f1      	b.n	8008828 <prvTimerTask+0x8>

08008844 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800884e:	f7ff fa43 	bl	8007cd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008852:	f107 0308 	add.w	r3, r7, #8
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f866 	bl	8008928 <prvSampleTimeNow>
 800885c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d130      	bne.n	80088c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <prvProcessTimerOrBlockTask+0x3c>
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	429a      	cmp	r2, r3
 8008870:	d806      	bhi.n	8008880 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008872:	f7ff fa3f 	bl	8007cf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008876:	68f9      	ldr	r1, [r7, #12]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff ff85 	bl	8008788 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800887e:	e024      	b.n	80088ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d008      	beq.n	8008898 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008886:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <prvProcessTimerOrBlockTask+0x90>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <prvProcessTimerOrBlockTask+0x50>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <prvProcessTimerOrBlockTask+0x52>
 8008894:	2300      	movs	r3, #0
 8008896:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008898:	4b0f      	ldr	r3, [pc, #60]	; (80088d8 <prvProcessTimerOrBlockTask+0x94>)
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	4619      	mov	r1, r3
 80088a6:	f7fe ffa7 	bl	80077f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088aa:	f7ff fa23 	bl	8007cf4 <xTaskResumeAll>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <prvProcessTimerOrBlockTask+0x98>)
 80088b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	f3bf 8f6f 	isb	sy
}
 80088c4:	e001      	b.n	80088ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088c6:	f7ff fa15 	bl	8007cf4 <xTaskResumeAll>
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000c68 	.word	0x20000c68
 80088d8:	20000c6c 	.word	0x20000c6c
 80088dc:	e000ed04 	.word	0xe000ed04

080088e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088e8:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <prvGetNextExpireTime+0x44>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <prvGetNextExpireTime+0x16>
 80088f2:	2201      	movs	r2, #1
 80088f4:	e000      	b.n	80088f8 <prvGetNextExpireTime+0x18>
 80088f6:	2200      	movs	r2, #0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d105      	bne.n	8008910 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008904:	4b07      	ldr	r3, [pc, #28]	; (8008924 <prvGetNextExpireTime+0x44>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	e001      	b.n	8008914 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008914:	68fb      	ldr	r3, [r7, #12]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000c64 	.word	0x20000c64

08008928 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008930:	f7ff fa7e 	bl	8007e30 <xTaskGetTickCount>
 8008934:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008936:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <prvSampleTimeNow+0x3c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	429a      	cmp	r2, r3
 800893e:	d205      	bcs.n	800894c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008940:	f000 f936 	bl	8008bb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	e002      	b.n	8008952 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008952:	4a04      	ldr	r2, [pc, #16]	; (8008964 <prvSampleTimeNow+0x3c>)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008958:	68fb      	ldr	r3, [r7, #12]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000c74 	.word	0x20000c74

08008968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008976:	2300      	movs	r3, #0
 8008978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d812      	bhi.n	80089b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	1ad2      	subs	r2, r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	429a      	cmp	r2, r3
 800899a:	d302      	bcc.n	80089a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e01b      	b.n	80089da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089a2:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <prvInsertTimerInActiveList+0x7c>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3304      	adds	r3, #4
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f7fe fa08 	bl	8006dc2 <vListInsert>
 80089b2:	e012      	b.n	80089da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d206      	bcs.n	80089ca <prvInsertTimerInActiveList+0x62>
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e007      	b.n	80089da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <prvInsertTimerInActiveList+0x80>)
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fe f9f4 	bl	8006dc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089da:	697b      	ldr	r3, [r7, #20]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20000c68 	.word	0x20000c68
 80089e8:	20000c64 	.word	0x20000c64

080089ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08e      	sub	sp, #56	; 0x38
 80089f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089f2:	e0ca      	b.n	8008b8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	da18      	bge.n	8008a2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089fa:	1d3b      	adds	r3, r7, #4
 80089fc:	3304      	adds	r3, #4
 80089fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	61fb      	str	r3, [r7, #28]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a22:	6850      	ldr	r0, [r2, #4]
 8008a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a26:	6892      	ldr	r2, [r2, #8]
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f2c0 80aa 	blt.w	8008b88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	3304      	adds	r3, #4
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe f9f5 	bl	8006e34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a4a:	463b      	mov	r3, r7
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff ff6b 	bl	8008928 <prvSampleTimeNow>
 8008a52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b09      	cmp	r3, #9
 8008a58:	f200 8097 	bhi.w	8008b8a <prvProcessReceivedCommands+0x19e>
 8008a5c:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <prvProcessReceivedCommands+0x78>)
 8008a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a62:	bf00      	nop
 8008a64:	08008a8d 	.word	0x08008a8d
 8008a68:	08008a8d 	.word	0x08008a8d
 8008a6c:	08008a8d 	.word	0x08008a8d
 8008a70:	08008b01 	.word	0x08008b01
 8008a74:	08008b15 	.word	0x08008b15
 8008a78:	08008b5f 	.word	0x08008b5f
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a8d 	.word	0x08008a8d
 8008a84:	08008b01 	.word	0x08008b01
 8008a88:	08008b15 	.word	0x08008b15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	18d1      	adds	r1, r2, r3
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aac:	f7ff ff5c 	bl	8008968 <prvInsertTimerInActiveList>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d069      	beq.n	8008b8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008abc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d05e      	beq.n	8008b8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	441a      	add	r2, r3
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ade:	f7ff fe05 	bl	80086ec <xTimerGenericCommand>
 8008ae2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d14f      	bne.n	8008b8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	61bb      	str	r3, [r7, #24]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b06:	f023 0301 	bic.w	r3, r3, #1
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008b12:	e03a      	b.n	8008b8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b1a:	f043 0301 	orr.w	r3, r3, #1
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	617b      	str	r3, [r7, #20]
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	18d1      	adds	r1, r2, r3
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b58:	f7ff ff06 	bl	8008968 <prvInsertTimerInActiveList>
					break;
 8008b5c:	e015      	b.n	8008b8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d103      	bne.n	8008b74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6e:	f000 fbdf 	bl	8009330 <vPortFree>
 8008b72:	e00a      	b.n	8008b8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b7a:	f023 0301 	bic.w	r3, r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b86:	e000      	b.n	8008b8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b8a:	4b08      	ldr	r3, [pc, #32]	; (8008bac <prvProcessReceivedCommands+0x1c0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	1d39      	adds	r1, r7, #4
 8008b90:	2200      	movs	r2, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fc16 	bl	80073c4 <xQueueReceive>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f47f af2a 	bne.w	80089f4 <prvProcessReceivedCommands+0x8>
	}
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	3730      	adds	r7, #48	; 0x30
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000c6c 	.word	0x20000c6c

08008bb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bb6:	e048      	b.n	8008c4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bb8:	4b2d      	ldr	r3, [pc, #180]	; (8008c70 <prvSwitchTimerLists+0xc0>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc2:	4b2b      	ldr	r3, [pc, #172]	; (8008c70 <prvSwitchTimerLists+0xc0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe f92f 	bl	8006e34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d02e      	beq.n	8008c4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d90e      	bls.n	8008c1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c0a:	4b19      	ldr	r3, [pc, #100]	; (8008c70 <prvSwitchTimerLists+0xc0>)
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4619      	mov	r1, r3
 8008c14:	4610      	mov	r0, r2
 8008c16:	f7fe f8d4 	bl	8006dc2 <vListInsert>
 8008c1a:	e016      	b.n	8008c4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	2300      	movs	r3, #0
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	2100      	movs	r1, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f7ff fd60 	bl	80086ec <xTimerGenericCommand>
 8008c2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	603b      	str	r3, [r7, #0]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c4a:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <prvSwitchTimerLists+0xc0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1b1      	bne.n	8008bb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <prvSwitchTimerLists+0xc0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c5a:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <prvSwitchTimerLists+0xc4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a04      	ldr	r2, [pc, #16]	; (8008c70 <prvSwitchTimerLists+0xc0>)
 8008c60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c62:	4a04      	ldr	r2, [pc, #16]	; (8008c74 <prvSwitchTimerLists+0xc4>)
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	6013      	str	r3, [r2, #0]
}
 8008c68:	bf00      	nop
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000c64 	.word	0x20000c64
 8008c74:	20000c68 	.word	0x20000c68

08008c78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c7e:	f000 f969 	bl	8008f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <prvCheckForValidListAndQueue+0x60>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d120      	bne.n	8008ccc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c8a:	4814      	ldr	r0, [pc, #80]	; (8008cdc <prvCheckForValidListAndQueue+0x64>)
 8008c8c:	f7fe f848 	bl	8006d20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c90:	4813      	ldr	r0, [pc, #76]	; (8008ce0 <prvCheckForValidListAndQueue+0x68>)
 8008c92:	f7fe f845 	bl	8006d20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c96:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <prvCheckForValidListAndQueue+0x6c>)
 8008c98:	4a10      	ldr	r2, [pc, #64]	; (8008cdc <prvCheckForValidListAndQueue+0x64>)
 8008c9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c9c:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <prvCheckForValidListAndQueue+0x70>)
 8008c9e:	4a10      	ldr	r2, [pc, #64]	; (8008ce0 <prvCheckForValidListAndQueue+0x68>)
 8008ca0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	4b11      	ldr	r3, [pc, #68]	; (8008cec <prvCheckForValidListAndQueue+0x74>)
 8008ca8:	4a11      	ldr	r2, [pc, #68]	; (8008cf0 <prvCheckForValidListAndQueue+0x78>)
 8008caa:	2110      	movs	r1, #16
 8008cac:	200a      	movs	r0, #10
 8008cae:	f7fe f953 	bl	8006f58 <xQueueGenericCreateStatic>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4a08      	ldr	r2, [pc, #32]	; (8008cd8 <prvCheckForValidListAndQueue+0x60>)
 8008cb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <prvCheckForValidListAndQueue+0x60>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008cc0:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <prvCheckForValidListAndQueue+0x60>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	490b      	ldr	r1, [pc, #44]	; (8008cf4 <prvCheckForValidListAndQueue+0x7c>)
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fd6c 	bl	80077a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ccc:	f000 f972 	bl	8008fb4 <vPortExitCritical>
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000c6c 	.word	0x20000c6c
 8008cdc:	20000c3c 	.word	0x20000c3c
 8008ce0:	20000c50 	.word	0x20000c50
 8008ce4:	20000c64 	.word	0x20000c64
 8008ce8:	20000c68 	.word	0x20000c68
 8008cec:	20000d18 	.word	0x20000d18
 8008cf0:	20000c78 	.word	0x20000c78
 8008cf4:	08009634 	.word	0x08009634

08008cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3b04      	subs	r3, #4
 8008d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3b04      	subs	r3, #4
 8008d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f023 0201 	bic.w	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3b04      	subs	r3, #4
 8008d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d28:	4a0c      	ldr	r2, [pc, #48]	; (8008d5c <pxPortInitialiseStack+0x64>)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3b14      	subs	r3, #20
 8008d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3b04      	subs	r3, #4
 8008d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f06f 0202 	mvn.w	r2, #2
 8008d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3b20      	subs	r3, #32
 8008d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	08008d61 	.word	0x08008d61

08008d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d6a:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <prvTaskExitError+0x54>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d00a      	beq.n	8008d8a <prvTaskExitError+0x2a>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	60fb      	str	r3, [r7, #12]
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <prvTaskExitError+0x28>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	60bb      	str	r3, [r7, #8]
}
 8008d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d9e:	bf00      	nop
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0fc      	beq.n	8008da0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008da6:	bf00      	nop
 8008da8:	bf00      	nop
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	20000014 	.word	0x20000014
	...

08008dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008dc0:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <pxCurrentTCBConst2>)
 8008dc2:	6819      	ldr	r1, [r3, #0]
 8008dc4:	6808      	ldr	r0, [r1, #0]
 8008dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	f380 8809 	msr	PSP, r0
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f04f 0000 	mov.w	r0, #0
 8008dd6:	f380 8811 	msr	BASEPRI, r0
 8008dda:	4770      	bx	lr
 8008ddc:	f3af 8000 	nop.w

08008de0 <pxCurrentTCBConst2>:
 8008de0:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop

08008de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008de8:	4808      	ldr	r0, [pc, #32]	; (8008e0c <prvPortStartFirstTask+0x24>)
 8008dea:	6800      	ldr	r0, [r0, #0]
 8008dec:	6800      	ldr	r0, [r0, #0]
 8008dee:	f380 8808 	msr	MSP, r0
 8008df2:	f04f 0000 	mov.w	r0, #0
 8008df6:	f380 8814 	msr	CONTROL, r0
 8008dfa:	b662      	cpsie	i
 8008dfc:	b661      	cpsie	f
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	df00      	svc	0
 8008e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e0a:	bf00      	nop
 8008e0c:	e000ed08 	.word	0xe000ed08

08008e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e16:	4b46      	ldr	r3, [pc, #280]	; (8008f30 <xPortStartScheduler+0x120>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a46      	ldr	r2, [pc, #280]	; (8008f34 <xPortStartScheduler+0x124>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d10a      	bne.n	8008e36 <xPortStartScheduler+0x26>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	613b      	str	r3, [r7, #16]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e36:	4b3e      	ldr	r3, [pc, #248]	; (8008f30 <xPortStartScheduler+0x120>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a3f      	ldr	r2, [pc, #252]	; (8008f38 <xPortStartScheduler+0x128>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d10a      	bne.n	8008e56 <xPortStartScheduler+0x46>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	60fb      	str	r3, [r7, #12]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e56:	4b39      	ldr	r3, [pc, #228]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	22ff      	movs	r2, #255	; 0xff
 8008e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	4b31      	ldr	r3, [pc, #196]	; (8008f40 <xPortStartScheduler+0x130>)
 8008e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e7e:	4b31      	ldr	r3, [pc, #196]	; (8008f44 <xPortStartScheduler+0x134>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e84:	e009      	b.n	8008e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e86:	4b2f      	ldr	r3, [pc, #188]	; (8008f44 <xPortStartScheduler+0x134>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	4a2d      	ldr	r2, [pc, #180]	; (8008f44 <xPortStartScheduler+0x134>)
 8008e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e9a:	78fb      	ldrb	r3, [r7, #3]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea2:	2b80      	cmp	r3, #128	; 0x80
 8008ea4:	d0ef      	beq.n	8008e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ea6:	4b27      	ldr	r3, [pc, #156]	; (8008f44 <xPortStartScheduler+0x134>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f1c3 0307 	rsb	r3, r3, #7
 8008eae:	2b04      	cmp	r3, #4
 8008eb0:	d00a      	beq.n	8008ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60bb      	str	r3, [r7, #8]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ec8:	4b1e      	ldr	r3, [pc, #120]	; (8008f44 <xPortStartScheduler+0x134>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	4a1d      	ldr	r2, [pc, #116]	; (8008f44 <xPortStartScheduler+0x134>)
 8008ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ed2:	4b1c      	ldr	r3, [pc, #112]	; (8008f44 <xPortStartScheduler+0x134>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eda:	4a1a      	ldr	r2, [pc, #104]	; (8008f44 <xPortStartScheduler+0x134>)
 8008edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ee6:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <xPortStartScheduler+0x138>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a17      	ldr	r2, [pc, #92]	; (8008f48 <xPortStartScheduler+0x138>)
 8008eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ef2:	4b15      	ldr	r3, [pc, #84]	; (8008f48 <xPortStartScheduler+0x138>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a14      	ldr	r2, [pc, #80]	; (8008f48 <xPortStartScheduler+0x138>)
 8008ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008efe:	f000 f8dd 	bl	80090bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f02:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <xPortStartScheduler+0x13c>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f08:	f000 f8fc 	bl	8009104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f0c:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <xPortStartScheduler+0x140>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a0f      	ldr	r2, [pc, #60]	; (8008f50 <xPortStartScheduler+0x140>)
 8008f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f18:	f7ff ff66 	bl	8008de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f1c:	f7ff f852 	bl	8007fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8008f20:	f7ff ff1e 	bl	8008d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	e000ed00 	.word	0xe000ed00
 8008f34:	410fc271 	.word	0x410fc271
 8008f38:	410fc270 	.word	0x410fc270
 8008f3c:	e000e400 	.word	0xe000e400
 8008f40:	20000d68 	.word	0x20000d68
 8008f44:	20000d6c 	.word	0x20000d6c
 8008f48:	e000ed20 	.word	0xe000ed20
 8008f4c:	20000014 	.word	0x20000014
 8008f50:	e000ef34 	.word	0xe000ef34

08008f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	607b      	str	r3, [r7, #4]
}
 8008f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f6e:	4b0f      	ldr	r3, [pc, #60]	; (8008fac <vPortEnterCritical+0x58>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	4a0d      	ldr	r2, [pc, #52]	; (8008fac <vPortEnterCritical+0x58>)
 8008f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f78:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <vPortEnterCritical+0x58>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d10f      	bne.n	8008fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f80:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <vPortEnterCritical+0x5c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	603b      	str	r3, [r7, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	e7fe      	b.n	8008f9e <vPortEnterCritical+0x4a>
	}
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	20000014 	.word	0x20000014
 8008fb0:	e000ed04 	.word	0xe000ed04

08008fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fba:	4b12      	ldr	r3, [pc, #72]	; (8009004 <vPortExitCritical+0x50>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <vPortExitCritical+0x24>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	607b      	str	r3, [r7, #4]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <vPortExitCritical+0x50>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	4a09      	ldr	r2, [pc, #36]	; (8009004 <vPortExitCritical+0x50>)
 8008fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <vPortExitCritical+0x50>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d105      	bne.n	8008ff6 <vPortExitCritical+0x42>
 8008fea:	2300      	movs	r3, #0
 8008fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	f383 8811 	msr	BASEPRI, r3
}
 8008ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000014 	.word	0x20000014
	...

08009010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009010:	f3ef 8009 	mrs	r0, PSP
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	4b15      	ldr	r3, [pc, #84]	; (8009070 <pxCurrentTCBConst>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	f01e 0f10 	tst.w	lr, #16
 8009020:	bf08      	it	eq
 8009022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902a:	6010      	str	r0, [r2, #0]
 800902c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009034:	f380 8811 	msr	BASEPRI, r0
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f7fe ffc0 	bl	8007fc4 <vTaskSwitchContext>
 8009044:	f04f 0000 	mov.w	r0, #0
 8009048:	f380 8811 	msr	BASEPRI, r0
 800904c:	bc09      	pop	{r0, r3}
 800904e:	6819      	ldr	r1, [r3, #0]
 8009050:	6808      	ldr	r0, [r1, #0]
 8009052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009056:	f01e 0f10 	tst.w	lr, #16
 800905a:	bf08      	it	eq
 800905c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009060:	f380 8809 	msr	PSP, r0
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	f3af 8000 	nop.w

08009070 <pxCurrentTCBConst>:
 8009070:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop

08009078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	607b      	str	r3, [r7, #4]
}
 8009090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009092:	f7fe fedd 	bl	8007e50 <xTaskIncrementTick>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800909c:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <xPortSysTickHandler+0x40>)
 800909e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f383 8811 	msr	BASEPRI, r3
}
 80090ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <vPortSetupTimerInterrupt+0x34>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090c6:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <vPortSetupTimerInterrupt+0x38>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090cc:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <vPortSetupTimerInterrupt+0x3c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a0a      	ldr	r2, [pc, #40]	; (80090fc <vPortSetupTimerInterrupt+0x40>)
 80090d2:	fba2 2303 	umull	r2, r3, r2, r3
 80090d6:	099b      	lsrs	r3, r3, #6
 80090d8:	4a09      	ldr	r2, [pc, #36]	; (8009100 <vPortSetupTimerInterrupt+0x44>)
 80090da:	3b01      	subs	r3, #1
 80090dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090de:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <vPortSetupTimerInterrupt+0x34>)
 80090e0:	2207      	movs	r2, #7
 80090e2:	601a      	str	r2, [r3, #0]
}
 80090e4:	bf00      	nop
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	e000e010 	.word	0xe000e010
 80090f4:	e000e018 	.word	0xe000e018
 80090f8:	20000008 	.word	0x20000008
 80090fc:	10624dd3 	.word	0x10624dd3
 8009100:	e000e014 	.word	0xe000e014

08009104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009114 <vPortEnableVFP+0x10>
 8009108:	6801      	ldr	r1, [r0, #0]
 800910a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800910e:	6001      	str	r1, [r0, #0]
 8009110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009112:	bf00      	nop
 8009114:	e000ed88 	.word	0xe000ed88

08009118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800911e:	f3ef 8305 	mrs	r3, IPSR
 8009122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b0f      	cmp	r3, #15
 8009128:	d914      	bls.n	8009154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800912a:	4a17      	ldr	r2, [pc, #92]	; (8009188 <vPortValidateInterruptPriority+0x70>)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009134:	4b15      	ldr	r3, [pc, #84]	; (800918c <vPortValidateInterruptPriority+0x74>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	7afa      	ldrb	r2, [r7, #11]
 800913a:	429a      	cmp	r2, r3
 800913c:	d20a      	bcs.n	8009154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	607b      	str	r3, [r7, #4]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009154:	4b0e      	ldr	r3, [pc, #56]	; (8009190 <vPortValidateInterruptPriority+0x78>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800915c:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <vPortValidateInterruptPriority+0x7c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	429a      	cmp	r2, r3
 8009162:	d90a      	bls.n	800917a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	603b      	str	r3, [r7, #0]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <vPortValidateInterruptPriority+0x60>
	}
 800917a:	bf00      	nop
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	e000e3f0 	.word	0xe000e3f0
 800918c:	20000d68 	.word	0x20000d68
 8009190:	e000ed0c 	.word	0xe000ed0c
 8009194:	20000d6c 	.word	0x20000d6c

08009198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08a      	sub	sp, #40	; 0x28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091a0:	2300      	movs	r3, #0
 80091a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091a4:	f7fe fd98 	bl	8007cd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091a8:	4b5b      	ldr	r3, [pc, #364]	; (8009318 <pvPortMalloc+0x180>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091b0:	f000 f920 	bl	80093f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091b4:	4b59      	ldr	r3, [pc, #356]	; (800931c <pvPortMalloc+0x184>)
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f040 8093 	bne.w	80092e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01d      	beq.n	8009204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091c8:	2208      	movs	r2, #8
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f003 0307 	and.w	r3, r3, #7
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d014      	beq.n	8009204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f023 0307 	bic.w	r3, r3, #7
 80091e0:	3308      	adds	r3, #8
 80091e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <pvPortMalloc+0x6c>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	617b      	str	r3, [r7, #20]
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d06e      	beq.n	80092e8 <pvPortMalloc+0x150>
 800920a:	4b45      	ldr	r3, [pc, #276]	; (8009320 <pvPortMalloc+0x188>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	429a      	cmp	r2, r3
 8009212:	d869      	bhi.n	80092e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009214:	4b43      	ldr	r3, [pc, #268]	; (8009324 <pvPortMalloc+0x18c>)
 8009216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009218:	4b42      	ldr	r3, [pc, #264]	; (8009324 <pvPortMalloc+0x18c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800921e:	e004      	b.n	800922a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	d903      	bls.n	800923c <pvPortMalloc+0xa4>
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1f1      	bne.n	8009220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800923c:	4b36      	ldr	r3, [pc, #216]	; (8009318 <pvPortMalloc+0x180>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	429a      	cmp	r2, r3
 8009244:	d050      	beq.n	80092e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2208      	movs	r2, #8
 800924c:	4413      	add	r3, r2
 800924e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	1ad2      	subs	r2, r2, r3
 8009260:	2308      	movs	r3, #8
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	429a      	cmp	r2, r3
 8009266:	d91f      	bls.n	80092a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4413      	add	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <pvPortMalloc+0xf8>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	613b      	str	r3, [r7, #16]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	1ad2      	subs	r2, r2, r3
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092a2:	69b8      	ldr	r0, [r7, #24]
 80092a4:	f000 f908 	bl	80094b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092a8:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <pvPortMalloc+0x188>)
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	4a1b      	ldr	r2, [pc, #108]	; (8009320 <pvPortMalloc+0x188>)
 80092b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092b6:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <pvPortMalloc+0x188>)
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	4b1b      	ldr	r3, [pc, #108]	; (8009328 <pvPortMalloc+0x190>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d203      	bcs.n	80092ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092c2:	4b17      	ldr	r3, [pc, #92]	; (8009320 <pvPortMalloc+0x188>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a18      	ldr	r2, [pc, #96]	; (8009328 <pvPortMalloc+0x190>)
 80092c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	4b13      	ldr	r3, [pc, #76]	; (800931c <pvPortMalloc+0x184>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092de:	4b13      	ldr	r3, [pc, #76]	; (800932c <pvPortMalloc+0x194>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3301      	adds	r3, #1
 80092e4:	4a11      	ldr	r2, [pc, #68]	; (800932c <pvPortMalloc+0x194>)
 80092e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092e8:	f7fe fd04 	bl	8007cf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <pvPortMalloc+0x174>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	60fb      	str	r3, [r7, #12]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <pvPortMalloc+0x172>
	return pvReturn;
 800930c:	69fb      	ldr	r3, [r7, #28]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3728      	adds	r7, #40	; 0x28
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20004978 	.word	0x20004978
 800931c:	2000498c 	.word	0x2000498c
 8009320:	2000497c 	.word	0x2000497c
 8009324:	20004970 	.word	0x20004970
 8009328:	20004980 	.word	0x20004980
 800932c:	20004984 	.word	0x20004984

08009330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d04d      	beq.n	80093de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009342:	2308      	movs	r3, #8
 8009344:	425b      	negs	r3, r3
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	4413      	add	r3, r2
 800934a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <vPortFree+0xb8>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4013      	ands	r3, r2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <vPortFree+0x44>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	60fb      	str	r3, [r7, #12]
}
 8009370:	bf00      	nop
 8009372:	e7fe      	b.n	8009372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00a      	beq.n	8009392 <vPortFree+0x62>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	60bb      	str	r3, [r7, #8]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	4b14      	ldr	r3, [pc, #80]	; (80093e8 <vPortFree+0xb8>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4013      	ands	r3, r2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d01e      	beq.n	80093de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11a      	bne.n	80093de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <vPortFree+0xb8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	43db      	mvns	r3, r3
 80093b2:	401a      	ands	r2, r3
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093b8:	f7fe fc8e 	bl	8007cd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <vPortFree+0xbc>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4413      	add	r3, r2
 80093c6:	4a09      	ldr	r2, [pc, #36]	; (80093ec <vPortFree+0xbc>)
 80093c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093ca:	6938      	ldr	r0, [r7, #16]
 80093cc:	f000 f874 	bl	80094b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093d0:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <vPortFree+0xc0>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3301      	adds	r3, #1
 80093d6:	4a06      	ldr	r2, [pc, #24]	; (80093f0 <vPortFree+0xc0>)
 80093d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093da:	f7fe fc8b 	bl	8007cf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093de:	bf00      	nop
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	2000498c 	.word	0x2000498c
 80093ec:	2000497c 	.word	0x2000497c
 80093f0:	20004988 	.word	0x20004988

080093f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009400:	4b27      	ldr	r3, [pc, #156]	; (80094a0 <prvHeapInit+0xac>)
 8009402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00c      	beq.n	8009428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3307      	adds	r3, #7
 8009412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0307 	bic.w	r3, r3, #7
 800941a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	4a1f      	ldr	r2, [pc, #124]	; (80094a0 <prvHeapInit+0xac>)
 8009424:	4413      	add	r3, r2
 8009426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800942c:	4a1d      	ldr	r2, [pc, #116]	; (80094a4 <prvHeapInit+0xb0>)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009432:	4b1c      	ldr	r3, [pc, #112]	; (80094a4 <prvHeapInit+0xb0>)
 8009434:	2200      	movs	r2, #0
 8009436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	4413      	add	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009440:	2208      	movs	r2, #8
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	1a9b      	subs	r3, r3, r2
 8009446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0307 	bic.w	r3, r3, #7
 800944e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4a15      	ldr	r2, [pc, #84]	; (80094a8 <prvHeapInit+0xb4>)
 8009454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <prvHeapInit+0xb4>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2200      	movs	r2, #0
 800945c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800945e:	4b12      	ldr	r3, [pc, #72]	; (80094a8 <prvHeapInit+0xb4>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009474:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <prvHeapInit+0xb4>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	4a0a      	ldr	r2, [pc, #40]	; (80094ac <prvHeapInit+0xb8>)
 8009482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	4a09      	ldr	r2, [pc, #36]	; (80094b0 <prvHeapInit+0xbc>)
 800948a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800948c:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <prvHeapInit+0xc0>)
 800948e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009492:	601a      	str	r2, [r3, #0]
}
 8009494:	bf00      	nop
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20000d70 	.word	0x20000d70
 80094a4:	20004970 	.word	0x20004970
 80094a8:	20004978 	.word	0x20004978
 80094ac:	20004980 	.word	0x20004980
 80094b0:	2000497c 	.word	0x2000497c
 80094b4:	2000498c 	.word	0x2000498c

080094b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094c0:	4b28      	ldr	r3, [pc, #160]	; (8009564 <prvInsertBlockIntoFreeList+0xac>)
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	e002      	b.n	80094cc <prvInsertBlockIntoFreeList+0x14>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d8f7      	bhi.n	80094c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	4413      	add	r3, r2
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d108      	bne.n	80094fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	441a      	add	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	441a      	add	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	429a      	cmp	r2, r3
 800950c:	d118      	bne.n	8009540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	4b15      	ldr	r3, [pc, #84]	; (8009568 <prvInsertBlockIntoFreeList+0xb0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d00d      	beq.n	8009536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	441a      	add	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	e008      	b.n	8009548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009536:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <prvInsertBlockIntoFreeList+0xb0>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	e003      	b.n	8009548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d002      	beq.n	8009556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009556:	bf00      	nop
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	20004970 	.word	0x20004970
 8009568:	20004978 	.word	0x20004978

0800956c <__libc_init_array>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	4d0d      	ldr	r5, [pc, #52]	; (80095a4 <__libc_init_array+0x38>)
 8009570:	4c0d      	ldr	r4, [pc, #52]	; (80095a8 <__libc_init_array+0x3c>)
 8009572:	1b64      	subs	r4, r4, r5
 8009574:	10a4      	asrs	r4, r4, #2
 8009576:	2600      	movs	r6, #0
 8009578:	42a6      	cmp	r6, r4
 800957a:	d109      	bne.n	8009590 <__libc_init_array+0x24>
 800957c:	4d0b      	ldr	r5, [pc, #44]	; (80095ac <__libc_init_array+0x40>)
 800957e:	4c0c      	ldr	r4, [pc, #48]	; (80095b0 <__libc_init_array+0x44>)
 8009580:	f000 f82e 	bl	80095e0 <_init>
 8009584:	1b64      	subs	r4, r4, r5
 8009586:	10a4      	asrs	r4, r4, #2
 8009588:	2600      	movs	r6, #0
 800958a:	42a6      	cmp	r6, r4
 800958c:	d105      	bne.n	800959a <__libc_init_array+0x2e>
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	f855 3b04 	ldr.w	r3, [r5], #4
 8009594:	4798      	blx	r3
 8009596:	3601      	adds	r6, #1
 8009598:	e7ee      	b.n	8009578 <__libc_init_array+0xc>
 800959a:	f855 3b04 	ldr.w	r3, [r5], #4
 800959e:	4798      	blx	r3
 80095a0:	3601      	adds	r6, #1
 80095a2:	e7f2      	b.n	800958a <__libc_init_array+0x1e>
 80095a4:	08009718 	.word	0x08009718
 80095a8:	08009718 	.word	0x08009718
 80095ac:	08009718 	.word	0x08009718
 80095b0:	0800971c 	.word	0x0800971c

080095b4 <memcpy>:
 80095b4:	440a      	add	r2, r1
 80095b6:	4291      	cmp	r1, r2
 80095b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095bc:	d100      	bne.n	80095c0 <memcpy+0xc>
 80095be:	4770      	bx	lr
 80095c0:	b510      	push	{r4, lr}
 80095c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ca:	4291      	cmp	r1, r2
 80095cc:	d1f9      	bne.n	80095c2 <memcpy+0xe>
 80095ce:	bd10      	pop	{r4, pc}

080095d0 <memset>:
 80095d0:	4402      	add	r2, r0
 80095d2:	4603      	mov	r3, r0
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d100      	bne.n	80095da <memset+0xa>
 80095d8:	4770      	bx	lr
 80095da:	f803 1b01 	strb.w	r1, [r3], #1
 80095de:	e7f9      	b.n	80095d4 <memset+0x4>

080095e0 <_init>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr

080095ec <_fini>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr
