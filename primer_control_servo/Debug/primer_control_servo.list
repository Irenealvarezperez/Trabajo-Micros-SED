
primer_control_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008afc  08008afc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b04  08008b04  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000858  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e9b7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f22  00000000  00000000  0003ea77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  000429a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  00044000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024976  00000000  00000000  000454e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c6ea  00000000  00000000  00069e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c05  00000000  00000000  00086540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015a145  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000610c  00000000  00000000  0015a198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ac8 	.word	0x08008ac8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008ac8 	.word	0x08008ac8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fce0 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f830 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9a2 	bl	8000814 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f896 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8c2 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8f0 	bl	80006bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 fee2 	bl	80082a4 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004e0:	f000 f922 	bl	8000728 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e4:	2100      	movs	r1, #0
 80004e6:	4810      	ldr	r0, [pc, #64]	; (8000528 <main+0x68>)
 80004e8:	f004 fa52 	bl	8004990 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004ec:	f007 ff00 	bl	80082f0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    htim2.Instance->CCR1=500; //0.5 ms
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <main+0x68>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004f8:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(2000);
 80004fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004fe:	f000 fd35 	bl	8000f6c <HAL_Delay>
    htim2.Instance->CCR1=1500; //1.5 ms
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <main+0x68>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(2000);
 800050c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000510:	f000 fd2c 	bl	8000f6c <HAL_Delay>
    htim2.Instance->CCR1=2500; //2.5 ms
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <main+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800051c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(2000);
 800051e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000522:	f000 fd23 	bl	8000f6c <HAL_Delay>
    MX_USB_HOST_Process();
 8000526:	e7e1      	b.n	80004ec <main+0x2c>
 8000528:	20000168 	.word	0x20000168

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f008 f9f4 	bl	8008928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fb1a 	bl	8003bec <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005be:	f000 fa27 	bl	8000a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fd7b 	bl	80040dc <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fa10 	bl	8000a10 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f002 fcf1 	bl	8003024 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f9e2 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000bc 	.word	0x200000bc
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f002 fe06 	bl	80032ac <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a6:	f000 f9b3 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200001b0 	.word	0x200001b0
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f004 f80d 	bl	800472c <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f97a 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000110 	.word	0x20000110
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08e      	sub	sp, #56	; 0x38
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_TIM2_Init+0xe8>)
 800075a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800075e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_TIM2_Init+0xe8>)
 8000762:	2253      	movs	r2, #83	; 0x53
 8000764:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_TIM2_Init+0xe8>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_TIM2_Init+0xe8>)
 800076e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000772:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_TIM2_Init+0xe8>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_TIM2_Init+0xe8>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000780:	4823      	ldr	r0, [pc, #140]	; (8000810 <MX_TIM2_Init+0xe8>)
 8000782:	f004 f85c 	bl	800483e <HAL_TIM_Base_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800078c:	f000 f940 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079a:	4619      	mov	r1, r3
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <MX_TIM2_Init+0xe8>)
 800079e:	f004 fa81 	bl	8004ca4 <HAL_TIM_ConfigClockSource>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007a8:	f000 f932 	bl	8000a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ac:	4818      	ldr	r0, [pc, #96]	; (8000810 <MX_TIM2_Init+0xe8>)
 80007ae:	f004 f895 	bl	80048dc <HAL_TIM_PWM_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007b8:	f000 f92a 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4619      	mov	r1, r3
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_TIM2_Init+0xe8>)
 80007cc:	f004 fe42 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007d6:	f000 f91b 	bl	8000a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007da:	2360      	movs	r3, #96	; 0x60
 80007dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80007de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM2_Init+0xe8>)
 80007f4:	f004 f994 	bl	8004b20 <HAL_TIM_PWM_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007fe:	f000 f907 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM2_Init+0xe8>)
 8000804:	f000 fa62 	bl	8000ccc <HAL_TIM_MspPostInit>

}
 8000808:	bf00      	nop
 800080a:	3738      	adds	r7, #56	; 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000168 	.word	0x20000168

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b72      	ldr	r3, [pc, #456]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a71      	ldr	r2, [pc, #452]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b6f      	ldr	r3, [pc, #444]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b6b      	ldr	r3, [pc, #428]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a6a      	ldr	r2, [pc, #424]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b68      	ldr	r3, [pc, #416]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b64      	ldr	r3, [pc, #400]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a63      	ldr	r2, [pc, #396]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b5d      	ldr	r3, [pc, #372]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a5c      	ldr	r2, [pc, #368]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b5a      	ldr	r3, [pc, #360]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b56      	ldr	r3, [pc, #344]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a55      	ldr	r2, [pc, #340]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b53      	ldr	r3, [pc, #332]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a4e      	ldr	r2, [pc, #312]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b4c      	ldr	r3, [pc, #304]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	4849      	ldr	r0, [pc, #292]	; (80009fc <MX_GPIO_Init+0x1e8>)
 80008d8:	f000 fe1a 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4847      	ldr	r0, [pc, #284]	; (8000a00 <MX_GPIO_Init+0x1ec>)
 80008e2:	f000 fe15 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	2200      	movs	r2, #0
 80008e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008ec:	4845      	ldr	r0, [pc, #276]	; (8000a04 <MX_GPIO_Init+0x1f0>)
 80008ee:	f000 fe0f 	bl	8001510 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	483c      	ldr	r0, [pc, #240]	; (80009fc <MX_GPIO_Init+0x1e8>)
 800090a:	f000 fc65 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4836      	ldr	r0, [pc, #216]	; (8000a00 <MX_GPIO_Init+0x1ec>)
 8000926:	f000 fc57 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800092a:	2308      	movs	r3, #8
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	482e      	ldr	r0, [pc, #184]	; (8000a00 <MX_GPIO_Init+0x1ec>)
 8000946:	f000 fc47 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	482a      	ldr	r0, [pc, #168]	; (8000a08 <MX_GPIO_Init+0x1f4>)
 8000960:	f000 fc3a 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000964:	2304      	movs	r3, #4
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4825      	ldr	r0, [pc, #148]	; (8000a0c <MX_GPIO_Init+0x1f8>)
 8000978:	f000 fc2e 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098e:	2305      	movs	r3, #5
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	481c      	ldr	r0, [pc, #112]	; (8000a0c <MX_GPIO_Init+0x1f8>)
 800099a:	f000 fc1d 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4813      	ldr	r0, [pc, #76]	; (8000a04 <MX_GPIO_Init+0x1f0>)
 80009b8:	f000 fc0e 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009bc:	2320      	movs	r3, #32
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_GPIO_Init+0x1f0>)
 80009d0:	f000 fc02 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0x1e8>)
 80009ea:	f000 fbf5 	bl	80011d8 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020400 	.word	0x40020400

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f000 fb7a 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_I2C_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12c      	bne.n	8000ae8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aaa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab0:	2312      	movs	r3, #18
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000abc:	2304      	movs	r3, #4
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <HAL_I2C_MspInit+0x8c>)
 8000ac8:	f000 fb86 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_I2S_MspInit+0xf0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d15a      	bne.n	8000be2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b30:	23c0      	movs	r3, #192	; 0xc0
 8000b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fcb5 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b48:	f7ff ff62 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a26      	ldr	r2, [pc, #152]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <HAL_I2S_MspInit+0xf8>)
 8000bbc:	f000 fb0c 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bc0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd2:	2306      	movs	r3, #6
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_I2S_MspInit+0xfc>)
 8000bde:	f000 fafb 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3738      	adds	r7, #56	; 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40003c00 	.word	0x40003c00
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020800 	.word	0x40020800

08000bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_SPI_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c56:	23e0      	movs	r3, #224	; 0xe0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_SPI_MspInit+0x8c>)
 8000c72:	f000 fab1 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9c:	d10d      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cec:	d11e      	bne.n	8000d2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_TIM_MspPostInit+0x68>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_TIM_MspPostInit+0x68>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_TIM_MspPostInit+0x68>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	4804      	ldr	r0, [pc, #16]	; (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	f000 fa56 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 f8d0 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <OTG_FS_IRQHandler+0x10>)
 8000d96:	f000 fe3f 	bl	8001a18 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200005d4 	.word	0x200005d4

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f007 fd6e 	bl	80088b4 <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20020000 	.word	0x20020000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	200000ac 	.word	0x200000ac
 8000e0c:	200008e8 	.word	0x200008e8

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff ffd7 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f007 fd2d 	bl	80088c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fb2b 	bl	80004c0 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e78:	08008b0c 	.word	0x08008b0c
  ldr r2, =_sbss
 8000e7c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e80:	200008e8 	.word	0x200008e8

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_Init+0x40>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_Init+0x40>)
 8000e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x40>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f94f 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fdae 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f967 	bl	80011be <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f92f 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	200001f8 	.word	0x200001f8

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200001f8 	.word	0x200001f8

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e16b      	b.n	80014cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	f040 815a 	bne.w	80014c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d005      	beq.n	800122a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	2b02      	cmp	r3, #2
 8001228:	d130      	bne.n	800128c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b03      	cmp	r3, #3
 8001296:	d017      	beq.n	80012c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80b4 	beq.w	80014c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b60      	ldr	r3, [pc, #384]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a5f      	ldr	r2, [pc, #380]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137a:	4a5b      	ldr	r2, [pc, #364]	; (80014e8 <HAL_GPIO_Init+0x310>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_GPIO_Init+0x314>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d02b      	beq.n	80013fe <HAL_GPIO_Init+0x226>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <HAL_GPIO_Init+0x318>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d025      	beq.n	80013fa <HAL_GPIO_Init+0x222>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_GPIO_Init+0x31c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01f      	beq.n	80013f6 <HAL_GPIO_Init+0x21e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x320>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d019      	beq.n	80013f2 <HAL_GPIO_Init+0x21a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_GPIO_Init+0x324>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x216>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x328>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x212>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x32c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x20e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x330>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x20a>
 80013de:	2307      	movs	r3, #7
 80013e0:	e00e      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e00c      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00a      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013fe:	2300      	movs	r3, #0
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f002 0203 	and.w	r2, r2, #3
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x310>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141e:	4b3b      	ldr	r3, [pc, #236]	; (800150c <HAL_GPIO_Init+0x334>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001442:	4a32      	ldr	r2, [pc, #200]	; (800150c <HAL_GPIO_Init+0x334>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_GPIO_Init+0x334>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <HAL_GPIO_Init+0x334>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_GPIO_Init+0x334>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001496:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_GPIO_Init+0x334>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_GPIO_Init+0x334>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_GPIO_Init+0x334>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f67f ae90 	bls.w	80011f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40021800 	.word	0x40021800
 8001508:	40021c00 	.word	0x40021c00
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001544:	b08f      	sub	sp, #60	; 0x3c
 8001546:	af0a      	add	r7, sp, #40	; 0x28
 8001548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e054      	b.n	80015fe <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f006 fef6 	bl	8008360 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f004 f84c 	bl	8005630 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	687e      	ldr	r6, [r7, #4]
 80015a0:	466d      	mov	r5, sp
 80015a2:	f106 0410 	add.w	r4, r6, #16
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015b6:	1d33      	adds	r3, r6, #4
 80015b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f003 ffc6 	bl	800554c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 f843 	bl	8005652 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	687e      	ldr	r6, [r7, #4]
 80015d4:	466d      	mov	r5, sp
 80015d6:	f106 0410 	add.w	r4, r6, #16
 80015da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ea:	1d33      	adds	r3, r6, #4
 80015ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f004 f9aa 	bl	8005948 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001606 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001606:	b590      	push	{r4, r7, lr}
 8001608:	b089      	sub	sp, #36	; 0x24
 800160a:	af04      	add	r7, sp, #16
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	4608      	mov	r0, r1
 8001610:	4611      	mov	r1, r2
 8001612:	461a      	mov	r2, r3
 8001614:	4603      	mov	r3, r0
 8001616:	70fb      	strb	r3, [r7, #3]
 8001618:	460b      	mov	r3, r1
 800161a:	70bb      	strb	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_HCD_HC_Init+0x28>
 800162a:	2302      	movs	r3, #2
 800162c:	e076      	b.n	800171c <HAL_HCD_HC_Init+0x116>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4413      	add	r3, r2
 8001642:	333d      	adds	r3, #61	; 0x3d
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	3338      	adds	r3, #56	; 0x38
 8001656:	787a      	ldrb	r2, [r7, #1]
 8001658:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	212c      	movs	r1, #44	; 0x2c
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	3340      	adds	r3, #64	; 0x40
 8001668:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800166a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	212c      	movs	r1, #44	; 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	3339      	adds	r3, #57	; 0x39
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	212c      	movs	r1, #44	; 0x2c
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	333f      	adds	r3, #63	; 0x3f
 800168c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	78ba      	ldrb	r2, [r7, #2]
 8001696:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800169a:	b2d0      	uxtb	r0, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	333a      	adds	r3, #58	; 0x3a
 80016a8:	4602      	mov	r2, r0
 80016aa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da09      	bge.n	80016c8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	212c      	movs	r1, #44	; 0x2c
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	333b      	adds	r3, #59	; 0x3b
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e008      	b.n	80016da <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	333b      	adds	r3, #59	; 0x3b
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	333c      	adds	r3, #60	; 0x3c
 80016e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016ec:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	787c      	ldrb	r4, [r7, #1]
 80016f4:	78ba      	ldrb	r2, [r7, #2]
 80016f6:	78f9      	ldrb	r1, [r7, #3]
 80016f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4623      	mov	r3, r4
 800170a:	f004 fa97 	bl	8005c3c <USB_HC_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}

08001724 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_HCD_HC_Halt+0x1e>
 800173e:	2302      	movs	r3, #2
 8001740:	e00f      	b.n	8001762 <HAL_HCD_HC_Halt+0x3e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fcd3 	bl	80060fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	460b      	mov	r3, r1
 8001780:	70bb      	strb	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	333b      	adds	r3, #59	; 0x3b
 8001794:	78ba      	ldrb	r2, [r7, #2]
 8001796:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	333f      	adds	r3, #63	; 0x3f
 80017a6:	787a      	ldrb	r2, [r7, #1]
 80017a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017aa:	7c3b      	ldrb	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d112      	bne.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3342      	adds	r3, #66	; 0x42
 80017be:	2203      	movs	r2, #3
 80017c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	333d      	adds	r3, #61	; 0x3d
 80017d0:	7f3a      	ldrb	r2, [r7, #28]
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e008      	b.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	212c      	movs	r1, #44	; 0x2c
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	3342      	adds	r3, #66	; 0x42
 80017e4:	2202      	movs	r2, #2
 80017e6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	f200 80c6 	bhi.w	800197c <HAL_HCD_HC_SubmitRequest+0x210>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	08001809 	.word	0x08001809
 80017fc:	08001969 	.word	0x08001969
 8001800:	0800186d 	.word	0x0800186d
 8001804:	080018eb 	.word	0x080018eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001808:	7c3b      	ldrb	r3, [r7, #16]
 800180a:	2b01      	cmp	r3, #1
 800180c:	f040 80b8 	bne.w	8001980 <HAL_HCD_HC_SubmitRequest+0x214>
 8001810:	78bb      	ldrb	r3, [r7, #2]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80b4 	bne.w	8001980 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001818:	8b3b      	ldrh	r3, [r7, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d108      	bne.n	8001830 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3355      	adds	r3, #85	; 0x55
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3355      	adds	r3, #85	; 0x55
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3342      	adds	r3, #66	; 0x42
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001856:	e093      	b.n	8001980 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3342      	adds	r3, #66	; 0x42
 8001866:	2202      	movs	r2, #2
 8001868:	701a      	strb	r2, [r3, #0]
      break;
 800186a:	e089      	b.n	8001980 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d11d      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3355      	adds	r3, #85	; 0x55
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	212c      	movs	r1, #44	; 0x2c
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	3342      	adds	r3, #66	; 0x42
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001898:	e073      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3342      	adds	r3, #66	; 0x42
 80018a8:	2202      	movs	r2, #2
 80018aa:	701a      	strb	r2, [r3, #0]
      break;
 80018ac:	e069      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3354      	adds	r3, #84	; 0x54
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3342      	adds	r3, #66	; 0x42
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
      break;
 80018d4:	e055      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	3342      	adds	r3, #66	; 0x42
 80018e4:	2202      	movs	r2, #2
 80018e6:	701a      	strb	r2, [r3, #0]
      break;
 80018e8:	e04b      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018ea:	78bb      	ldrb	r3, [r7, #2]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d11d      	bne.n	800192c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3355      	adds	r3, #85	; 0x55
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	3342      	adds	r3, #66	; 0x42
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001916:	e034      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3342      	adds	r3, #66	; 0x42
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
      break;
 800192a:	e02a      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3354      	adds	r3, #84	; 0x54
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3342      	adds	r3, #66	; 0x42
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
      break;
 8001952:	e016      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3342      	adds	r3, #66	; 0x42
 8001962:	2202      	movs	r2, #2
 8001964:	701a      	strb	r2, [r3, #0]
      break;
 8001966:	e00c      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3342      	adds	r3, #66	; 0x42
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
      break;
 800197a:	e002      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800197c:	bf00      	nop
 800197e:	e000      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001980:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	3344      	adds	r3, #68	; 0x44
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	8b3a      	ldrh	r2, [r7, #24]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	202c      	movs	r0, #44	; 0x2c
 800199c:	fb00 f303 	mul.w	r3, r0, r3
 80019a0:	440b      	add	r3, r1
 80019a2:	334c      	adds	r3, #76	; 0x4c
 80019a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	212c      	movs	r1, #44	; 0x2c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3360      	adds	r3, #96	; 0x60
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3350      	adds	r3, #80	; 0x50
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3339      	adds	r3, #57	; 0x39
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3361      	adds	r3, #97	; 0x61
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	222c      	movs	r2, #44	; 0x2c
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	3338      	adds	r3, #56	; 0x38
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	18d1      	adds	r1, r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	f004 fa26 	bl	8005e58 <USB_HC_StartXfer>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop

08001a18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 ff49 	bl	80058c6 <USB_GetMode>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	f040 80f6 	bne.w	8001c28 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 ff2d 	bl	80058a0 <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80ec 	beq.w	8001c26 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 ff24 	bl	80058a0 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a62:	d104      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 ff14 	bl	80058a0 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a82:	d104      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 ff04 	bl	80058a0 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aa2:	d104      	bne.n	8001aae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fef4 	bl	80058a0 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d103      	bne.n	8001aca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fee6 	bl	80058a0 <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ade:	d11c      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ae8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001afa:	2110      	movs	r1, #16
 8001afc:	6938      	ldr	r0, [r7, #16]
 8001afe:	f003 fdf5 	bl	80056ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b02:	6938      	ldr	r0, [r7, #16]
 8001b04:	f003 fe16 	bl	8005734 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 ffce 	bl	8005ab0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f006 fca1 	bl	800845c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 febe 	bl	80058a0 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2e:	d102      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f001 fa03 	bl	8002f3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 feb0 	bl	80058a0 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d106      	bne.n	8001b58 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f006 fc6a 	bl	8008424 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2208      	movs	r2, #8
 8001b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fe9f 	bl	80058a0 <USB_ReadInterrupts>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b10      	cmp	r3, #16
 8001b6a:	d101      	bne.n	8001b70 <HAL_HCD_IRQHandler+0x158>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_HCD_IRQHandler+0x15a>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0210 	bic.w	r2, r2, #16
 8001b84:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f001 f906 	bl	8002d98 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0210 	orr.w	r2, r2, #16
 8001b9a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 fe7d 	bl	80058a0 <USB_ReadInterrupts>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bb0:	d13a      	bne.n	8001c28 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 fa90 	bl	80060dc <USB_HC_ReadInterrupt>
 8001bbc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e025      	b.n	8001c10 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d018      	beq.n	8001c0a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bee:	d106      	bne.n	8001bfe <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8ab 	bl	8001d52 <HCD_HC_IN_IRQHandler>
 8001bfc:	e005      	b.n	8001c0a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4619      	mov	r1, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fcc6 	bl	8002596 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3d4      	bcc.n	8001bc4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	e000      	b.n	8001c28 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c26:	bf00      	nop
    }
  }
}
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_HCD_Start+0x16>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e013      	b.n	8001c6c <HAL_HCD_Start+0x3e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 ff90 	bl	8005b78 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fcd6 	bl	800560e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_HCD_Stop+0x16>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e00d      	b.n	8001ca6 <HAL_HCD_Stop+0x32>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fb8a 	bl	80063b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 ff32 	bl	8005b24 <USB_ResetPort>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3360      	adds	r3, #96	; 0x60
 8001ce4:	781b      	ldrb	r3, [r3, #0]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	212c      	movs	r1, #44	; 0x2c
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	3350      	adds	r3, #80	; 0x50
 8001d0c:	681b      	ldr	r3, [r3, #0]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 ff76 	bl	8005c18 <USB_GetCurrentFrame>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 ff51 	bl	8005bea <USB_GetHostSpeed>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d119      	bne.n	8001db6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2304      	movs	r3, #4
 8001d92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	0151      	lsls	r1, r2, #5
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	440a      	add	r2, r1
 8001daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	60d3      	str	r3, [r2, #12]
 8001db4:	e101      	b.n	8001fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dcc:	d12b      	bne.n	8001e26 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	3361      	adds	r3, #97	; 0x61
 8001df0:	2207      	movs	r2, #7
 8001df2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	0151      	lsls	r1, r2, #5
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	440a      	add	r2, r1
 8001e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 f96d 	bl	80060fe <USB_HC_Halt>
 8001e24:	e0c9      	b.n	8001fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d109      	bne.n	8001e50 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	6093      	str	r3, [r2, #8]
 8001e4e:	e0b4      	b.n	8001fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d133      	bne.n	8001ece <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	0151      	lsls	r1, r2, #5
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	440a      	add	r2, r1
 8001e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	212c      	movs	r1, #44	; 0x2c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3361      	adds	r3, #97	; 0x61
 8001e94:	2205      	movs	r2, #5
 8001e96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2308      	movs	r3, #8
 8001eba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 f919 	bl	80060fe <USB_HC_Halt>
 8001ecc:	e075      	b.n	8001fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee4:	d134      	bne.n	8001f50 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	0151      	lsls	r1, r2, #5
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	440a      	add	r2, r1
 8001efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	3361      	adds	r3, #97	; 0x61
 8001f14:	2208      	movs	r2, #8
 8001f16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	2310      	movs	r3, #16
 8001f28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	461a      	mov	r2, r3
 8001f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f004 f8d8 	bl	80060fe <USB_HC_Halt>
 8001f4e:	e034      	b.n	8001fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	d129      	bne.n	8001fba <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	212c      	movs	r1, #44	; 0x2c
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	3361      	adds	r3, #97	; 0x61
 8001f94:	2206      	movs	r2, #6
 8001f96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 f8ab 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd0:	d122      	bne.n	8002018 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	0151      	lsls	r1, r2, #5
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	440a      	add	r2, r1
 8001fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f87e 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	461a      	mov	r2, r3
 8002010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002014:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002016:	e2ba      	b.n	800258e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	f040 811b 	bne.w	8002266 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d019      	beq.n	800206c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3348      	adds	r3, #72	; 0x48
 8002046:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	0159      	lsls	r1, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	440b      	add	r3, r1
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800205a:	1ad2      	subs	r2, r2, r3
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	202c      	movs	r0, #44	; 0x2c
 8002062:	fb00 f303 	mul.w	r3, r0, r3
 8002066:	440b      	add	r3, r1
 8002068:	3350      	adds	r3, #80	; 0x50
 800206a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3361      	adds	r3, #97	; 0x61
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	335c      	adds	r3, #92	; 0x5c
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	333f      	adds	r3, #63	; 0x3f
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	333f      	adds	r3, #63	; 0x3f
 80020c4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d121      	bne.n	800210e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	0151      	lsls	r1, r2, #5
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	440a      	add	r2, r1
 80020e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 f802 	bl	80060fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	461a      	mov	r2, r3
 8002108:	2310      	movs	r3, #16
 800210a:	6093      	str	r3, [r2, #8]
 800210c:	e066      	b.n	80021dc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	333f      	adds	r3, #63	; 0x3f
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d127      	bne.n	8002172 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	0151      	lsls	r1, r2, #5
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	440a      	add	r2, r1
 8002138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800213c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002140:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	b2d9      	uxtb	r1, r3
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	202c      	movs	r0, #44	; 0x2c
 800215e:	fb00 f303 	mul.w	r3, r0, r3
 8002162:	4413      	add	r3, r2
 8002164:	3360      	adds	r3, #96	; 0x60
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f006 f984 	bl	8008478 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002170:	e034      	b.n	80021dc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	333f      	adds	r3, #63	; 0x3f
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d12a      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3354      	adds	r3, #84	; 0x54
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	f083 0301 	eor.w	r3, r3, #1
 80021ac:	b2d8      	uxtb	r0, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3354      	adds	r3, #84	; 0x54
 80021bc:	4602      	mov	r2, r0
 80021be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	b2d9      	uxtb	r1, r3
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	202c      	movs	r0, #44	; 0x2c
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3360      	adds	r3, #96	; 0x60
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f006 f94e 	bl	8008478 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d12b      	bne.n	800223c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3348      	adds	r3, #72	; 0x48
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	202c      	movs	r0, #44	; 0x2c
 80021fa:	fb00 f202 	mul.w	r2, r0, r2
 80021fe:	440a      	add	r2, r1
 8002200:	3240      	adds	r2, #64	; 0x40
 8002202:	8812      	ldrh	r2, [r2, #0]
 8002204:	fbb3 f3f2 	udiv	r3, r3, r2
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 81be 	beq.w	800258e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3354      	adds	r3, #84	; 0x54
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2d8      	uxtb	r0, r3
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	3354      	adds	r3, #84	; 0x54
 8002236:	4602      	mov	r2, r0
 8002238:	701a      	strb	r2, [r3, #0]
}
 800223a:	e1a8      	b.n	800258e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3354      	adds	r3, #84	; 0x54
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2d8      	uxtb	r0, r3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3354      	adds	r3, #84	; 0x54
 8002260:	4602      	mov	r2, r0
 8002262:	701a      	strb	r2, [r3, #0]
}
 8002264:	e193      	b.n	800258e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b02      	cmp	r3, #2
 800227a:	f040 8106 	bne.w	800248a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	0151      	lsls	r1, r2, #5
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	440a      	add	r2, r1
 8002294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002298:	f023 0302 	bic.w	r3, r3, #2
 800229c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3361      	adds	r3, #97	; 0x61
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d109      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3360      	adds	r3, #96	; 0x60
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e0c9      	b.n	800245a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3361      	adds	r3, #97	; 0x61
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d109      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3360      	adds	r3, #96	; 0x60
 80022e8:	2205      	movs	r2, #5
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e0b5      	b.n	800245a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3361      	adds	r3, #97	; 0x61
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d009      	beq.n	8002316 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3361      	adds	r3, #97	; 0x61
 8002310:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002312:	2b08      	cmp	r3, #8
 8002314:	d150      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	335c      	adds	r3, #92	; 0x5c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	202c      	movs	r0, #44	; 0x2c
 800232e:	fb00 f303 	mul.w	r3, r0, r3
 8002332:	440b      	add	r3, r1
 8002334:	335c      	adds	r3, #92	; 0x5c
 8002336:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	335c      	adds	r3, #92	; 0x5c
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d912      	bls.n	8002372 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	335c      	adds	r3, #92	; 0x5c
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3360      	adds	r3, #96	; 0x60
 800236c:	2204      	movs	r2, #4
 800236e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002370:	e073      	b.n	800245a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3360      	adds	r3, #96	; 0x60
 8002380:	2202      	movs	r2, #2
 8002382:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800239a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023a2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023b6:	e050      	b.n	800245a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d122      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3360      	adds	r3, #96	; 0x60
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023f4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023fc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e023      	b.n	800245a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3361      	adds	r3, #97	; 0x61
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b07      	cmp	r3, #7
 8002424:	d119      	bne.n	800245a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	335c      	adds	r3, #92	; 0x5c
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	202c      	movs	r0, #44	; 0x2c
 800243e:	fb00 f303 	mul.w	r3, r0, r3
 8002442:	440b      	add	r3, r1
 8002444:	335c      	adds	r3, #92	; 0x5c
 8002446:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	3360      	adds	r3, #96	; 0x60
 8002456:	2204      	movs	r2, #4
 8002458:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	461a      	mov	r2, r3
 8002468:	2302      	movs	r3, #2
 800246a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	b2d9      	uxtb	r1, r3
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	202c      	movs	r0, #44	; 0x2c
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	4413      	add	r3, r2
 800247c:	3360      	adds	r3, #96	; 0x60
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f005 fff8 	bl	8008478 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002488:	e081      	b.n	800258e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b10      	cmp	r3, #16
 800249e:	d176      	bne.n	800258e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	333f      	adds	r3, #63	; 0x3f
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d121      	bne.n	80024f8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	335c      	adds	r3, #92	; 0x5c
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	0151      	lsls	r1, r2, #5
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	440a      	add	r2, r1
 80024dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 fe04 	bl	80060fe <USB_HC_Halt>
 80024f6:	e041      	b.n	800257c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	333f      	adds	r3, #63	; 0x3f
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	333f      	adds	r3, #63	; 0x3f
 800251a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800251c:	2b02      	cmp	r3, #2
 800251e:	d12d      	bne.n	800257c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	335c      	adds	r3, #92	; 0x5c
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d120      	bne.n	800257c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3361      	adds	r3, #97	; 0x61
 8002548:	2203      	movs	r2, #3
 800254a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	0151      	lsls	r1, r2, #5
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	440a      	add	r2, r1
 8002562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fdc1 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	461a      	mov	r2, r3
 800258a:	2310      	movs	r3, #16
 800258c:	6093      	str	r3, [r2, #8]
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b088      	sub	sp, #32
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d119      	bne.n	80025fa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	461a      	mov	r2, r3
 80025d4:	2304      	movs	r3, #4
 80025d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	0151      	lsls	r1, r2, #5
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	440a      	add	r2, r1
 80025ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025f8:	e3ca      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b20      	cmp	r3, #32
 800260e:	d13e      	bne.n	800268e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	461a      	mov	r2, r3
 800261e:	2320      	movs	r3, #32
 8002620:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	333d      	adds	r3, #61	; 0x3d
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	f040 83ac 	bne.w	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	333d      	adds	r3, #61	; 0x3d
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3360      	adds	r3, #96	; 0x60
 8002658:	2202      	movs	r2, #2
 800265a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	0151      	lsls	r1, r2, #5
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	440a      	add	r2, r1
 8002672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f003 fd39 	bl	80060fe <USB_HC_Halt>
}
 800268c:	e380      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a4:	d122      	bne.n	80026ec <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	0151      	lsls	r1, r2, #5
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	440a      	add	r2, r1
 80026bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fd14 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e8:	6093      	str	r3, [r2, #8]
}
 80026ea:	e351      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d150      	bne.n	80027a4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	335c      	adds	r3, #92	; 0x5c
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d111      	bne.n	800274e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	333d      	adds	r3, #61	; 0x3d
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	461a      	mov	r2, r3
 800274a:	2340      	movs	r3, #64	; 0x40
 800274c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	0151      	lsls	r1, r2, #5
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	440a      	add	r2, r1
 8002764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fcc0 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2301      	movs	r3, #1
 800278e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3361      	adds	r3, #97	; 0x61
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
}
 80027a2:	e2f5      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d13c      	bne.n	8002834 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3361      	adds	r3, #97	; 0x61
 80027c8:	2204      	movs	r2, #4
 80027ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	333d      	adds	r3, #61	; 0x3d
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	335c      	adds	r3, #92	; 0x5c
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fc6f 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	461a      	mov	r2, r3
 800282e:	2340      	movs	r3, #64	; 0x40
 8002830:	6093      	str	r3, [r2, #8]
}
 8002832:	e2ad      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b08      	cmp	r3, #8
 8002848:	d12a      	bne.n	80028a0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	2308      	movs	r3, #8
 800285a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	440a      	add	r2, r1
 8002872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fc39 	bl	80060fe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3361      	adds	r3, #97	; 0x61
 800289a:	2205      	movs	r2, #5
 800289c:	701a      	strb	r2, [r3, #0]
}
 800289e:	e277      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d150      	bne.n	8002958 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	335c      	adds	r3, #92	; 0x5c
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3361      	adds	r3, #97	; 0x61
 80028d6:	2203      	movs	r2, #3
 80028d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	333d      	adds	r3, #61	; 0x3d
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d112      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	333c      	adds	r3, #60	; 0x3c
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	333d      	adds	r3, #61	; 0x3d
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	0151      	lsls	r1, r2, #5
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	440a      	add	r2, r1
 800292a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f003 fbdd 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	2310      	movs	r3, #16
 8002954:	6093      	str	r3, [r2, #8]
}
 8002956:	e21b      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d174      	bne.n	8002a58 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d121      	bne.n	80029ba <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3361      	adds	r3, #97	; 0x61
 8002984:	2206      	movs	r2, #6
 8002986:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	0151      	lsls	r1, r2, #5
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	440a      	add	r2, r1
 800299e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fba3 	bl	80060fe <USB_HC_Halt>
 80029b8:	e044      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	335c      	adds	r3, #92	; 0x5c
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	202c      	movs	r0, #44	; 0x2c
 80029d2:	fb00 f303 	mul.w	r3, r0, r3
 80029d6:	440b      	add	r3, r1
 80029d8:	335c      	adds	r3, #92	; 0x5c
 80029da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	335c      	adds	r3, #92	; 0x5c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d920      	bls.n	8002a32 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	335c      	adds	r3, #92	; 0x5c
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3360      	adds	r3, #96	; 0x60
 8002a10:	2204      	movs	r2, #4
 8002a12:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	b2d9      	uxtb	r1, r3
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	202c      	movs	r0, #44	; 0x2c
 8002a1e:	fb00 f303 	mul.w	r3, r0, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3360      	adds	r3, #96	; 0x60
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f005 fd24 	bl	8008478 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a30:	e008      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3360      	adds	r3, #96	; 0x60
 8002a40:	2202      	movs	r2, #2
 8002a42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	6093      	str	r3, [r2, #8]
}
 8002a56:	e19b      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6e:	d134      	bne.n	8002ada <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	0151      	lsls	r1, r2, #5
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	440a      	add	r2, r1
 8002a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 fb2f 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2310      	movs	r3, #16
 8002ab0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3361      	adds	r3, #97	; 0x61
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	701a      	strb	r2, [r3, #0]
}
 8002ad8:	e15a      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	f040 814f 	bne.w	8002d90 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	0151      	lsls	r1, r2, #5
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	440a      	add	r2, r1
 8002b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0c:	f023 0302 	bic.w	r3, r3, #2
 8002b10:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3361      	adds	r3, #97	; 0x61
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d17d      	bne.n	8002c22 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3360      	adds	r3, #96	; 0x60
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	333f      	adds	r3, #63	; 0x3f
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d00a      	beq.n	8002b62 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	333f      	adds	r3, #63	; 0x3f
 8002b5a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	f040 8100 	bne.w	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d113      	bne.n	8002b92 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3355      	adds	r3, #85	; 0x55
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	f083 0301 	eor.w	r3, r3, #1
 8002b7e:	b2d8      	uxtb	r0, r3
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3355      	adds	r3, #85	; 0x55
 8002b8e:	4602      	mov	r2, r0
 8002b90:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	f040 80e3 	bne.w	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	334c      	adds	r3, #76	; 0x4c
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80d8 	beq.w	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	334c      	adds	r3, #76	; 0x4c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	202c      	movs	r0, #44	; 0x2c
 8002bc8:	fb00 f202 	mul.w	r2, r0, r2
 8002bcc:	440a      	add	r2, r1
 8002bce:	3240      	adds	r2, #64	; 0x40
 8002bd0:	8812      	ldrh	r2, [r2, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	202c      	movs	r0, #44	; 0x2c
 8002bdc:	fb00 f202 	mul.w	r2, r0, r2
 8002be0:	440a      	add	r2, r1
 8002be2:	3240      	adds	r2, #64	; 0x40
 8002be4:	8812      	ldrh	r2, [r2, #0]
 8002be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80b5 	beq.w	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3355      	adds	r3, #85	; 0x55
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2d8      	uxtb	r0, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3355      	adds	r3, #85	; 0x55
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e09f      	b.n	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3361      	adds	r3, #97	; 0x61
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d109      	bne.n	8002c4a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3360      	adds	r3, #96	; 0x60
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e08b      	b.n	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3361      	adds	r3, #97	; 0x61
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d109      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3360      	adds	r3, #96	; 0x60
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e077      	b.n	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3361      	adds	r3, #97	; 0x61
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d109      	bne.n	8002c9a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3360      	adds	r3, #96	; 0x60
 8002c94:	2205      	movs	r2, #5
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e063      	b.n	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3361      	adds	r3, #97	; 0x61
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d009      	beq.n	8002cc2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3361      	adds	r3, #97	; 0x61
 8002cbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d14f      	bne.n	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	335c      	adds	r3, #92	; 0x5c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	202c      	movs	r0, #44	; 0x2c
 8002cda:	fb00 f303 	mul.w	r3, r0, r3
 8002cde:	440b      	add	r3, r1
 8002ce0:	335c      	adds	r3, #92	; 0x5c
 8002ce2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	335c      	adds	r3, #92	; 0x5c
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d912      	bls.n	8002d1e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	335c      	adds	r3, #92	; 0x5c
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3360      	adds	r3, #96	; 0x60
 8002d18:	2204      	movs	r2, #4
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e021      	b.n	8002d62 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3360      	adds	r3, #96	; 0x60
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d46:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d4e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2302      	movs	r3, #2
 8002d72:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	b2d9      	uxtb	r1, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	202c      	movs	r0, #44	; 0x2c
 8002d7e:	fb00 f303 	mul.w	r3, r0, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3360      	adds	r3, #96	; 0x60
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f005 fb74 	bl	8008478 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d90:	bf00      	nop
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	0c5b      	lsrs	r3, r3, #17
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dcc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d004      	beq.n	8002dde <HCD_RXQLVL_IRQHandler+0x46>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	f000 80a9 	beq.w	8002f2e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ddc:	e0aa      	b.n	8002f34 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a6 	beq.w	8002f32 <HCD_RXQLVL_IRQHandler+0x19a>
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3344      	adds	r3, #68	; 0x44
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 809b 	beq.w	8002f32 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3350      	adds	r3, #80	; 0x50
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	441a      	add	r2, r3
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	202c      	movs	r0, #44	; 0x2c
 8002e16:	fb00 f303 	mul.w	r3, r0, r3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	334c      	adds	r3, #76	; 0x4c
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d87a      	bhi.n	8002f1a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3344      	adds	r3, #68	; 0x44
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f002 fcd7 	bl	80057f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3344      	adds	r3, #68	; 0x44
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	441a      	add	r2, r3
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	202c      	movs	r0, #44	; 0x2c
 8002e5c:	fb00 f303 	mul.w	r3, r0, r3
 8002e60:	440b      	add	r3, r1
 8002e62:	3344      	adds	r3, #68	; 0x44
 8002e64:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3350      	adds	r3, #80	; 0x50
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	441a      	add	r2, r3
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	202c      	movs	r0, #44	; 0x2c
 8002e80:	fb00 f303 	mul.w	r3, r0, r3
 8002e84:	440b      	add	r3, r1
 8002e86:	3350      	adds	r3, #80	; 0x50
 8002e88:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	0cdb      	lsrs	r3, r3, #19
 8002e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3340      	adds	r3, #64	; 0x40
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d13c      	bne.n	8002f32 <HCD_RXQLVL_IRQHandler+0x19a>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d039      	beq.n	8002f32 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ed4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002edc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	461a      	mov	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3354      	adds	r3, #84	; 0x54
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f083 0301 	eor.w	r3, r3, #1
 8002f04:	b2d8      	uxtb	r0, r3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3354      	adds	r3, #84	; 0x54
 8002f14:	4602      	mov	r2, r0
 8002f16:	701a      	strb	r2, [r3, #0]
      break;
 8002f18:	e00b      	b.n	8002f32 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3360      	adds	r3, #96	; 0x60
 8002f28:	2204      	movs	r2, #4
 8002f2a:	701a      	strb	r2, [r3, #0]
      break;
 8002f2c:	e001      	b.n	8002f32 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f32:	bf00      	nop
  }
}
 8002f34:	bf00      	nop
 8002f36:	3728      	adds	r7, #40	; 0x28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d10b      	bne.n	8002f8c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d102      	bne.n	8002f84 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f005 fa5e 	bl	8008440 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d132      	bne.n	8002ffc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d126      	bne.n	8002ff6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d113      	bne.n	8002fd8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fba:	d106      	bne.n	8002fca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 fd74 	bl	8005ab0 <USB_InitFSLSPClkSel>
 8002fc8:	e011      	b.n	8002fee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 fd6d 	bl	8005ab0 <USB_InitFSLSPClkSel>
 8002fd6:	e00a      	b.n	8002fee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f005 fa50 	bl	8008494 <HAL_HCD_PortEnabled_Callback>
 8002ff4:	e002      	b.n	8002ffc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f005 fa5a 	bl	80084b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d103      	bne.n	800300e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f043 0320 	orr.w	r3, r3, #32
 800300c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	6013      	str	r3, [r2, #0]
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e12b      	b.n	800328e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd fd0e 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	; 0x24
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003088:	f001 f9fc 	bl	8004484 <HAL_RCC_GetPCLK1Freq>
 800308c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a81      	ldr	r2, [pc, #516]	; (8003298 <HAL_I2C_Init+0x274>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d807      	bhi.n	80030a8 <HAL_I2C_Init+0x84>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a80      	ldr	r2, [pc, #512]	; (800329c <HAL_I2C_Init+0x278>)
 800309c:	4293      	cmp	r3, r2
 800309e:	bf94      	ite	ls
 80030a0:	2301      	movls	r3, #1
 80030a2:	2300      	movhi	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e006      	b.n	80030b6 <HAL_I2C_Init+0x92>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a7d      	ldr	r2, [pc, #500]	; (80032a0 <HAL_I2C_Init+0x27c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	bf94      	ite	ls
 80030b0:	2301      	movls	r3, #1
 80030b2:	2300      	movhi	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0e7      	b.n	800328e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a78      	ldr	r2, [pc, #480]	; (80032a4 <HAL_I2C_Init+0x280>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9b      	lsrs	r3, r3, #18
 80030c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a6a      	ldr	r2, [pc, #424]	; (8003298 <HAL_I2C_Init+0x274>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d802      	bhi.n	80030f8 <HAL_I2C_Init+0xd4>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3301      	adds	r3, #1
 80030f6:	e009      	b.n	800310c <HAL_I2C_Init+0xe8>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	4a69      	ldr	r2, [pc, #420]	; (80032a8 <HAL_I2C_Init+0x284>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	3301      	adds	r3, #1
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800311e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	495c      	ldr	r1, [pc, #368]	; (8003298 <HAL_I2C_Init+0x274>)
 8003128:	428b      	cmp	r3, r1
 800312a:	d819      	bhi.n	8003160 <HAL_I2C_Init+0x13c>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1e59      	subs	r1, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fbb1 f3f3 	udiv	r3, r1, r3
 800313a:	1c59      	adds	r1, r3, #1
 800313c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003140:	400b      	ands	r3, r1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_I2C_Init+0x138>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e59      	subs	r1, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fbb1 f3f3 	udiv	r3, r1, r3
 8003154:	3301      	adds	r3, #1
 8003156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315a:	e051      	b.n	8003200 <HAL_I2C_Init+0x1dc>
 800315c:	2304      	movs	r3, #4
 800315e:	e04f      	b.n	8003200 <HAL_I2C_Init+0x1dc>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d111      	bne.n	800318c <HAL_I2C_Init+0x168>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e012      	b.n	80031b2 <HAL_I2C_Init+0x18e>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e58      	subs	r0, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Init+0x196>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e022      	b.n	8003200 <HAL_I2C_Init+0x1dc>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10e      	bne.n	80031e0 <HAL_I2C_Init+0x1bc>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1e58      	subs	r0, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6859      	ldr	r1, [r3, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	440b      	add	r3, r1
 80031d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031de:	e00f      	b.n	8003200 <HAL_I2C_Init+0x1dc>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1e58      	subs	r0, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	0099      	lsls	r1, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	6809      	ldr	r1, [r1, #0]
 8003204:	4313      	orrs	r3, r2
 8003206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800322e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6911      	ldr	r1, [r2, #16]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68d2      	ldr	r2, [r2, #12]
 800323a:	4311      	orrs	r1, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	000186a0 	.word	0x000186a0
 800329c:	001e847f 	.word	0x001e847f
 80032a0:	003d08ff 	.word	0x003d08ff
 80032a4:	431bde83 	.word	0x431bde83
 80032a8:	10624dd3 	.word	0x10624dd3

080032ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e128      	b.n	8003510 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a90      	ldr	r2, [pc, #576]	; (8003518 <HAL_I2S_Init+0x26c>)
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7fd fc0f 	bl	8000afc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032f4:	f023 030f 	bic.w	r3, r3, #15
 80032f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2202      	movs	r2, #2
 8003300:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d060      	beq.n	80033cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003312:	2310      	movs	r3, #16
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e001      	b.n	800331c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003318:	2320      	movs	r3, #32
 800331a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b20      	cmp	r3, #32
 8003322:	d802      	bhi.n	800332a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800332a:	2001      	movs	r0, #1
 800332c:	f001 f9a0 	bl	8004670 <HAL_RCCEx_GetPeriphCLKFreq>
 8003330:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333a:	d125      	bne.n	8003388 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	fbb2 f2f3 	udiv	r2, r2, r3
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	3305      	adds	r3, #5
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e01f      	b.n	80033a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	461a      	mov	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	3305      	adds	r3, #5
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	e00e      	b.n	80033a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	3305      	adds	r3, #5
 80033a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4a5c      	ldr	r2, [pc, #368]	; (800351c <HAL_I2S_Init+0x270>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e003      	b.n	80033d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033cc:	2302      	movs	r3, #2
 80033ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d902      	bls.n	80033e0 <HAL_I2S_Init+0x134>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2bff      	cmp	r3, #255	; 0xff
 80033de:	d907      	bls.n	80033f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e08f      	b.n	8003510 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	ea42 0103 	orr.w	r1, r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	430a      	orrs	r2, r1
 8003402:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800340e:	f023 030f 	bic.w	r3, r3, #15
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6851      	ldr	r1, [r2, #4]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6892      	ldr	r2, [r2, #8]
 800341a:	4311      	orrs	r1, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68d2      	ldr	r2, [r2, #12]
 8003420:	4311      	orrs	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6992      	ldr	r2, [r2, #24]
 8003426:	430a      	orrs	r2, r1
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003432:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d161      	bne.n	8003500 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a38      	ldr	r2, [pc, #224]	; (8003520 <HAL_I2S_Init+0x274>)
 8003440:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a37      	ldr	r2, [pc, #220]	; (8003524 <HAL_I2S_Init+0x278>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_I2S_Init+0x1a4>
 800344c:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_I2S_Init+0x27c>)
 800344e:	e001      	b.n	8003454 <HAL_I2S_Init+0x1a8>
 8003450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	4932      	ldr	r1, [pc, #200]	; (8003524 <HAL_I2S_Init+0x278>)
 800345c:	428a      	cmp	r2, r1
 800345e:	d101      	bne.n	8003464 <HAL_I2S_Init+0x1b8>
 8003460:	4a31      	ldr	r2, [pc, #196]	; (8003528 <HAL_I2S_Init+0x27c>)
 8003462:	e001      	b.n	8003468 <HAL_I2S_Init+0x1bc>
 8003464:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003468:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800346c:	f023 030f 	bic.w	r3, r3, #15
 8003470:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_I2S_Init+0x278>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_I2S_Init+0x1d4>
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_I2S_Init+0x27c>)
 800347e:	e001      	b.n	8003484 <HAL_I2S_Init+0x1d8>
 8003480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003484:	2202      	movs	r2, #2
 8003486:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <HAL_I2S_Init+0x278>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_I2S_Init+0x1ea>
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_I2S_Init+0x27c>)
 8003494:	e001      	b.n	800349a <HAL_I2S_Init+0x1ee>
 8003496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a6:	d003      	beq.n	80034b0 <HAL_I2S_Init+0x204>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	e001      	b.n	80034bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034da:	4313      	orrs	r3, r2
 80034dc:	b29a      	uxth	r2, r3
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a0d      	ldr	r2, [pc, #52]	; (8003524 <HAL_I2S_Init+0x278>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <HAL_I2S_Init+0x24c>
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_I2S_Init+0x27c>)
 80034f6:	e001      	b.n	80034fc <HAL_I2S_Init+0x250>
 80034f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034fc:	897a      	ldrh	r2, [r7, #10]
 80034fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	08003623 	.word	0x08003623
 800351c:	cccccccd 	.word	0xcccccccd
 8003520:	08003739 	.word	0x08003739
 8003524:	40003800 	.word	0x40003800
 8003528:	40003400 	.word	0x40003400

0800352c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10e      	bne.n	80035bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffb8 	bl	800352c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	b292      	uxth	r2, r2
 80035d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	1c9a      	adds	r2, r3, #2
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10e      	bne.n	800361a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800360a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff93 	bl	8003540 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b04      	cmp	r3, #4
 800363c:	d13a      	bne.n	80036b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d109      	bne.n	800365c <I2S_IRQHandler+0x3a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d102      	bne.n	800365c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ffb4 	bl	80035c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d126      	bne.n	80036b4 <I2S_IRQHandler+0x92>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d11f      	bne.n	80036b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003682:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0202 	orr.w	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff50 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d136      	bne.n	800372e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d109      	bne.n	80036de <I2S_IRQHandler+0xbc>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d102      	bne.n	80036de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff45 	bl	8003568 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d122      	bne.n	800372e <I2S_IRQHandler+0x10c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d11b      	bne.n	800372e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003704:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	f043 0204 	orr.w	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff13 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4aa2      	ldr	r2, [pc, #648]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003752:	4ba2      	ldr	r3, [pc, #648]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003754:	e001      	b.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a9b      	ldr	r2, [pc, #620]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003770:	4b9a      	ldr	r3, [pc, #616]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003772:	e001      	b.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003784:	d004      	beq.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 8099 	bne.w	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b02      	cmp	r3, #2
 8003798:	d107      	bne.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f925 	bl	80039f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f9c8 	bl	8003b54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d13a      	bne.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d035      	beq.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7e      	ldr	r2, [pc, #504]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037e2:	4b7e      	ldr	r3, [pc, #504]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e4:	e001      	b.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4979      	ldr	r1, [pc, #484]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037f2:	428b      	cmp	r3, r1
 80037f4:	d101      	bne.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037f6:	4b79      	ldr	r3, [pc, #484]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037f8:	e001      	b.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003802:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003812:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fe88 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b08      	cmp	r3, #8
 800384c:	f040 80be 	bne.w	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80b8 	beq.w	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003876:	4b59      	ldr	r3, [pc, #356]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003878:	e001      	b.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800387a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4954      	ldr	r1, [pc, #336]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003886:	428b      	cmp	r3, r1
 8003888:	d101      	bne.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800388a:	4b54      	ldr	r3, [pc, #336]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800388c:	e001      	b.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800388e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003892:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003896:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fe4a 	bl	8003554 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038c0:	e084      	b.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d107      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8be 	bl	8003a58 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d107      	bne.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8fd 	bl	8003af0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d12f      	bne.n	8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d02a      	beq.n	8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003918:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003924:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003926:	e001      	b.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4929      	ldr	r1, [pc, #164]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003934:	428b      	cmp	r3, r1
 8003936:	d101      	bne.n	800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003938:	4b28      	ldr	r3, [pc, #160]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800393a:	e001      	b.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003940:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003944:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f043 0202 	orr.w	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fdfa 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b08      	cmp	r3, #8
 8003968:	d131      	bne.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02c      	beq.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003980:	e001      	b.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4912      	ldr	r1, [pc, #72]	; (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800398e:	428b      	cmp	r3, r1
 8003990:	d101      	bne.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003994:	e001      	b.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800399e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ae:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fdc5 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ca:	e000      	b.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039cc:	bf00      	nop
}
 80039ce:	bf00      	nop
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40003800 	.word	0x40003800
 80039dc:	40003400 	.word	0x40003400

080039e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c99      	adds	r1, r3, #2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6251      	str	r1, [r2, #36]	; 0x24
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d113      	bne.n	8003a4e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ffc9 	bl	80039e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	1c99      	adds	r1, r3, #2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6251      	str	r1, [r2, #36]	; 0x24
 8003a6a:	8819      	ldrh	r1, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <I2SEx_TxISR_I2SExt+0x90>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <I2SEx_TxISR_I2SExt+0x22>
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <I2SEx_TxISR_I2SExt+0x94>)
 8003a78:	e001      	b.n	8003a7e <I2SEx_TxISR_I2SExt+0x26>
 8003a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7e:	460a      	mov	r2, r1
 8003a80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d121      	bne.n	8003ade <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <I2SEx_TxISR_I2SExt+0x90>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <I2SEx_TxISR_I2SExt+0x50>
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <I2SEx_TxISR_I2SExt+0x94>)
 8003aa6:	e001      	b.n	8003aac <I2SEx_TxISR_I2SExt+0x54>
 8003aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <I2SEx_TxISR_I2SExt+0x90>)
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	d101      	bne.n	8003abc <I2SEx_TxISR_I2SExt+0x64>
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <I2SEx_TxISR_I2SExt+0x94>)
 8003aba:	e001      	b.n	8003ac0 <I2SEx_TxISR_I2SExt+0x68>
 8003abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff81 	bl	80039e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40003800 	.word	0x40003800
 8003aec:	40003400 	.word	0x40003400

08003af0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68d8      	ldr	r0, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	1c99      	adds	r1, r3, #2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b08:	b282      	uxth	r2, r0
 8003b0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d113      	bne.n	8003b4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ff4a 	bl	80039e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a20      	ldr	r2, [pc, #128]	; (8003be4 <I2SEx_RxISR_I2SExt+0x90>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <I2SEx_RxISR_I2SExt+0x16>
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <I2SEx_RxISR_I2SExt+0x94>)
 8003b68:	e001      	b.n	8003b6e <I2SEx_RxISR_I2SExt+0x1a>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6e:	68d8      	ldr	r0, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	1c99      	adds	r1, r3, #2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b7a:	b282      	uxth	r2, r0
 8003b7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <I2SEx_RxISR_I2SExt+0x90>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <I2SEx_RxISR_I2SExt+0x50>
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <I2SEx_RxISR_I2SExt+0x94>)
 8003ba2:	e001      	b.n	8003ba8 <I2SEx_RxISR_I2SExt+0x54>
 8003ba4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	490d      	ldr	r1, [pc, #52]	; (8003be4 <I2SEx_RxISR_I2SExt+0x90>)
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	d101      	bne.n	8003bb8 <I2SEx_RxISR_I2SExt+0x64>
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <I2SEx_RxISR_I2SExt+0x94>)
 8003bb6:	e001      	b.n	8003bbc <I2SEx_RxISR_I2SExt+0x68>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff03 	bl	80039e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40003800 	.word	0x40003800
 8003be8:	40003400 	.word	0x40003400

08003bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e264      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d075      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0a:	4ba3      	ldr	r3, [pc, #652]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d00c      	beq.n	8003c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c16:	4ba0      	ldr	r3, [pc, #640]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d112      	bne.n	8003c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c22:	4b9d      	ldr	r3, [pc, #628]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2e:	d10b      	bne.n	8003c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	4b99      	ldr	r3, [pc, #612]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d05b      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x108>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d157      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e23f      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c50:	d106      	bne.n	8003c60 <HAL_RCC_OscConfig+0x74>
 8003c52:	4b91      	ldr	r3, [pc, #580]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a90      	ldr	r2, [pc, #576]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e01d      	b.n	8003c9c <HAL_RCC_OscConfig+0xb0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x98>
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a8a      	ldr	r2, [pc, #552]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a87      	ldr	r2, [pc, #540]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e00b      	b.n	8003c9c <HAL_RCC_OscConfig+0xb0>
 8003c84:	4b84      	ldr	r3, [pc, #528]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a83      	ldr	r2, [pc, #524]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b81      	ldr	r3, [pc, #516]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a80      	ldr	r2, [pc, #512]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d013      	beq.n	8003ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f956 	bl	8000f54 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fd f952 	bl	8000f54 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e204      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	4b76      	ldr	r3, [pc, #472]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0xc0>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd f942 	bl	8000f54 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f93e 	bl	8000f54 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e1f0      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0xe8>
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d063      	beq.n	8003dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d02:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0e:	4b62      	ldr	r3, [pc, #392]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d11c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1a:	4b5f      	ldr	r3, [pc, #380]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d116      	bne.n	8003d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	4b5c      	ldr	r3, [pc, #368]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RCC_OscConfig+0x152>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d001      	beq.n	8003d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e1c4      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4952      	ldr	r1, [pc, #328]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	e03a      	b.n	8003dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d5c:	4b4f      	ldr	r3, [pc, #316]	; (8003e9c <HAL_RCC_OscConfig+0x2b0>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd f8f7 	bl	8000f54 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d6a:	f7fd f8f3 	bl	8000f54 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1a5      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7c:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d88:	4b43      	ldr	r3, [pc, #268]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4940      	ldr	r1, [pc, #256]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]
 8003d9c:	e015      	b.n	8003dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <HAL_RCC_OscConfig+0x2b0>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd f8d6 	bl	8000f54 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dac:	f7fd f8d2 	bl	8000f54 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e184      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d030      	beq.n	8003e38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d016      	beq.n	8003e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <HAL_RCC_OscConfig+0x2b4>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fd f8b6 	bl	8000f54 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dec:	f7fd f8b2 	bl	8000f54 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e164      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x200>
 8003e0a:	e015      	b.n	8003e38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCC_OscConfig+0x2b4>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e12:	f7fd f89f 	bl	8000f54 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1a:	f7fd f89b 	bl	8000f54 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e14d      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80a0 	beq.w	8003f86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10f      	bne.n	8003e76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_OscConfig+0x2b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d121      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCC_OscConfig+0x2b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <HAL_RCC_OscConfig+0x2b8>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8e:	f7fd f861 	bl	8000f54 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	e011      	b.n	8003eba <HAL_RCC_OscConfig+0x2ce>
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	42470000 	.word	0x42470000
 8003ea0:	42470e80 	.word	0x42470e80
 8003ea4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea8:	f7fd f854 	bl	8000f54 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e106      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eba:	4b85      	ldr	r3, [pc, #532]	; (80040d0 <HAL_RCC_OscConfig+0x4e4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d106      	bne.n	8003edc <HAL_RCC_OscConfig+0x2f0>
 8003ece:	4b81      	ldr	r3, [pc, #516]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a80      	ldr	r2, [pc, #512]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	e01c      	b.n	8003f16 <HAL_RCC_OscConfig+0x32a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCC_OscConfig+0x312>
 8003ee4:	4b7b      	ldr	r3, [pc, #492]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	4a7a      	ldr	r2, [pc, #488]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003eea:	f043 0304 	orr.w	r3, r3, #4
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef0:	4b78      	ldr	r3, [pc, #480]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a77      	ldr	r2, [pc, #476]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
 8003efc:	e00b      	b.n	8003f16 <HAL_RCC_OscConfig+0x32a>
 8003efe:	4b75      	ldr	r3, [pc, #468]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	4a74      	ldr	r2, [pc, #464]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0a:	4b72      	ldr	r3, [pc, #456]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	4a71      	ldr	r2, [pc, #452]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f10:	f023 0304 	bic.w	r3, r3, #4
 8003f14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d015      	beq.n	8003f4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fd f819 	bl	8000f54 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f26:	f7fd f815 	bl	8000f54 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0c5      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ee      	beq.n	8003f26 <HAL_RCC_OscConfig+0x33a>
 8003f48:	e014      	b.n	8003f74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd f803 	bl	8000f54 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fc ffff 	bl	8000f54 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0af      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f68:	4b5a      	ldr	r3, [pc, #360]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ee      	bne.n	8003f52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d105      	bne.n	8003f86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7a:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	4a55      	ldr	r2, [pc, #340]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 809b 	beq.w	80040c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f90:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d05c      	beq.n	8004056 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d141      	bne.n	8004028 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <HAL_RCC_OscConfig+0x4ec>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003faa:	f7fc ffd3 	bl	8000f54 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb2:	f7fc ffcf 	bl	8000f54 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e081      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	019b      	lsls	r3, r3, #6
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	4937      	ldr	r1, [pc, #220]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffa:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCC_OscConfig+0x4ec>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fc ffa8 	bl	8000f54 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004008:	f7fc ffa4 	bl	8000f54 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e056      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401a:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x41c>
 8004026:	e04e      	b.n	80040c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_OscConfig+0x4ec>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fc ff91 	bl	8000f54 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004036:	f7fc ff8d 	bl	8000f54 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e03f      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004048:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x44a>
 8004054:	e037      	b.n	80040c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e032      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004062:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <HAL_RCC_OscConfig+0x4e8>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d028      	beq.n	80040c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d121      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d11a      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004092:	4013      	ands	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004098:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800409a:	4293      	cmp	r3, r2
 800409c:	d111      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40007000 	.word	0x40007000
 80040d4:	40023800 	.word	0x40023800
 80040d8:	42470060 	.word	0x42470060

080040dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0cc      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b68      	ldr	r3, [pc, #416]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d90c      	bls.n	8004118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b65      	ldr	r3, [pc, #404]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b63      	ldr	r3, [pc, #396]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0b8      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004130:	4b59      	ldr	r3, [pc, #356]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a58      	ldr	r2, [pc, #352]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800413a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004148:	4b53      	ldr	r3, [pc, #332]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a52      	ldr	r2, [pc, #328]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004154:	4b50      	ldr	r3, [pc, #320]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	494d      	ldr	r1, [pc, #308]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d044      	beq.n	80041fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d119      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e07f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d003      	beq.n	800419a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	2b03      	cmp	r3, #3
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419a:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e06f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e067      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ba:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f023 0203 	bic.w	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4934      	ldr	r1, [pc, #208]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041cc:	f7fc fec2 	bl	8000f54 <HAL_GetTick>
 80041d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d4:	f7fc febe 	bl	8000f54 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e04f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 020c 	and.w	r2, r3, #12
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d1eb      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fc:	4b25      	ldr	r3, [pc, #148]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d20c      	bcs.n	8004224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e032      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004230:	4b19      	ldr	r3, [pc, #100]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4916      	ldr	r1, [pc, #88]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424e:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	490e      	ldr	r1, [pc, #56]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004262:	f000 f821 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004266:	4602      	mov	r2, r0
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	490a      	ldr	r1, [pc, #40]	; (800429c <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	5ccb      	ldrb	r3, [r1, r3]
 8004276:	fa22 f303 	lsr.w	r3, r2, r3
 800427a:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc fe22 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40023c00 	.word	0x40023c00
 8004298:	40023800 	.word	0x40023800
 800429c:	08008ae4 	.word	0x08008ae4
 80042a0:	20000000 	.word	0x20000000
 80042a4:	20000004 	.word	0x20000004

080042a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	2300      	movs	r3, #0
 80042ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c0:	4b67      	ldr	r3, [pc, #412]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d00d      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x40>
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	f200 80bd 	bhi.w	800444c <HAL_RCC_GetSysClockFreq+0x1a4>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x34>
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042da:	e0b7      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b61      	ldr	r3, [pc, #388]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042de:	60bb      	str	r3, [r7, #8]
       break;
 80042e0:	e0b7      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042e2:	4b61      	ldr	r3, [pc, #388]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042e4:	60bb      	str	r3, [r7, #8]
      break;
 80042e6:	e0b4      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e8:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042f2:	4b5b      	ldr	r3, [pc, #364]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d04d      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fe:	4b58      	ldr	r3, [pc, #352]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	461a      	mov	r2, r3
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	ea02 0800 	and.w	r8, r2, r0
 8004316:	ea03 0901 	and.w	r9, r3, r1
 800431a:	4640      	mov	r0, r8
 800431c:	4649      	mov	r1, r9
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	014b      	lsls	r3, r1, #5
 8004328:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800432c:	0142      	lsls	r2, r0, #5
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	ebb0 0008 	subs.w	r0, r0, r8
 8004336:	eb61 0109 	sbc.w	r1, r1, r9
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	018b      	lsls	r3, r1, #6
 8004344:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004348:	0182      	lsls	r2, r0, #6
 800434a:	1a12      	subs	r2, r2, r0
 800434c:	eb63 0301 	sbc.w	r3, r3, r1
 8004350:	f04f 0000 	mov.w	r0, #0
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	00d9      	lsls	r1, r3, #3
 800435a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800435e:	00d0      	lsls	r0, r2, #3
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	eb12 0208 	adds.w	r2, r2, r8
 8004368:	eb43 0309 	adc.w	r3, r3, r9
 800436c:	f04f 0000 	mov.w	r0, #0
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	0259      	lsls	r1, r3, #9
 8004376:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800437a:	0250      	lsls	r0, r2, #9
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	461a      	mov	r2, r3
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	f7fb ff1c 	bl	80001c8 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4613      	mov	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e04a      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439a:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	461a      	mov	r2, r3
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	ea02 0400 	and.w	r4, r2, r0
 80043b2:	ea03 0501 	and.w	r5, r3, r1
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	014b      	lsls	r3, r1, #5
 80043c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043c8:	0142      	lsls	r2, r0, #5
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	1b00      	subs	r0, r0, r4
 80043d0:	eb61 0105 	sbc.w	r1, r1, r5
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	018b      	lsls	r3, r1, #6
 80043de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043e2:	0182      	lsls	r2, r0, #6
 80043e4:	1a12      	subs	r2, r2, r0
 80043e6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ea:	f04f 0000 	mov.w	r0, #0
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	00d9      	lsls	r1, r3, #3
 80043f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043f8:	00d0      	lsls	r0, r2, #3
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	1912      	adds	r2, r2, r4
 8004400:	eb45 0303 	adc.w	r3, r5, r3
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	0299      	lsls	r1, r3, #10
 800440e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004412:	0290      	lsls	r0, r2, #10
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	461a      	mov	r2, r3
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	f7fb fed0 	bl	80001c8 <__aeabi_uldivmod>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4613      	mov	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	3301      	adds	r3, #1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	60bb      	str	r3, [r7, #8]
      break;
 800444a:	e002      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800444e:	60bb      	str	r3, [r7, #8]
      break;
 8004450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004452:	68bb      	ldr	r3, [r7, #8]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800
 8004464:	00f42400 	.word	0x00f42400
 8004468:	007a1200 	.word	0x007a1200

0800446c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <HAL_RCC_GetHCLKFreq+0x14>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000000 	.word	0x20000000

08004484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004488:	f7ff fff0 	bl	800446c <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	0a9b      	lsrs	r3, r3, #10
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4903      	ldr	r1, [pc, #12]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	08008af4 	.word	0x08008af4

080044ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d035      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044d4:	4b62      	ldr	r3, [pc, #392]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044da:	f7fc fd3b 	bl	8000f54 <HAL_GetTick>
 80044de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044e2:	f7fc fd37 	bl	8000f54 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e0b0      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f4:	4b5b      	ldr	r3, [pc, #364]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f0      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	019a      	lsls	r2, r3, #6
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	071b      	lsls	r3, r3, #28
 800450c:	4955      	ldr	r1, [pc, #340]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004514:	4b52      	ldr	r3, [pc, #328]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800451a:	f7fc fd1b 	bl	8000f54 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004522:	f7fc fd17 	bl	8000f54 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e090      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004534:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8083 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b44      	ldr	r3, [pc, #272]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a43      	ldr	r2, [pc, #268]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	; 0x40
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800456a:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004576:	f7fc fced 	bl	8000f54 <HAL_GetTick>
 800457a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fc fce9 	bl	8000f54 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e062      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004590:	4b35      	ldr	r3, [pc, #212]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800459c:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02f      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d028      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c4:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ca:	4b28      	ldr	r3, [pc, #160]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045d0:	4a24      	ldr	r2, [pc, #144]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d114      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fc fcb7 	bl	8000f54 <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fc fcb3 	bl	8000f54 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e02a      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	4b18      	ldr	r3, [pc, #96]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ee      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004618:	d10d      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	490d      	ldr	r1, [pc, #52]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
 8004634:	e005      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004640:	6093      	str	r3, [r2, #8]
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464e:	4905      	ldr	r1, [pc, #20]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	42470068 	.word	0x42470068
 8004664:	40023800 	.word	0x40023800
 8004668:	40007000 	.word	0x40007000
 800466c:	42470e40 	.word	0x42470e40

08004670 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d13e      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d12f      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046a4:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046a6:	617b      	str	r3, [r7, #20]
          break;
 80046a8:	e02f      	b.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b6:	d108      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	e007      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f4:	0f1b      	lsrs	r3, r3, #28
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]
          break;
 8004702:	e002      	b.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
          break;
 8004708:	bf00      	nop
        }
      }
      break;
 800470a:	bf00      	nop
    }
  }
  return frequency;
 800470c:	697b      	ldr	r3, [r7, #20]
}
 800470e:	4618      	mov	r0, r3
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00bb8000 	.word	0x00bb8000
 8004724:	007a1200 	.word	0x007a1200
 8004728:	00f42400 	.word	0x00f42400

0800472c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07b      	b.n	8004836 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474e:	d009      	beq.n	8004764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
 8004756:	e005      	b.n	8004764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc fa3c 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	ea42 0103 	orr.w	r1, r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	f003 0104 	and.w	r1, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0210 	and.w	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004824:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e041      	b.n	80048d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fc fa11 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f000 fad9 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e041      	b.n	8004972 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f839 	bl	800497a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fa8a 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_TIM_PWM_Start+0x24>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e022      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d109      	bne.n	80049ce <HAL_TIM_PWM_Start+0x3e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e015      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x58>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e008      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07c      	b.n	8004afc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x82>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a10:	e013      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x92>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a20:	e00b      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0xa2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a30:	e003      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fce0 	bl	8005408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <HAL_TIM_PWM_Start+0x174>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_TIM_PWM_Start+0xcc>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2c      	ldr	r2, [pc, #176]	; (8004b08 <HAL_TIM_PWM_Start+0x178>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_PWM_Start+0xd0>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_TIM_PWM_Start+0xd2>
 8004a60:	2300      	movs	r3, #0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a22      	ldr	r2, [pc, #136]	; (8004b04 <HAL_TIM_PWM_Start+0x174>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d022      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x136>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d01d      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x136>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1f      	ldr	r2, [pc, #124]	; (8004b0c <HAL_TIM_PWM_Start+0x17c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d018      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x136>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1d      	ldr	r2, [pc, #116]	; (8004b10 <HAL_TIM_PWM_Start+0x180>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x136>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <HAL_TIM_PWM_Start+0x184>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x136>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <HAL_TIM_PWM_Start+0x178>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x136>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <HAL_TIM_PWM_Start+0x188>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x136>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <HAL_TIM_PWM_Start+0x18c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d111      	bne.n	8004aea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b06      	cmp	r3, #6
 8004ad6:	d010      	beq.n	8004afa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae8:	e007      	b.n	8004afa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0201 	orr.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40010400 	.word	0x40010400
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40001800 	.word	0x40001800

08004b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0ae      	b.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	f200 809f 	bhi.w	8004c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004c8d 	.word	0x08004c8d
 8004b5c:	08004c8d 	.word	0x08004c8d
 8004b60:	08004c8d 	.word	0x08004c8d
 8004b64:	08004bc9 	.word	0x08004bc9
 8004b68:	08004c8d 	.word	0x08004c8d
 8004b6c:	08004c8d 	.word	0x08004c8d
 8004b70:	08004c8d 	.word	0x08004c8d
 8004b74:	08004c0b 	.word	0x08004c0b
 8004b78:	08004c8d 	.word	0x08004c8d
 8004b7c:	08004c8d 	.word	0x08004c8d
 8004b80:	08004c8d 	.word	0x08004c8d
 8004b84:	08004c4b 	.word	0x08004c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f9f0 	bl	8004f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0208 	orr.w	r2, r2, #8
 8004ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0204 	bic.w	r2, r2, #4
 8004bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	619a      	str	r2, [r3, #24]
      break;
 8004bc6:	e064      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa40 	bl	8005054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	021a      	lsls	r2, r3, #8
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	619a      	str	r2, [r3, #24]
      break;
 8004c08:	e043      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fa95 	bl	8005140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0208 	orr.w	r2, r2, #8
 8004c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0204 	bic.w	r2, r2, #4
 8004c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69d9      	ldr	r1, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	61da      	str	r2, [r3, #28]
      break;
 8004c48:	e023      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fae9 	bl	8005228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	61da      	str	r2, [r3, #28]
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e0b4      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x186>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf8:	d03e      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0xd4>
 8004cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfe:	f200 8087 	bhi.w	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d06:	f000 8086 	beq.w	8004e16 <HAL_TIM_ConfigClockSource+0x172>
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d87f      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b70      	cmp	r3, #112	; 0x70
 8004d12:	d01a      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xa6>
 8004d14:	2b70      	cmp	r3, #112	; 0x70
 8004d16:	d87b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b60      	cmp	r3, #96	; 0x60
 8004d1a:	d050      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x11a>
 8004d1c:	2b60      	cmp	r3, #96	; 0x60
 8004d1e:	d877      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b50      	cmp	r3, #80	; 0x50
 8004d22:	d03c      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0xfa>
 8004d24:	2b50      	cmp	r3, #80	; 0x50
 8004d26:	d873      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d058      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x13a>
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d86f      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b30      	cmp	r3, #48	; 0x30
 8004d32:	d064      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d34:	2b30      	cmp	r3, #48	; 0x30
 8004d36:	d86b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d060      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d867      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05c      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d05a      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	e062      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6899      	ldr	r1, [r3, #8]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f000 fb35 	bl	80053c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	609a      	str	r2, [r3, #8]
      break;
 8004d76:	e04f      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6899      	ldr	r1, [r3, #8]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f000 fb1e 	bl	80053c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d9a:	609a      	str	r2, [r3, #8]
      break;
 8004d9c:	e03c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f000 fa92 	bl	80052d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2150      	movs	r1, #80	; 0x50
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 faeb 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e02c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 fab1 	bl	8005332 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2160      	movs	r1, #96	; 0x60
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fadb 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e01c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f000 fa72 	bl	80052d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2140      	movs	r1, #64	; 0x40
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 facb 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004dfc:	e00c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f000 fac2 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004e0e:	e003      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
      break;
 8004e14:	e000      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a40      	ldr	r2, [pc, #256]	; (8004f48 <TIM_Base_SetConfig+0x114>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d00f      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3d      	ldr	r2, [pc, #244]	; (8004f4c <TIM_Base_SetConfig+0x118>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3c      	ldr	r2, [pc, #240]	; (8004f50 <TIM_Base_SetConfig+0x11c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3b      	ldr	r2, [pc, #236]	; (8004f54 <TIM_Base_SetConfig+0x120>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3a      	ldr	r2, [pc, #232]	; (8004f58 <TIM_Base_SetConfig+0x124>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d108      	bne.n	8004e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2f      	ldr	r2, [pc, #188]	; (8004f48 <TIM_Base_SetConfig+0x114>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02b      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e94:	d027      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2c      	ldr	r2, [pc, #176]	; (8004f4c <TIM_Base_SetConfig+0x118>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d023      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2b      	ldr	r2, [pc, #172]	; (8004f50 <TIM_Base_SetConfig+0x11c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01f      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2a      	ldr	r2, [pc, #168]	; (8004f54 <TIM_Base_SetConfig+0x120>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01b      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a29      	ldr	r2, [pc, #164]	; (8004f58 <TIM_Base_SetConfig+0x124>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d017      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a28      	ldr	r2, [pc, #160]	; (8004f5c <TIM_Base_SetConfig+0x128>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a27      	ldr	r2, [pc, #156]	; (8004f60 <TIM_Base_SetConfig+0x12c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00f      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a26      	ldr	r2, [pc, #152]	; (8004f64 <TIM_Base_SetConfig+0x130>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00b      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a25      	ldr	r2, [pc, #148]	; (8004f68 <TIM_Base_SetConfig+0x134>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <TIM_Base_SetConfig+0x138>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a23      	ldr	r2, [pc, #140]	; (8004f70 <TIM_Base_SetConfig+0x13c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <TIM_Base_SetConfig+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_Base_SetConfig+0xf8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <TIM_Base_SetConfig+0x124>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d103      	bne.n	8004f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	615a      	str	r2, [r3, #20]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40010400 	.word	0x40010400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800
 8004f68:	40001800 	.word	0x40001800
 8004f6c:	40001c00 	.word	0x40001c00
 8004f70:	40002000 	.word	0x40002000

08004f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 0302 	bic.w	r3, r3, #2
 8004fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a20      	ldr	r2, [pc, #128]	; (800504c <TIM_OC1_SetConfig+0xd8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x64>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <TIM_OC1_SetConfig+0xdc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d10c      	bne.n	8004ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0308 	bic.w	r3, r3, #8
 8004fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a15      	ldr	r2, [pc, #84]	; (800504c <TIM_OC1_SetConfig+0xd8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_OC1_SetConfig+0x8e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	; (8005050 <TIM_OC1_SetConfig+0xdc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f023 0210 	bic.w	r2, r3, #16
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0320 	bic.w	r3, r3, #32
 800509e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a22      	ldr	r2, [pc, #136]	; (8005138 <TIM_OC2_SetConfig+0xe4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC2_SetConfig+0x68>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a21      	ldr	r2, [pc, #132]	; (800513c <TIM_OC2_SetConfig+0xe8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10d      	bne.n	80050d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a17      	ldr	r2, [pc, #92]	; (8005138 <TIM_OC2_SetConfig+0xe4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC2_SetConfig+0x94>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a16      	ldr	r2, [pc, #88]	; (800513c <TIM_OC2_SetConfig+0xe8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d113      	bne.n	8005110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40010400 	.word	0x40010400

08005140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a21      	ldr	r2, [pc, #132]	; (8005220 <TIM_OC3_SetConfig+0xe0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_OC3_SetConfig+0x66>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a20      	ldr	r2, [pc, #128]	; (8005224 <TIM_OC3_SetConfig+0xe4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d10d      	bne.n	80051c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a16      	ldr	r2, [pc, #88]	; (8005220 <TIM_OC3_SetConfig+0xe0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_OC3_SetConfig+0x92>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a15      	ldr	r2, [pc, #84]	; (8005224 <TIM_OC3_SetConfig+0xe4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d113      	bne.n	80051fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40010000 	.word	0x40010000
 8005224:	40010400 	.word	0x40010400

08005228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a12      	ldr	r2, [pc, #72]	; (80052cc <TIM_OC4_SetConfig+0xa4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_OC4_SetConfig+0x68>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <TIM_OC4_SetConfig+0xa8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d109      	bne.n	80052a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	019b      	lsls	r3, r3, #6
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010400 	.word	0x40010400

080052d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f023 0201 	bic.w	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 030a 	bic.w	r3, r3, #10
 8005310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f023 0210 	bic.w	r2, r3, #16
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800535c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800536e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f043 0307 	orr.w	r3, r3, #7
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	609a      	str	r2, [r3, #8]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	609a      	str	r2, [r3, #8]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2201      	movs	r2, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	431a      	orrs	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005468:	2302      	movs	r3, #2
 800546a:	e05a      	b.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a21      	ldr	r2, [pc, #132]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d022      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b8:	d01d      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d018      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1b      	ldr	r2, [pc, #108]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1a      	ldr	r2, [pc, #104]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a18      	ldr	r2, [pc, #96]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a17      	ldr	r2, [pc, #92]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a15      	ldr	r2, [pc, #84]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d10c      	bne.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4313      	orrs	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40001800 	.word	0x40001800

0800554c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800554c:	b084      	sub	sp, #16
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	f107 001c 	add.w	r0, r7, #28
 800555a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2b01      	cmp	r3, #1
 8005562:	d122      	bne.n	80055aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9a0 	bl	80058e4 <USB_CoreReset>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
 80055a8:	e01a      	b.n	80055e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f994 	bl	80058e4 <USB_CoreReset>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
 80055d2:	e005      	b.n	80055e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d10b      	bne.n	80055fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f043 0206 	orr.w	r2, r3, #6
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800560a:	b004      	add	sp, #16
 800560c:	4770      	bx	lr

0800560e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 0201 	bic.w	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d115      	bne.n	80056a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005680:	2001      	movs	r0, #1
 8005682:	f7fb fc73 	bl	8000f6c <HAL_Delay>
      ms++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f91a 	bl	80058c6 <USB_GetMode>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d01e      	beq.n	80056d6 <USB_SetCurrentMode+0x84>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b31      	cmp	r3, #49	; 0x31
 800569c:	d9f0      	bls.n	8005680 <USB_SetCurrentMode+0x2e>
 800569e:	e01a      	b.n	80056d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d115      	bne.n	80056d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056b2:	2001      	movs	r0, #1
 80056b4:	f7fb fc5a 	bl	8000f6c <HAL_Delay>
      ms++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f901 	bl	80058c6 <USB_GetMode>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <USB_SetCurrentMode+0x84>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b31      	cmp	r3, #49	; 0x31
 80056ce:	d9f0      	bls.n	80056b2 <USB_SetCurrentMode+0x60>
 80056d0:	e001      	b.n	80056d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e005      	b.n	80056e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b32      	cmp	r3, #50	; 0x32
 80056da:	d101      	bne.n	80056e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	4a08      	ldr	r2, [pc, #32]	; (8005730 <USB_FlushTxFifo+0x44>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d901      	bls.n	8005716 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e006      	b.n	8005724 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b20      	cmp	r3, #32
 8005720:	d0f1      	beq.n	8005706 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	00030d40 	.word	0x00030d40

08005734 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2210      	movs	r2, #16
 8005744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	4a08      	ldr	r2, [pc, #32]	; (8005770 <USB_FlushRxFifo+0x3c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e006      	b.n	8005764 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b10      	cmp	r3, #16
 8005760:	d0f1      	beq.n	8005746 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	00030d40 	.word	0x00030d40

08005774 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4611      	mov	r1, r2
 8005780:	461a      	mov	r2, r3
 8005782:	460b      	mov	r3, r1
 8005784:	71fb      	strb	r3, [r7, #7]
 8005786:	4613      	mov	r3, r2
 8005788:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	d123      	bne.n	80057e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800579a:	88bb      	ldrh	r3, [r7, #4]
 800579c:	3303      	adds	r3, #3
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e018      	b.n	80057da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	031a      	lsls	r2, r3, #12
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b4:	461a      	mov	r2, r3
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3301      	adds	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	3301      	adds	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	3301      	adds	r3, #1
 80057d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3e2      	bcc.n	80057a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3724      	adds	r7, #36	; 0x24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b08b      	sub	sp, #44	; 0x2c
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	089b      	lsrs	r3, r3, #2
 800580a:	b29b      	uxth	r3, r3
 800580c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005816:	2300      	movs	r3, #0
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	e014      	b.n	8005846 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	601a      	str	r2, [r3, #0]
    pDest++;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	3301      	adds	r3, #1
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	3301      	adds	r3, #1
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	3301      	adds	r3, #1
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	3301      	adds	r3, #1
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	3301      	adds	r3, #1
 8005844:	623b      	str	r3, [r7, #32]
 8005846:	6a3a      	ldr	r2, [r7, #32]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	429a      	cmp	r2, r3
 800584c:	d3e6      	bcc.n	800581c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800584e:	8bfb      	ldrh	r3, [r7, #30]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01e      	beq.n	8005892 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585e:	461a      	mov	r2, r3
 8005860:	f107 0310 	add.w	r3, r7, #16
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
 8005874:	b2da      	uxtb	r2, r3
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	701a      	strb	r2, [r3, #0]
      i++;
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	3301      	adds	r3, #1
 800587e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	3301      	adds	r3, #1
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005886:	8bfb      	ldrh	r3, [r7, #30]
 8005888:	3b01      	subs	r3, #1
 800588a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800588c:	8bfb      	ldrh	r3, [r7, #30]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1ea      	bne.n	8005868 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005894:	4618      	mov	r0, r3
 8005896:	372c      	adds	r7, #44	; 0x2c
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4013      	ands	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058b8:	68fb      	ldr	r3, [r7, #12]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0301 	and.w	r3, r3, #1
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	4a13      	ldr	r2, [pc, #76]	; (8005944 <USB_CoreReset+0x60>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e01a      	b.n	8005936 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	daf3      	bge.n	80058f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	4a09      	ldr	r2, [pc, #36]	; (8005944 <USB_CoreReset+0x60>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d901      	bls.n	8005928 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	d0f1      	beq.n	8005918 <USB_CoreReset+0x34>

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	00030d40 	.word	0x00030d40

08005948 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005948:	b084      	sub	sp, #16
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	f107 001c 	add.w	r0, r7, #28
 8005956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005964:	461a      	mov	r2, r3
 8005966:	2300      	movs	r3, #0
 8005968:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d018      	beq.n	80059cc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	2b01      	cmp	r3, #1
 800599e:	d10a      	bne.n	80059b6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ae:	f043 0304 	orr.w	r3, r3, #4
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	e014      	b.n	80059e0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059c4:	f023 0304 	bic.w	r3, r3, #4
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	e009      	b.n	80059e0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059da:	f023 0304 	bic.w	r3, r3, #4
 80059de:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80059e0:	2110      	movs	r1, #16
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fe82 	bl	80056ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff fea3 	bl	8005734 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e015      	b.n	8005a20 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	461a      	mov	r2, r3
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295
 8005a06:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	461a      	mov	r2, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d3e5      	bcc.n	80059f4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295
 8005a34:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a48:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <USB_HostInit+0x154>)
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a13      	ldr	r2, [pc, #76]	; (8005aa0 <USB_HostInit+0x158>)
 8005a54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a58:	e009      	b.n	8005a6e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2280      	movs	r2, #128	; 0x80
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a10      	ldr	r2, [pc, #64]	; (8005aa4 <USB_HostInit+0x15c>)
 8005a64:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a0f      	ldr	r2, [pc, #60]	; (8005aa8 <USB_HostInit+0x160>)
 8005a6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f043 0210 	orr.w	r2, r3, #16
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	4b09      	ldr	r3, [pc, #36]	; (8005aac <USB_HostInit+0x164>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a98:	b004      	add	sp, #16
 8005a9a:	4770      	bx	lr
 8005a9c:	01000200 	.word	0x01000200
 8005aa0:	00e00300 	.word	0x00e00300
 8005aa4:	00600080 	.word	0x00600080
 8005aa8:	004000e0 	.word	0x004000e0
 8005aac:	a3200008 	.word	0xa3200008

08005ab0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d107      	bne.n	8005b02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af8:	461a      	mov	r2, r3
 8005afa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005afe:	6053      	str	r3, [r2, #4]
 8005b00:	e009      	b.n	8005b16 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d106      	bne.n	8005b16 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b14:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b54:	2064      	movs	r0, #100	; 0x64
 8005b56:	f7fb fa09 	bl	8000f6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b66:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b68:	200a      	movs	r0, #10
 8005b6a:	f7fb f9ff 	bl	8000f6c <HAL_Delay>

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <USB_DriveVbus+0x44>
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d106      	bne.n	8005bbc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc6:	d109      	bne.n	8005bdc <USB_DriveVbus+0x64>
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bda:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	0c5b      	lsrs	r3, r3, #17
 8005c08:	f003 0303 	and.w	r3, r3, #3
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	b29b      	uxth	r3, r3
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	70fb      	strb	r3, [r7, #3]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	70bb      	strb	r3, [r7, #2]
 8005c52:	4613      	mov	r3, r2
 8005c54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d87e      	bhi.n	8005d78 <USB_HC_Init+0x13c>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <USB_HC_Init+0x44>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005d3b 	.word	0x08005d3b
 8005c88:	08005c91 	.word	0x08005c91
 8005c8c:	08005cfd 	.word	0x08005cfd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	da10      	bge.n	8005cce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005ccc:	e057      	b.n	8005d7e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d051      	beq.n	8005d7e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cf8:	60d3      	str	r3, [r2, #12]
      break;
 8005cfa:	e040      	b.n	8005d7e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da34      	bge.n	8005d82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d38:	e023      	b.n	8005d82 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	461a      	mov	r2, r3
 8005d48:	f240 2325 	movw	r3, #549	; 0x225
 8005d4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da17      	bge.n	8005d86 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d76:	e006      	b.n	8005d86 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	77fb      	strb	r3, [r7, #31]
      break;
 8005d7c:	e004      	b.n	8005d88 <USB_HC_Init+0x14c>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <USB_HC_Init+0x14c>
      break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <USB_HC_Init+0x14c>
      break;
 8005d86:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	2101      	movs	r1, #1
 8005d98:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9c:	6939      	ldr	r1, [r7, #16]
 8005d9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005da2:	4313      	orrs	r3, r2
 8005da4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005db2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	da03      	bge.n	8005dc2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dbe:	61bb      	str	r3, [r7, #24]
 8005dc0:	e001      	b.n	8005dc6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff ff0f 	bl	8005bea <USB_GetHostSpeed>
 8005dcc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005dce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d106      	bne.n	8005de4 <USB_HC_Init+0x1a8>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d003      	beq.n	8005de4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	e001      	b.n	8005de8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005de8:	787b      	ldrb	r3, [r7, #1]
 8005dea:	059b      	lsls	r3, r3, #22
 8005dec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005df0:	78bb      	ldrb	r3, [r7, #2]
 8005df2:	02db      	lsls	r3, r3, #11
 8005df4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005df8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dfe:	049b      	lsls	r3, r3, #18
 8005e00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	0159      	lsls	r1, r3, #5
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	440b      	add	r3, r1
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e24:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005e26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d10f      	bne.n	8005e4e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	78fa      	ldrb	r2, [r7, #3]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e4c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08c      	sub	sp, #48	; 0x30
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e74:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02d      	beq.n	8005ede <USB_HC_StartXfer+0x86>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	791b      	ldrb	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d129      	bne.n	8005ede <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d117      	bne.n	8005ec0 <USB_HC_StartXfer+0x68>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	79db      	ldrb	r3, [r3, #7]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <USB_HC_StartXfer+0x48>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	79db      	ldrb	r3, [r3, #7]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d10f      	bne.n	8005ec0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	6a3a      	ldr	r2, [r7, #32]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <USB_HC_StartXfer+0x86>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	795b      	ldrb	r3, [r3, #5]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d107      	bne.n	8005ede <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fa2f 	bl	8006338 <USB_DoPing>
      return HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e0f8      	b.n	80060d0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d018      	beq.n	8005f18 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	8912      	ldrh	r2, [r2, #8]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	8912      	ldrh	r2, [r2, #8]
 8005ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005efa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005efc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005efe:	8b7b      	ldrh	r3, [r7, #26]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d90b      	bls.n	8005f1c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005f04:	8b7b      	ldrh	r3, [r7, #26]
 8005f06:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	8912      	ldrh	r2, [r2, #8]
 8005f0e:	fb02 f203 	mul.w	r2, r2, r3
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	611a      	str	r2, [r3, #16]
 8005f16:	e001      	b.n	8005f1c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	78db      	ldrb	r3, [r3, #3]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	8912      	ldrh	r2, [r2, #8]
 8005f2a:	fb02 f203 	mul.w	r2, r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	611a      	str	r2, [r3, #16]
 8005f32:	e003      	b.n	8005f3c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f46:	04d9      	lsls	r1, r3, #19
 8005f48:	4b63      	ldr	r3, [pc, #396]	; (80060d8 <USB_HC_StartXfer+0x280>)
 8005f4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	7a9b      	ldrb	r3, [r3, #10]
 8005f52:	075b      	lsls	r3, r3, #29
 8005f54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	0148      	lsls	r0, r1, #5
 8005f5c:	6a39      	ldr	r1, [r7, #32]
 8005f5e:	4401      	add	r1, r0
 8005f60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	68d9      	ldr	r1, [r3, #12]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	460a      	mov	r2, r1
 8005f80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf0c      	ite	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	2300      	movne	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	6a3a      	ldr	r2, [r7, #32]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fb8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	7e7b      	ldrb	r3, [r7, #25]
 8005fca:	075b      	lsls	r3, r3, #29
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	0148      	lsls	r0, r1, #5
 8005fd0:	6a39      	ldr	r1, [r7, #32]
 8005fd2:	4401      	add	r1, r0
 8005fd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ff2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	78db      	ldrb	r3, [r3, #3]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	e003      	b.n	800600e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800600c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006014:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	461a      	mov	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	e04e      	b.n	80060d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	78db      	ldrb	r3, [r3, #3]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d149      	bne.n	80060ce <USB_HC_StartXfer+0x276>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d045      	beq.n	80060ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	79db      	ldrb	r3, [r3, #7]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d830      	bhi.n	80060ac <USB_HC_StartXfer+0x254>
 800604a:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <USB_HC_StartXfer+0x1f8>)
 800604c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006050:	08006061 	.word	0x08006061
 8006054:	08006085 	.word	0x08006085
 8006058:	08006061 	.word	0x08006061
 800605c:	08006085 	.word	0x08006085
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	3303      	adds	r3, #3
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800606a:	8afa      	ldrh	r2, [r7, #22]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	b29b      	uxth	r3, r3
 8006072:	429a      	cmp	r2, r3
 8006074:	d91c      	bls.n	80060b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f043 0220 	orr.w	r2, r3, #32
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	619a      	str	r2, [r3, #24]
        }
        break;
 8006082:	e015      	b.n	80060b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	3303      	adds	r3, #3
 800608a:	089b      	lsrs	r3, r3, #2
 800608c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800608e:	8afa      	ldrh	r2, [r7, #22]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	b29b      	uxth	r3, r3
 800609a:	429a      	cmp	r2, r3
 800609c:	d90a      	bls.n	80060b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80060aa:	e003      	b.n	80060b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <USB_HC_StartXfer+0x25e>
        break;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <USB_HC_StartXfer+0x25e>
        break;
 80060b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	68d9      	ldr	r1, [r3, #12]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	785a      	ldrb	r2, [r3, #1]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2000      	movs	r0, #0
 80060c6:	9000      	str	r0, [sp, #0]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fb53 	bl	8005774 <USB_WritePacket>
  }

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3728      	adds	r7, #40	; 0x28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	1ff80000 	.word	0x1ff80000

080060dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	b29b      	uxth	r3, r3
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060fe:	b480      	push	{r7}
 8006100:	b089      	sub	sp, #36	; 0x24
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	4413      	add	r3, r2
 800611e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	0c9b      	lsrs	r3, r3, #18
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	4413      	add	r3, r2
 8006134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	0fdb      	lsrs	r3, r3, #31
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b20      	cmp	r3, #32
 800614c:	d104      	bne.n	8006158 <USB_HC_Halt+0x5a>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	e0e8      	b.n	800632a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <USB_HC_Halt+0x66>
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d173      	bne.n	800624c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	440a      	add	r2, r1
 800617a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800617e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006182:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 80cb 	bne.w	8006328 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d143      	bne.n	8006226 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061fc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	3301      	adds	r3, #1
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800620a:	d81d      	bhi.n	8006248 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	4413      	add	r3, r2
 8006214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800621e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006222:	d0ec      	beq.n	80061fe <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006224:	e080      	b.n	8006328 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	440a      	add	r2, r1
 800623c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006244:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006246:	e06f      	b.n	8006328 <USB_HC_Halt+0x22a>
            break;
 8006248:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800624a:	e06d      	b.n	8006328 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	440a      	add	r2, r1
 8006262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800626a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d143      	bne.n	8006304 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	440a      	add	r2, r1
 8006292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800629a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062da:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	3301      	adds	r3, #1
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062e8:	d81d      	bhi.n	8006326 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006300:	d0ec      	beq.n	80062dc <USB_HC_Halt+0x1de>
 8006302:	e011      	b.n	8006328 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	4413      	add	r3, r2
 800630c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	440a      	add	r2, r1
 800631a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e000      	b.n	8006328 <USB_HC_Halt+0x22a>
          break;
 8006326:	bf00      	nop
    }
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3724      	adds	r7, #36	; 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800634c:	2301      	movs	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	04da      	lsls	r2, r3, #19
 8006354:	4b15      	ldr	r3, [pc, #84]	; (80063ac <USB_DoPing+0x74>)
 8006356:	4013      	ands	r3, r2
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	440a      	add	r2, r1
 8006360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006368:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006380:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006388:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	1ff80000 	.word	0x1ff80000

080063b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff f935 	bl	8005630 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80063c6:	2110      	movs	r1, #16
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff f98f 	bl	80056ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff f9b0 	bl	8005734 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	e01f      	b.n	800641a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006400:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3301      	adds	r3, #1
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b0f      	cmp	r3, #15
 800641e:	d9dc      	bls.n	80063da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	e034      	b.n	8006490 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800643c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006444:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800644c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	3301      	adds	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800646c:	d80c      	bhi.n	8006488 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006484:	d0ec      	beq.n	8006460 <USB_StopHost+0xb0>
 8006486:	e000      	b.n	800648a <USB_StopHost+0xda>
        break;
 8006488:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	3301      	adds	r3, #1
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b0f      	cmp	r3, #15
 8006494:	d9c7      	bls.n	8006426 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649c:	461a      	mov	r2, r3
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295
 80064aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff f8ae 	bl	800560e <USB_EnableGlobalInt>

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af04      	add	r7, sp, #16
 80064c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80064c4:	2301      	movs	r3, #1
 80064c6:	2202      	movs	r2, #2
 80064c8:	2102      	movs	r1, #2
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fc66 	bl	8006d9c <USBH_FindInterface>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2bff      	cmp	r3, #255	; 0xff
 80064d8:	d002      	beq.n	80064e0 <USBH_CDC_InterfaceInit+0x24>
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d901      	bls.n	80064e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064e0:	2302      	movs	r3, #2
 80064e2:	e13d      	b.n	8006760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fc3b 	bl	8006d64 <USBH_SelectInterface>
 80064ee:	4603      	mov	r3, r0
 80064f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80064f8:	2302      	movs	r3, #2
 80064fa:	e131      	b.n	8006760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006502:	2050      	movs	r0, #80	; 0x50
 8006504:	f002 fa00 	bl	8008908 <malloc>
 8006508:	4603      	mov	r3, r0
 800650a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800651c:	2302      	movs	r3, #2
 800651e:	e11f      	b.n	8006760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006520:	2250      	movs	r2, #80	; 0x50
 8006522:	2100      	movs	r1, #0
 8006524:	68b8      	ldr	r0, [r7, #8]
 8006526:	f002 f9ff 	bl	8008928 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	211a      	movs	r1, #26
 8006530:	fb01 f303 	mul.w	r3, r1, r3
 8006534:	4413      	add	r3, r2
 8006536:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b25b      	sxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	da15      	bge.n	800656e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	211a      	movs	r1, #26
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	4413      	add	r3, r2
 800654e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006552:	781a      	ldrb	r2, [r3, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	211a      	movs	r1, #26
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006568:	881a      	ldrh	r2, [r3, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fe32 	bl	80081de <USBH_AllocPipe>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	7819      	ldrb	r1, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	7858      	ldrb	r0, [r3, #1]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	8952      	ldrh	r2, [r2, #10]
 800659a:	9202      	str	r2, [sp, #8]
 800659c:	2203      	movs	r2, #3
 800659e:	9201      	str	r2, [sp, #4]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4623      	mov	r3, r4
 80065a4:	4602      	mov	r2, r0
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fdea 	bl	8008180 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2200      	movs	r2, #0
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f002 f8f9 	bl	80087ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80065ba:	2300      	movs	r3, #0
 80065bc:	2200      	movs	r2, #0
 80065be:	210a      	movs	r1, #10
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fbeb 	bl	8006d9c <USBH_FindInterface>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2bff      	cmp	r3, #255	; 0xff
 80065ce:	d002      	beq.n	80065d6 <USBH_CDC_InterfaceInit+0x11a>
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d901      	bls.n	80065da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065d6:	2302      	movs	r3, #2
 80065d8:	e0c2      	b.n	8006760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	211a      	movs	r1, #26
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	b25b      	sxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da16      	bge.n	8006620 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	211a      	movs	r1, #26
 80065f8:	fb01 f303 	mul.w	r3, r1, r3
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006602:	781a      	ldrb	r2, [r3, #0]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	211a      	movs	r1, #26
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006618:	881a      	ldrh	r2, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	835a      	strh	r2, [r3, #26]
 800661e:	e015      	b.n	800664c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	211a      	movs	r1, #26
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	211a      	movs	r1, #26
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006646:	881a      	ldrh	r2, [r3, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	211a      	movs	r1, #26
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	4413      	add	r3, r2
 8006658:	f203 3356 	addw	r3, r3, #854	; 0x356
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b25b      	sxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	da16      	bge.n	8006692 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	211a      	movs	r1, #26
 800666a:	fb01 f303 	mul.w	r3, r1, r3
 800666e:	4413      	add	r3, r2
 8006670:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006674:	781a      	ldrb	r2, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	211a      	movs	r1, #26
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	4413      	add	r3, r2
 8006686:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	835a      	strh	r2, [r3, #26]
 8006690:	e015      	b.n	80066be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	211a      	movs	r1, #26
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	4413      	add	r3, r2
 800669e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	211a      	movs	r1, #26
 80066ae:	fb01 f303 	mul.w	r3, r1, r3
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066b8:	881a      	ldrh	r2, [r3, #0]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	7b9b      	ldrb	r3, [r3, #14]
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fd8a 	bl	80081de <USBH_AllocPipe>
 80066ca:	4603      	mov	r3, r0
 80066cc:	461a      	mov	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	7bdb      	ldrb	r3, [r3, #15]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fd80 	bl	80081de <USBH_AllocPipe>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	7b59      	ldrb	r1, [r3, #13]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	7b98      	ldrb	r0, [r3, #14]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	8b12      	ldrh	r2, [r2, #24]
 80066fe:	9202      	str	r2, [sp, #8]
 8006700:	2202      	movs	r2, #2
 8006702:	9201      	str	r2, [sp, #4]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	4623      	mov	r3, r4
 8006708:	4602      	mov	r2, r0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fd38 	bl	8008180 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	7b19      	ldrb	r1, [r3, #12]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	7bd8      	ldrb	r0, [r3, #15]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	8b52      	ldrh	r2, [r2, #26]
 8006728:	9202      	str	r2, [sp, #8]
 800672a:	2202      	movs	r2, #2
 800672c:	9201      	str	r2, [sp, #4]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4623      	mov	r3, r4
 8006732:	4602      	mov	r2, r0
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f001 fd23 	bl	8008180 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	7b5b      	ldrb	r3, [r3, #13]
 8006746:	2200      	movs	r2, #0
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f002 f82e 	bl	80087ac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	7b1b      	ldrb	r3, [r3, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f002 f827 	bl	80087ac <USBH_LL_SetToggle>

  return USBH_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	bd90      	pop	{r4, r7, pc}

08006768 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fd18 	bl	80081be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 fd43 	bl	8008220 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	7b1b      	ldrb	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00e      	beq.n	80067c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	7b1b      	ldrb	r3, [r3, #12]
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fd05 	bl	80081be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	7b1b      	ldrb	r3, [r3, #12]
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fd30 	bl	8008220 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	7b5b      	ldrb	r3, [r3, #13]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00e      	beq.n	80067ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	7b5b      	ldrb	r3, [r3, #13]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 fcf2 	bl	80081be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	7b5b      	ldrb	r3, [r3, #13]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 fd1d 	bl	8008220 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4618      	mov	r0, r3
 8006802:	f002 f889 	bl	8008918 <free>
    phost->pActiveClass->pData = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800680c:	2200      	movs	r2, #0
 800680e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3340      	adds	r3, #64	; 0x40
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f8b1 	bl	800699a <GetLineCoding>
 8006838:	4603      	mov	r3, r0
 800683a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006848:	2102      	movs	r1, #2
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800684e:	7afb      	ldrb	r3, [r7, #11]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006878:	2b04      	cmp	r3, #4
 800687a:	d877      	bhi.n	800696c <USBH_CDC_Process+0x114>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBH_CDC_Process+0x2c>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	08006899 	.word	0x08006899
 8006888:	0800689f 	.word	0x0800689f
 800688c:	080068cf 	.word	0x080068cf
 8006890:	08006943 	.word	0x08006943
 8006894:	08006951 	.word	0x08006951
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e06d      	b.n	800697a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f897 	bl	80069d8 <SetLineCoding>
 80068aa:	4603      	mov	r3, r0
 80068ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068bc:	e058      	b.n	8006970 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d055      	beq.n	8006970 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2204      	movs	r2, #4
 80068c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80068cc:	e050      	b.n	8006970 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3340      	adds	r3, #64	; 0x40
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f860 	bl	800699a <GetLineCoding>
 80068da:	4603      	mov	r3, r0
 80068dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d126      	bne.n	8006932 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f6:	791b      	ldrb	r3, [r3, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d13b      	bne.n	8006974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006906:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006908:	429a      	cmp	r2, r3
 800690a:	d133      	bne.n	8006974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006918:	429a      	cmp	r2, r3
 800691a:	d12b      	bne.n	8006974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006924:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006926:	429a      	cmp	r2, r3
 8006928:	d124      	bne.n	8006974 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f958 	bl	8006be0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006930:	e020      	b.n	8006974 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d01d      	beq.n	8006974 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2204      	movs	r2, #4
 800693c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006940:	e018      	b.n	8006974 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f867 	bl	8006a16 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f8da 	bl	8006b02 <CDC_ProcessReception>
      break;
 800694e:	e014      	b.n	800697a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006950:	2100      	movs	r1, #0
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 ffe3 	bl	800791e <USBH_ClrFeature>
 8006958:	4603      	mov	r3, r0
 800695a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800696a:	e005      	b.n	8006978 <USBH_CDC_Process+0x120>

    default:
      break;
 800696c:	bf00      	nop
 800696e:	e004      	b.n	800697a <USBH_CDC_Process+0x122>
      break;
 8006970:	bf00      	nop
 8006972:	e002      	b.n	800697a <USBH_CDC_Process+0x122>
      break;
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <USBH_CDC_Process+0x122>
      break;
 8006978:	bf00      	nop

  }

  return status;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	22a1      	movs	r2, #161	; 0xa1
 80069a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2221      	movs	r2, #33	; 0x21
 80069ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2207      	movs	r2, #7
 80069c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2207      	movs	r2, #7
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 f988 	bl	8007cde <USBH_CtlReq>
 80069ce:	4603      	mov	r3, r0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2221      	movs	r2, #33	; 0x21
 80069e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2207      	movs	r2, #7
 80069fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2207      	movs	r2, #7
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 f969 	bl	8007cde <USBH_CtlReq>
 8006a0c:	4603      	mov	r3, r0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af02      	add	r7, sp, #8
 8006a1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d002      	beq.n	8006a3c <CDC_ProcessTransmission+0x26>
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d023      	beq.n	8006a82 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a3a:	e05e      	b.n	8006afa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	8b12      	ldrh	r2, [r2, #24]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d90b      	bls.n	8006a60 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	69d9      	ldr	r1, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8b1a      	ldrh	r2, [r3, #24]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	7b5b      	ldrb	r3, [r3, #13]
 8006a54:	2001      	movs	r0, #1
 8006a56:	9000      	str	r0, [sp, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 fb4e 	bl	80080fa <USBH_BulkSendData>
 8006a5e:	e00b      	b.n	8006a78 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	7b5b      	ldrb	r3, [r3, #13]
 8006a6e:	2001      	movs	r0, #1
 8006a70:	9000      	str	r0, [sp, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fb41 	bl	80080fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a80:	e03b      	b.n	8006afa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	7b5b      	ldrb	r3, [r3, #13]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fe65 	bl	8008758 <USBH_LL_GetURBState>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d128      	bne.n	8006aea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	8b12      	ldrh	r2, [r2, #24]
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d90e      	bls.n	8006ac2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	8b12      	ldrh	r2, [r2, #24]
 8006aac:	1a9a      	subs	r2, r3, r2
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	8b12      	ldrh	r2, [r2, #24]
 8006aba:	441a      	add	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	61da      	str	r2, [r3, #28]
 8006ac0:	e002      	b.n	8006ac8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ad8:	e00e      	b.n	8006af8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f868 	bl	8006bb8 <USBH_CDC_TransmitCallback>
      break;
 8006ae8:	e006      	b.n	8006af8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d103      	bne.n	8006af8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006af8:	bf00      	nop
  }
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d002      	beq.n	8006b28 <CDC_ProcessReception+0x26>
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d00e      	beq.n	8006b44 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b26:	e043      	b.n	8006bb0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	6a19      	ldr	r1, [r3, #32]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	8b5a      	ldrh	r2, [r3, #26]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	7b1b      	ldrb	r3, [r3, #12]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fb05 	bl	8008144 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b42:	e035      	b.n	8006bb0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	7b1b      	ldrb	r3, [r3, #12]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fe04 	bl	8008758 <USBH_LL_GetURBState>
 8006b50:	4603      	mov	r3, r0
 8006b52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b54:	7cfb      	ldrb	r3, [r7, #19]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d129      	bne.n	8006bae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	7b1b      	ldrb	r3, [r3, #12]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fd67 	bl	8008634 <USBH_LL_GetLastXferSize>
 8006b66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d016      	beq.n	8006ba0 <CDC_ProcessReception+0x9e>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	8b5b      	ldrh	r3, [r3, #26]
 8006b76:	461a      	mov	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d910      	bls.n	8006ba0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad2      	subs	r2, r2, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	441a      	add	r2, r3
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2203      	movs	r2, #3
 8006b9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b9e:	e006      	b.n	8006bae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f80f 	bl	8006bcc <USBH_CDC_ReceiveCallback>
      break;
 8006bae:	bf00      	nop
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e029      	b.n	8006c60 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	79fa      	ldrb	r2, [r7, #7]
 8006c10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f81f 	bl	8006c68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f001 fc37 	bl	80084cc <USBH_LL_Init>

  return USBH_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e009      	b.n	8006c8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	33e0      	adds	r3, #224	; 0xe0
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	2200      	movs	r2, #0
 8006c86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b0e      	cmp	r3, #14
 8006c92:	d9f2      	bls.n	8006c7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	e009      	b.n	8006cae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d3f1      	bcc.n	8006c9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2240      	movs	r2, #64	; 0x40
 8006cda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d016      	beq.n	8006d52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10e      	bne.n	8006d4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d34:	1c59      	adds	r1, r3, #1
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	33de      	adds	r3, #222	; 0xde
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
 8006d4a:	e004      	b.n	8006d56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e001      	b.n	8006d56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d52:	2302      	movs	r3, #2
 8006d54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d204      	bcs.n	8006d8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	78fa      	ldrb	r2, [r7, #3]
 8006d84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d88:	e001      	b.n	8006d8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	4608      	mov	r0, r1
 8006da6:	4611      	mov	r1, r2
 8006da8:	461a      	mov	r2, r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	70fb      	strb	r3, [r7, #3]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70bb      	strb	r3, [r7, #2]
 8006db2:	4613      	mov	r3, r2
 8006db4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006dc4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dc6:	e025      	b.n	8006e14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	221a      	movs	r2, #26
 8006dcc:	fb02 f303 	mul.w	r3, r2, r3
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3302      	adds	r3, #2
 8006dd8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	795b      	ldrb	r3, [r3, #5]
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d002      	beq.n	8006dea <USBH_FindInterface+0x4e>
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	2bff      	cmp	r3, #255	; 0xff
 8006de8:	d111      	bne.n	8006e0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dee:	78ba      	ldrb	r2, [r7, #2]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d002      	beq.n	8006dfa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006df4:	78bb      	ldrb	r3, [r7, #2]
 8006df6:	2bff      	cmp	r3, #255	; 0xff
 8006df8:	d109      	bne.n	8006e0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dfe:	787a      	ldrb	r2, [r7, #1]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d002      	beq.n	8006e0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e04:	787b      	ldrb	r3, [r7, #1]
 8006e06:	2bff      	cmp	r3, #255	; 0xff
 8006e08:	d101      	bne.n	8006e0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	e006      	b.n	8006e1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	3301      	adds	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d9d6      	bls.n	8006dc8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e1a:	23ff      	movs	r3, #255	; 0xff
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 fb87 	bl	8008544 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006e36:	2101      	movs	r1, #1
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fca0 	bl	800877e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af04      	add	r7, sp, #16
 8006e4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e50:	2302      	movs	r3, #2
 8006e52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d102      	bne.n	8006e6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2203      	movs	r2, #3
 8006e68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b0b      	cmp	r3, #11
 8006e72:	f200 81b3 	bhi.w	80071dc <USBH_Process+0x394>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <USBH_Process+0x34>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006ead 	.word	0x08006ead
 8006e80:	08006edf 	.word	0x08006edf
 8006e84:	08006f47 	.word	0x08006f47
 8006e88:	08007177 	.word	0x08007177
 8006e8c:	080071dd 	.word	0x080071dd
 8006e90:	08006feb 	.word	0x08006feb
 8006e94:	0800711d 	.word	0x0800711d
 8006e98:	08007021 	.word	0x08007021
 8006e9c:	08007041 	.word	0x08007041
 8006ea0:	08007061 	.word	0x08007061
 8006ea4:	0800708f 	.word	0x0800708f
 8006ea8:	0800715f 	.word	0x0800715f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8193 	beq.w	80071e0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ec0:	20c8      	movs	r0, #200	; 0xc8
 8006ec2:	f001 fca3 	bl	800880c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fb99 	bl	80085fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006edc:	e180      	b.n	80071e0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d107      	bne.n	8006ef8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ef6:	e182      	b.n	80071fe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f02:	d914      	bls.n	8006f2e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d903      	bls.n	8006f26 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	220d      	movs	r2, #13
 8006f22:	701a      	strb	r2, [r3, #0]
      break;
 8006f24:	e16b      	b.n	80071fe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	701a      	strb	r2, [r3, #0]
      break;
 8006f2c:	e167      	b.n	80071fe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f34:	f103 020a 	add.w	r2, r3, #10
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006f3e:	200a      	movs	r0, #10
 8006f40:	f001 fc64 	bl	800880c <USBH_Delay>
      break;
 8006f44:	e15b      	b.n	80071fe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f56:	2104      	movs	r1, #4
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f5c:	2064      	movs	r0, #100	; 0x64
 8006f5e:	f001 fc55 	bl	800880c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 fb24 	bl	80085b0 <USBH_LL_GetSpeed>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2205      	movs	r2, #5
 8006f76:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f78:	2100      	movs	r1, #0
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f92f 	bl	80081de <USBH_AllocPipe>
 8006f80:	4603      	mov	r3, r0
 8006f82:	461a      	mov	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f88:	2180      	movs	r1, #128	; 0x80
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 f927 	bl	80081de <USBH_AllocPipe>
 8006f90:	4603      	mov	r3, r0
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7919      	ldrb	r1, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fac:	b292      	uxth	r2, r2
 8006fae:	9202      	str	r2, [sp, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	9201      	str	r2, [sp, #4]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2280      	movs	r2, #128	; 0x80
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 f8e0 	bl	8008180 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7959      	ldrb	r1, [r3, #5]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fd4:	b292      	uxth	r2, r2
 8006fd6:	9202      	str	r2, [sp, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	9201      	str	r2, [sp, #4]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 f8cc 	bl	8008180 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fe8:	e109      	b.n	80071fe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f90c 	bl	8007208 <USBH_HandleEnum>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 80f3 	bne.w	80071e4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800700c:	2b01      	cmp	r3, #1
 800700e:	d103      	bne.n	8007018 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2208      	movs	r2, #8
 8007014:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007016:	e0e5      	b.n	80071e4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2207      	movs	r2, #7
 800701c:	701a      	strb	r2, [r3, #0]
      break;
 800701e:	e0e1      	b.n	80071e4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80de 	beq.w	80071e8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007032:	2101      	movs	r1, #1
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2208      	movs	r2, #8
 800703c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800703e:	e0d3      	b.n	80071e8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007046:	b29b      	uxth	r3, r3
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fc20 	bl	8007890 <USBH_SetCfg>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 80ca 	bne.w	80071ec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2209      	movs	r2, #9
 800705c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800705e:	e0c5      	b.n	80071ec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800706e:	2101      	movs	r1, #1
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fc30 	bl	80078d6 <USBH_SetFeature>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 80b9 	bne.w	80071f0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	220a      	movs	r2, #10
 8007082:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007084:	e0b4      	b.n	80071f0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	220a      	movs	r2, #10
 800708a:	701a      	strb	r2, [r3, #0]
      break;
 800708c:	e0b0      	b.n	80071f0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80ad 	beq.w	80071f4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
 80070a6:	e016      	b.n	80070d6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80070a8:	7bfa      	ldrb	r2, [r7, #15]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32de      	adds	r2, #222	; 0xde
 80070ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b2:	791a      	ldrb	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d108      	bne.n	80070d0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80070be:	7bfa      	ldrb	r2, [r7, #15]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	32de      	adds	r2, #222	; 0xde
 80070c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80070ce:	e005      	b.n	80070dc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	3301      	adds	r3, #1
 80070d4:	73fb      	strb	r3, [r7, #15]
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0e5      	beq.n	80070a8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d016      	beq.n	8007114 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	4798      	blx	r3
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2206      	movs	r2, #6
 80070fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007104:	2103      	movs	r1, #3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800710a:	e073      	b.n	80071f4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	220d      	movs	r2, #13
 8007110:	701a      	strb	r2, [r3, #0]
      break;
 8007112:	e06f      	b.n	80071f4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	220d      	movs	r2, #13
 8007118:	701a      	strb	r2, [r3, #0]
      break;
 800711a:	e06b      	b.n	80071f4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d017      	beq.n	8007156 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	4603      	mov	r3, r0
 8007134:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	220b      	movs	r2, #11
 8007142:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007144:	e058      	b.n	80071f8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d154      	bne.n	80071f8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	220d      	movs	r2, #13
 8007152:	701a      	strb	r2, [r3, #0]
      break;
 8007154:	e050      	b.n	80071f8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	220d      	movs	r2, #13
 800715a:	701a      	strb	r2, [r3, #0]
      break;
 800715c:	e04c      	b.n	80071f8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d049      	beq.n	80071fc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
      }
      break;
 8007174:	e042      	b.n	80071fc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fd72 	bl	8006c68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d009      	beq.n	80071a2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071b2:	2105      	movs	r1, #5
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d107      	bne.n	80071d4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff fe2b 	bl	8006e28 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071d2:	e014      	b.n	80071fe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 f9b5 	bl	8008544 <USBH_LL_Start>
      break;
 80071da:	e010      	b.n	80071fe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80071dc:	bf00      	nop
 80071de:	e00e      	b.n	80071fe <USBH_Process+0x3b6>
      break;
 80071e0:	bf00      	nop
 80071e2:	e00c      	b.n	80071fe <USBH_Process+0x3b6>
      break;
 80071e4:	bf00      	nop
 80071e6:	e00a      	b.n	80071fe <USBH_Process+0x3b6>
    break;
 80071e8:	bf00      	nop
 80071ea:	e008      	b.n	80071fe <USBH_Process+0x3b6>
      break;
 80071ec:	bf00      	nop
 80071ee:	e006      	b.n	80071fe <USBH_Process+0x3b6>
      break;
 80071f0:	bf00      	nop
 80071f2:	e004      	b.n	80071fe <USBH_Process+0x3b6>
      break;
 80071f4:	bf00      	nop
 80071f6:	e002      	b.n	80071fe <USBH_Process+0x3b6>
      break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <USBH_Process+0x3b6>
      break;
 80071fc:	bf00      	nop
  }
  return USBH_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af04      	add	r7, sp, #16
 800720e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007210:	2301      	movs	r3, #1
 8007212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007214:	2301      	movs	r3, #1
 8007216:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	785b      	ldrb	r3, [r3, #1]
 800721c:	2b07      	cmp	r3, #7
 800721e:	f200 81c1 	bhi.w	80075a4 <USBH_HandleEnum+0x39c>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <USBH_HandleEnum+0x20>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007249 	.word	0x08007249
 800722c:	08007307 	.word	0x08007307
 8007230:	08007371 	.word	0x08007371
 8007234:	080073ff 	.word	0x080073ff
 8007238:	08007469 	.word	0x08007469
 800723c:	080074d9 	.word	0x080074d9
 8007240:	0800751f 	.word	0x0800751f
 8007244:	08007565 	.word	0x08007565
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007248:	2108      	movs	r1, #8
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa50 	bl	80076f0 <USBH_Get_DevDesc>
 8007250:	4603      	mov	r3, r0
 8007252:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d130      	bne.n	80072bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7919      	ldrb	r1, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800727e:	b292      	uxth	r2, r2
 8007280:	9202      	str	r2, [sp, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	9201      	str	r2, [sp, #4]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	4603      	mov	r3, r0
 800728a:	2280      	movs	r2, #128	; 0x80
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 ff77 	bl	8008180 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7959      	ldrb	r1, [r3, #5]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072a6:	b292      	uxth	r2, r2
 80072a8:	9202      	str	r2, [sp, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	9201      	str	r2, [sp, #4]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	4603      	mov	r3, r0
 80072b2:	2200      	movs	r2, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 ff63 	bl	8008180 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072ba:	e175      	b.n	80075a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	f040 8172 	bne.w	80075a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ca:	3301      	adds	r3, #1
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d903      	bls.n	80072e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	220d      	movs	r2, #13
 80072e2:	701a      	strb	r2, [r3, #0]
      break;
 80072e4:	e160      	b.n	80075a8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	795b      	ldrb	r3, [r3, #5]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 ff97 	bl	8008220 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	791b      	ldrb	r3, [r3, #4]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 ff91 	bl	8008220 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]
      break;
 8007304:	e150      	b.n	80075a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007306:	2112      	movs	r1, #18
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f9f1 	bl	80076f0 <USBH_Get_DevDesc>
 800730e:	4603      	mov	r3, r0
 8007310:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800731e:	e145      	b.n	80075ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b03      	cmp	r3, #3
 8007324:	f040 8142 	bne.w	80075ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800732e:	3301      	adds	r3, #1
 8007330:	b2da      	uxtb	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800733e:	2b03      	cmp	r3, #3
 8007340:	d903      	bls.n	800734a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	220d      	movs	r2, #13
 8007346:	701a      	strb	r2, [r3, #0]
      break;
 8007348:	e130      	b.n	80075ac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	795b      	ldrb	r3, [r3, #5]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 ff65 	bl	8008220 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	791b      	ldrb	r3, [r3, #4]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 ff5f 	bl	8008220 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
      break;
 800736e:	e11d      	b.n	80075ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007370:	2101      	movs	r1, #1
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa68 	bl	8007848 <USBH_SetAddress>
 8007378:	4603      	mov	r3, r0
 800737a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d132      	bne.n	80073e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007382:	2002      	movs	r0, #2
 8007384:	f001 fa42 	bl	800880c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2203      	movs	r2, #3
 8007394:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7919      	ldrb	r1, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073aa:	b292      	uxth	r2, r2
 80073ac:	9202      	str	r2, [sp, #8]
 80073ae:	2200      	movs	r2, #0
 80073b0:	9201      	str	r2, [sp, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4603      	mov	r3, r0
 80073b6:	2280      	movs	r2, #128	; 0x80
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fee1 	bl	8008180 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	7959      	ldrb	r1, [r3, #5]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073d2:	b292      	uxth	r2, r2
 80073d4:	9202      	str	r2, [sp, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	9201      	str	r2, [sp, #4]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	4603      	mov	r3, r0
 80073de:	2200      	movs	r2, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fecd 	bl	8008180 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073e6:	e0e3      	b.n	80075b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	f040 80e0 	bne.w	80075b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	220d      	movs	r2, #13
 80073f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	705a      	strb	r2, [r3, #1]
      break;
 80073fc:	e0d8      	b.n	80075b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80073fe:	2109      	movs	r1, #9
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f99d 	bl	8007740 <USBH_Get_CfgDesc>
 8007406:	4603      	mov	r3, r0
 8007408:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2204      	movs	r2, #4
 8007414:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007416:	e0cd      	b.n	80075b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b03      	cmp	r3, #3
 800741c:	f040 80ca 	bne.w	80075b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007426:	3301      	adds	r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007436:	2b03      	cmp	r3, #3
 8007438:	d903      	bls.n	8007442 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220d      	movs	r2, #13
 800743e:	701a      	strb	r2, [r3, #0]
      break;
 8007440:	e0b8      	b.n	80075b4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	795b      	ldrb	r3, [r3, #5]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fee9 	bl	8008220 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	791b      	ldrb	r3, [r3, #4]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fee3 	bl	8008220 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
      break;
 8007466:	e0a5      	b.n	80075b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f965 	bl	8007740 <USBH_Get_CfgDesc>
 8007476:	4603      	mov	r3, r0
 8007478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2205      	movs	r2, #5
 8007484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007486:	e097      	b.n	80075b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b03      	cmp	r3, #3
 800748c:	f040 8094 	bne.w	80075b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007496:	3301      	adds	r3, #1
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d903      	bls.n	80074b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	220d      	movs	r2, #13
 80074ae:	701a      	strb	r2, [r3, #0]
      break;
 80074b0:	e082      	b.n	80075b8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	795b      	ldrb	r3, [r3, #5]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 feb1 	bl	8008220 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	791b      	ldrb	r3, [r3, #4]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 feab 	bl	8008220 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
      break;
 80074d6:	e06f      	b.n	80075b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d019      	beq.n	8007516 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074ee:	23ff      	movs	r3, #255	; 0xff
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f949 	bl	8007788 <USBH_Get_StringDesc>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d103      	bne.n	8007508 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2206      	movs	r2, #6
 8007504:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007506:	e059      	b.n	80075bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	2b03      	cmp	r3, #3
 800750c:	d156      	bne.n	80075bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2206      	movs	r2, #6
 8007512:	705a      	strb	r2, [r3, #1]
      break;
 8007514:	e052      	b.n	80075bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2206      	movs	r2, #6
 800751a:	705a      	strb	r2, [r3, #1]
      break;
 800751c:	e04e      	b.n	80075bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007524:	2b00      	cmp	r3, #0
 8007526:	d019      	beq.n	800755c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007534:	23ff      	movs	r3, #255	; 0xff
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f926 	bl	8007788 <USBH_Get_StringDesc>
 800753c:	4603      	mov	r3, r0
 800753e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2207      	movs	r2, #7
 800754a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800754c:	e038      	b.n	80075c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d135      	bne.n	80075c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2207      	movs	r2, #7
 8007558:	705a      	strb	r2, [r3, #1]
      break;
 800755a:	e031      	b.n	80075c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2207      	movs	r2, #7
 8007560:	705a      	strb	r2, [r3, #1]
      break;
 8007562:	e02d      	b.n	80075c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800756a:	2b00      	cmp	r3, #0
 800756c:	d017      	beq.n	800759e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800757a:	23ff      	movs	r3, #255	; 0xff
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f903 	bl	8007788 <USBH_Get_StringDesc>
 8007582:	4603      	mov	r3, r0
 8007584:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d102      	bne.n	8007592 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007590:	e018      	b.n	80075c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d115      	bne.n	80075c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]
      break;
 800759c:	e012      	b.n	80075c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
      break;
 80075a2:	e00f      	b.n	80075c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80075a4:	bf00      	nop
 80075a6:	e00e      	b.n	80075c6 <USBH_HandleEnum+0x3be>
      break;
 80075a8:	bf00      	nop
 80075aa:	e00c      	b.n	80075c6 <USBH_HandleEnum+0x3be>
      break;
 80075ac:	bf00      	nop
 80075ae:	e00a      	b.n	80075c6 <USBH_HandleEnum+0x3be>
      break;
 80075b0:	bf00      	nop
 80075b2:	e008      	b.n	80075c6 <USBH_HandleEnum+0x3be>
      break;
 80075b4:	bf00      	nop
 80075b6:	e006      	b.n	80075c6 <USBH_HandleEnum+0x3be>
      break;
 80075b8:	bf00      	nop
 80075ba:	e004      	b.n	80075c6 <USBH_HandleEnum+0x3be>
      break;
 80075bc:	bf00      	nop
 80075be:	e002      	b.n	80075c6 <USBH_HandleEnum+0x3be>
      break;
 80075c0:	bf00      	nop
 80075c2:	e000      	b.n	80075c6 <USBH_HandleEnum+0x3be>
      break;
 80075c4:	bf00      	nop
  }
  return Status;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f804 	bl	8007612 <USBH_HandleSof>
}
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b0b      	cmp	r3, #11
 8007622:	d10a      	bne.n	800763a <USBH_HandleSof+0x28>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
  }
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007652:	bf00      	nop
}
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800766e:	bf00      	nop
}
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 ff56 	bl	800857a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	791b      	ldrb	r3, [r3, #4]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fda3 	bl	8008220 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	795b      	ldrb	r3, [r3, #5]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fd9d 	bl	8008220 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	b29b      	uxth	r3, r3
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	4613      	mov	r3, r2
 800770a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800770e:	2100      	movs	r1, #0
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f864 	bl	80077de <USBH_GetDescriptor>
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	b292      	uxth	r2, r2
 8007730:	4619      	mov	r1, r3
 8007732:	f000 f918 	bl	8007966 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af02      	add	r7, sp, #8
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	331c      	adds	r3, #28
 8007750:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007752:	887b      	ldrh	r3, [r7, #2]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775c:	2100      	movs	r1, #0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f83d 	bl	80077de <USBH_GetDescriptor>
 8007764:	4603      	mov	r3, r0
 8007766:	72fb      	strb	r3, [r7, #11]
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d107      	bne.n	800777e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007774:	887a      	ldrh	r2, [r7, #2]
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	4618      	mov	r0, r3
 800777a:	f000 f964 	bl	8007a46 <USBH_ParseCfgDesc>
  }

  return status;
 800777e:	7afb      	ldrb	r3, [r7, #11]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af02      	add	r7, sp, #8
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	461a      	mov	r2, r3
 8007794:	460b      	mov	r3, r1
 8007796:	72fb      	strb	r3, [r7, #11]
 8007798:	4613      	mov	r3, r2
 800779a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80077ac:	893b      	ldrh	r3, [r7, #8]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	460b      	mov	r3, r1
 80077b2:	2100      	movs	r1, #0
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f812 	bl	80077de <USBH_GetDescriptor>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d107      	bne.n	80077d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077ca:	893a      	ldrh	r2, [r7, #8]
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fa37 	bl	8007c42 <USBH_ParseStringDesc>
  }

  return status;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	607b      	str	r3, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	72fb      	strb	r3, [r7, #11]
 80077ec:	4613      	mov	r3, r2
 80077ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	789b      	ldrb	r3, [r3, #2]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d11c      	bne.n	8007832 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2206      	movs	r2, #6
 8007808:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	893a      	ldrh	r2, [r7, #8]
 800780e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007810:	893b      	ldrh	r3, [r7, #8]
 8007812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800781a:	d104      	bne.n	8007826 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f240 4209 	movw	r2, #1033	; 0x409
 8007822:	829a      	strh	r2, [r3, #20]
 8007824:	e002      	b.n	800782c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8b3a      	ldrh	r2, [r7, #24]
 8007830:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007832:	8b3b      	ldrh	r3, [r7, #24]
 8007834:	461a      	mov	r2, r3
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fa50 	bl	8007cde <USBH_CtlReq>
 800783e:	4603      	mov	r3, r0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	789b      	ldrb	r3, [r3, #2]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d10f      	bne.n	800787c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2205      	movs	r2, #5
 8007866:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	b29a      	uxth	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800787c:	2200      	movs	r2, #0
 800787e:	2100      	movs	r1, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa2c 	bl	8007cde <USBH_CtlReq>
 8007886:	4603      	mov	r3, r0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	789b      	ldrb	r3, [r3, #2]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d10e      	bne.n	80078c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2209      	movs	r2, #9
 80078ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	887a      	ldrh	r2, [r7, #2]
 80078b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa09 	bl	8007cde <USBH_CtlReq>
 80078cc:	4603      	mov	r3, r0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	789b      	ldrb	r3, [r3, #2]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d10f      	bne.n	800790a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2203      	movs	r2, #3
 80078f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f9e5 	bl	8007cde <USBH_CtlReq>
 8007914:	4603      	mov	r3, r0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	789b      	ldrb	r3, [r3, #2]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d10f      	bne.n	8007952 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2202      	movs	r2, #2
 8007936:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	b29a      	uxth	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007952:	2200      	movs	r2, #0
 8007954:	2100      	movs	r1, #0
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f9c1 	bl	8007cde <USBH_CtlReq>
 800795c:	4603      	mov	r3, r0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	4613      	mov	r3, r2
 8007972:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	781a      	ldrb	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	785a      	ldrb	r2, [r3, #1]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	3302      	adds	r3, #2
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	b29a      	uxth	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	3303      	adds	r3, #3
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	021b      	lsls	r3, r3, #8
 8007996:	b29b      	uxth	r3, r3
 8007998:	4313      	orrs	r3, r2
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	791a      	ldrb	r2, [r3, #4]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	795a      	ldrb	r2, [r3, #5]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	799a      	ldrb	r2, [r3, #6]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	79da      	ldrb	r2, [r3, #7]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d939      	bls.n	8007a3a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	3308      	adds	r3, #8
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	3309      	adds	r3, #9
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	b29b      	uxth	r3, r3
 80079da:	4313      	orrs	r3, r2
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	330a      	adds	r3, #10
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	330b      	adds	r3, #11
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	330c      	adds	r3, #12
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	330d      	adds	r3, #13
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4313      	orrs	r3, r2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	7b9a      	ldrb	r2, [r3, #14]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	7bda      	ldrb	r2, [r3, #15]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	7c1a      	ldrb	r2, [r3, #16]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	7c5a      	ldrb	r2, [r3, #17]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	745a      	strb	r2, [r3, #17]
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b08a      	sub	sp, #40	; 0x28
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	4613      	mov	r3, r2
 8007a52:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	785a      	ldrb	r2, [r3, #1]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3302      	adds	r3, #2
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3303      	adds	r3, #3
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	791a      	ldrb	r2, [r3, #4]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	795a      	ldrb	r2, [r3, #5]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	799a      	ldrb	r2, [r3, #6]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	79da      	ldrb	r2, [r3, #7]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	7a1a      	ldrb	r2, [r3, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	d95f      	bls.n	8007b82 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ac2:	2309      	movs	r3, #9
 8007ac4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007aca:	e051      	b.n	8007b70 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007acc:	f107 0316 	add.w	r3, r7, #22
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ad4:	f000 f8e8 	bl	8007ca8 <USBH_GetNextDesc>
 8007ad8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d146      	bne.n	8007b70 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ae6:	221a      	movs	r2, #26
 8007ae8:	fb02 f303 	mul.w	r3, r2, r3
 8007aec:	3308      	adds	r3, #8
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	4413      	add	r3, r2
 8007af2:	3302      	adds	r3, #2
 8007af4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007af8:	69f8      	ldr	r0, [r7, #28]
 8007afa:	f000 f846 	bl	8007b8a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b08:	e022      	b.n	8007b50 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b0a:	f107 0316 	add.w	r3, r7, #22
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b12:	f000 f8c9 	bl	8007ca8 <USBH_GetNextDesc>
 8007b16:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	2b05      	cmp	r3, #5
 8007b1e:	d117      	bne.n	8007b50 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b24:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b28:	3201      	adds	r2, #1
 8007b2a:	00d2      	lsls	r2, r2, #3
 8007b2c:	211a      	movs	r1, #26
 8007b2e:	fb01 f303 	mul.w	r3, r1, r3
 8007b32:	4413      	add	r3, r2
 8007b34:	3308      	adds	r3, #8
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4413      	add	r3, r2
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b40:	69b8      	ldr	r0, [r7, #24]
 8007b42:	f000 f851 	bl	8007be8 <USBH_ParseEPDesc>
            ep_ix++;
 8007b46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	791b      	ldrb	r3, [r3, #4]
 8007b54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d204      	bcs.n	8007b66 <USBH_ParseCfgDesc+0x120>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	885a      	ldrh	r2, [r3, #2]
 8007b60:	8afb      	ldrh	r3, [r7, #22]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d8d1      	bhi.n	8007b0a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d804      	bhi.n	8007b82 <USBH_ParseCfgDesc+0x13c>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	885a      	ldrh	r2, [r3, #2]
 8007b7c:	8afb      	ldrh	r3, [r7, #22]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d8a4      	bhi.n	8007acc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007b82:	bf00      	nop
 8007b84:	3728      	adds	r7, #40	; 0x28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	785a      	ldrb	r2, [r3, #1]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	789a      	ldrb	r2, [r3, #2]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	78da      	ldrb	r2, [r3, #3]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	791a      	ldrb	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	795a      	ldrb	r2, [r3, #5]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	799a      	ldrb	r2, [r3, #6]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	79da      	ldrb	r2, [r3, #7]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	7a1a      	ldrb	r2, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	721a      	strb	r2, [r3, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	785a      	ldrb	r2, [r3, #1]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	789a      	ldrb	r2, [r3, #2]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	78da      	ldrb	r2, [r3, #3]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	3304      	adds	r3, #4
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	3305      	adds	r3, #5
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	4313      	orrs	r3, r2
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	799a      	ldrb	r2, [r3, #6]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	719a      	strb	r2, [r3, #6]
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b087      	sub	sp, #28
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d120      	bne.n	8007c9c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	1e9a      	subs	r2, r3, #2
 8007c60:	88fb      	ldrh	r3, [r7, #6]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	bf28      	it	cs
 8007c66:	4613      	movcs	r3, r2
 8007c68:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c70:	2300      	movs	r3, #0
 8007c72:	82fb      	strh	r3, [r7, #22]
 8007c74:	e00b      	b.n	8007c8e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c76:	8afb      	ldrh	r3, [r7, #22]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	3301      	adds	r3, #1
 8007c86:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c88:	8afb      	ldrh	r3, [r7, #22]
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	82fb      	strh	r3, [r7, #22]
 8007c8e:	8afa      	ldrh	r2, [r7, #22]
 8007c90:	8abb      	ldrh	r3, [r7, #20]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d3ef      	bcc.n	8007c76 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	701a      	strb	r2, [r3, #0]
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	371c      	adds	r7, #28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	881a      	ldrh	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cec:	2301      	movs	r3, #1
 8007cee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	789b      	ldrb	r3, [r3, #2]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d002      	beq.n	8007cfe <USBH_CtlReq+0x20>
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d00f      	beq.n	8007d1c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007cfc:	e027      	b.n	8007d4e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2202      	movs	r2, #2
 8007d14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d16:	2301      	movs	r3, #1
 8007d18:	75fb      	strb	r3, [r7, #23]
      break;
 8007d1a:	e018      	b.n	8007d4e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f81b 	bl	8007d58 <USBH_HandleControl>
 8007d22:	4603      	mov	r3, r0
 8007d24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <USBH_CtlReq+0x54>
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d106      	bne.n	8007d40 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	761a      	strb	r2, [r3, #24]
      break;
 8007d3e:	e005      	b.n	8007d4c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d102      	bne.n	8007d4c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	709a      	strb	r2, [r3, #2]
      break;
 8007d4c:	bf00      	nop
  }
  return status;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7e1b      	ldrb	r3, [r3, #24]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	2b0a      	cmp	r3, #10
 8007d70:	f200 8156 	bhi.w	8008020 <USBH_HandleControl+0x2c8>
 8007d74:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <USBH_HandleControl+0x24>)
 8007d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7a:	bf00      	nop
 8007d7c:	08007da9 	.word	0x08007da9
 8007d80:	08007dc3 	.word	0x08007dc3
 8007d84:	08007e2d 	.word	0x08007e2d
 8007d88:	08007e53 	.word	0x08007e53
 8007d8c:	08007e8b 	.word	0x08007e8b
 8007d90:	08007eb5 	.word	0x08007eb5
 8007d94:	08007f07 	.word	0x08007f07
 8007d98:	08007f29 	.word	0x08007f29
 8007d9c:	08007f65 	.word	0x08007f65
 8007da0:	08007f8b 	.word	0x08007f8b
 8007da4:	08007fc9 	.word	0x08007fc9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f103 0110 	add.w	r1, r3, #16
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	795b      	ldrb	r3, [r3, #5]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f943 	bl	8008040 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	761a      	strb	r2, [r3, #24]
      break;
 8007dc0:	e139      	b.n	8008036 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	795b      	ldrb	r3, [r3, #5]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fcc5 	bl	8008758 <USBH_LL_GetURBState>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d11e      	bne.n	8007e16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	7c1b      	ldrb	r3, [r3, #16]
 8007ddc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007de0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	8adb      	ldrh	r3, [r3, #22]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007dea:	7b7b      	ldrb	r3, [r7, #13]
 8007dec:	2b80      	cmp	r3, #128	; 0x80
 8007dee:	d103      	bne.n	8007df8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2203      	movs	r2, #3
 8007df4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007df6:	e115      	b.n	8008024 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2205      	movs	r2, #5
 8007dfc:	761a      	strb	r2, [r3, #24]
      break;
 8007dfe:	e111      	b.n	8008024 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e00:	7b7b      	ldrb	r3, [r7, #13]
 8007e02:	2b80      	cmp	r3, #128	; 0x80
 8007e04:	d103      	bne.n	8007e0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2209      	movs	r2, #9
 8007e0a:	761a      	strb	r2, [r3, #24]
      break;
 8007e0c:	e10a      	b.n	8008024 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2207      	movs	r2, #7
 8007e12:	761a      	strb	r2, [r3, #24]
      break;
 8007e14:	e106      	b.n	8008024 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d003      	beq.n	8007e24 <USBH_HandleControl+0xcc>
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	f040 8100 	bne.w	8008024 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	220b      	movs	r2, #11
 8007e28:	761a      	strb	r2, [r3, #24]
      break;
 8007e2a:	e0fb      	b.n	8008024 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6899      	ldr	r1, [r3, #8]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	899a      	ldrh	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	791b      	ldrb	r3, [r3, #4]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f93a 	bl	80080be <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	761a      	strb	r2, [r3, #24]
      break;
 8007e50:	e0f1      	b.n	8008036 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	791b      	ldrb	r3, [r3, #4]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fc7d 	bl	8008758 <USBH_LL_GetURBState>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d102      	bne.n	8007e6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2209      	movs	r2, #9
 8007e6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b05      	cmp	r3, #5
 8007e72:	d102      	bne.n	8007e7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e74:	2303      	movs	r3, #3
 8007e76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e78:	e0d6      	b.n	8008028 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	f040 80d3 	bne.w	8008028 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	220b      	movs	r2, #11
 8007e86:	761a      	strb	r2, [r3, #24]
      break;
 8007e88:	e0ce      	b.n	8008028 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6899      	ldr	r1, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	899a      	ldrh	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	795b      	ldrb	r3, [r3, #5]
 8007e96:	2001      	movs	r0, #1
 8007e98:	9000      	str	r0, [sp, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f8ea 	bl	8008074 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2206      	movs	r2, #6
 8007eb0:	761a      	strb	r2, [r3, #24]
      break;
 8007eb2:	e0c0      	b.n	8008036 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	795b      	ldrb	r3, [r3, #5]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fc4c 	bl	8008758 <USBH_LL_GetURBState>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d103      	bne.n	8007ed2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2207      	movs	r2, #7
 8007ece:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ed0:	e0ac      	b.n	800802c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b05      	cmp	r3, #5
 8007ed6:	d105      	bne.n	8007ee4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	220c      	movs	r2, #12
 8007edc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee2:	e0a3      	b.n	800802c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d103      	bne.n	8007ef2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2205      	movs	r2, #5
 8007eee:	761a      	strb	r2, [r3, #24]
      break;
 8007ef0:	e09c      	b.n	800802c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	f040 8099 	bne.w	800802c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	220b      	movs	r2, #11
 8007efe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f00:	2302      	movs	r3, #2
 8007f02:	73fb      	strb	r3, [r7, #15]
      break;
 8007f04:	e092      	b.n	800802c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	791b      	ldrb	r3, [r3, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f8d5 	bl	80080be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2208      	movs	r2, #8
 8007f24:	761a      	strb	r2, [r3, #24]

      break;
 8007f26:	e086      	b.n	8008036 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	791b      	ldrb	r3, [r3, #4]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fc12 	bl	8008758 <USBH_LL_GetURBState>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d105      	bne.n	8007f4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	220d      	movs	r2, #13
 8007f42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f48:	e072      	b.n	8008030 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d103      	bne.n	8007f58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	220b      	movs	r2, #11
 8007f54:	761a      	strb	r2, [r3, #24]
      break;
 8007f56:	e06b      	b.n	8008030 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b05      	cmp	r3, #5
 8007f5c:	d168      	bne.n	8008030 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	73fb      	strb	r3, [r7, #15]
      break;
 8007f62:	e065      	b.n	8008030 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	795b      	ldrb	r3, [r3, #5]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	9200      	str	r2, [sp, #0]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f87f 	bl	8008074 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	220a      	movs	r2, #10
 8007f86:	761a      	strb	r2, [r3, #24]
      break;
 8007f88:	e055      	b.n	8008036 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	795b      	ldrb	r3, [r3, #5]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fbe1 	bl	8008758 <USBH_LL_GetURBState>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d105      	bne.n	8007fac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	220d      	movs	r2, #13
 8007fa8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007faa:	e043      	b.n	8008034 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d103      	bne.n	8007fba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2209      	movs	r2, #9
 8007fb6:	761a      	strb	r2, [r3, #24]
      break;
 8007fb8:	e03c      	b.n	8008034 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d139      	bne.n	8008034 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	220b      	movs	r2, #11
 8007fc4:	761a      	strb	r2, [r3, #24]
      break;
 8007fc6:	e035      	b.n	8008034 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	7e5b      	ldrb	r3, [r3, #25]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	765a      	strb	r2, [r3, #25]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	7e5b      	ldrb	r3, [r3, #25]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d806      	bhi.n	8007fea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007fe8:	e025      	b.n	8008036 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ff0:	2106      	movs	r1, #6
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	795b      	ldrb	r3, [r3, #5]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f90c 	bl	8008220 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	791b      	ldrb	r3, [r3, #4]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f906 	bl	8008220 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800801a:	2302      	movs	r3, #2
 800801c:	73fb      	strb	r3, [r7, #15]
      break;
 800801e:	e00a      	b.n	8008036 <USBH_HandleControl+0x2de>

    default:
      break;
 8008020:	bf00      	nop
 8008022:	e008      	b.n	8008036 <USBH_HandleControl+0x2de>
      break;
 8008024:	bf00      	nop
 8008026:	e006      	b.n	8008036 <USBH_HandleControl+0x2de>
      break;
 8008028:	bf00      	nop
 800802a:	e004      	b.n	8008036 <USBH_HandleControl+0x2de>
      break;
 800802c:	bf00      	nop
 800802e:	e002      	b.n	8008036 <USBH_HandleControl+0x2de>
      break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <USBH_HandleControl+0x2de>
      break;
 8008034:	bf00      	nop
  }

  return status;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af04      	add	r7, sp, #16
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800804e:	79f9      	ldrb	r1, [r7, #7]
 8008050:	2300      	movs	r3, #0
 8008052:	9303      	str	r3, [sp, #12]
 8008054:	2308      	movs	r3, #8
 8008056:	9302      	str	r3, [sp, #8]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	2300      	movs	r3, #0
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	2300      	movs	r3, #0
 8008062:	2200      	movs	r2, #0
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fb46 	bl	80086f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af04      	add	r7, sp, #16
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4611      	mov	r1, r2
 8008080:	461a      	mov	r2, r3
 8008082:	460b      	mov	r3, r1
 8008084:	80fb      	strh	r3, [r7, #6]
 8008086:	4613      	mov	r3, r2
 8008088:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008098:	7979      	ldrb	r1, [r7, #5]
 800809a:	7e3b      	ldrb	r3, [r7, #24]
 800809c:	9303      	str	r3, [sp, #12]
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	2301      	movs	r3, #1
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	2300      	movs	r3, #0
 80080ac:	2200      	movs	r2, #0
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 fb21 	bl	80086f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b088      	sub	sp, #32
 80080c2:	af04      	add	r7, sp, #16
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	4611      	mov	r1, r2
 80080ca:	461a      	mov	r2, r3
 80080cc:	460b      	mov	r3, r1
 80080ce:	80fb      	strh	r3, [r7, #6]
 80080d0:	4613      	mov	r3, r2
 80080d2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080d4:	7979      	ldrb	r1, [r7, #5]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	88fb      	ldrh	r3, [r7, #6]
 80080dc:	9302      	str	r3, [sp, #8]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	2301      	movs	r3, #1
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	2300      	movs	r3, #0
 80080e8:	2201      	movs	r2, #1
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 fb03 	bl	80086f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80080f0:	2300      	movs	r3, #0

}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b088      	sub	sp, #32
 80080fe:	af04      	add	r7, sp, #16
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	4611      	mov	r1, r2
 8008106:	461a      	mov	r2, r3
 8008108:	460b      	mov	r3, r1
 800810a:	80fb      	strh	r3, [r7, #6]
 800810c:	4613      	mov	r3, r2
 800810e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800811e:	7979      	ldrb	r1, [r7, #5]
 8008120:	7e3b      	ldrb	r3, [r7, #24]
 8008122:	9303      	str	r3, [sp, #12]
 8008124:	88fb      	ldrh	r3, [r7, #6]
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	2301      	movs	r3, #1
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2302      	movs	r3, #2
 8008132:	2200      	movs	r2, #0
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 fade 	bl	80086f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af04      	add	r7, sp, #16
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4611      	mov	r1, r2
 8008150:	461a      	mov	r2, r3
 8008152:	460b      	mov	r3, r1
 8008154:	80fb      	strh	r3, [r7, #6]
 8008156:	4613      	mov	r3, r2
 8008158:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800815a:	7979      	ldrb	r1, [r7, #5]
 800815c:	2300      	movs	r3, #0
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	88fb      	ldrh	r3, [r7, #6]
 8008162:	9302      	str	r3, [sp, #8]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	2301      	movs	r3, #1
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	2302      	movs	r3, #2
 800816e:	2201      	movs	r2, #1
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 fac0 	bl	80086f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af04      	add	r7, sp, #16
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	4608      	mov	r0, r1
 800818a:	4611      	mov	r1, r2
 800818c:	461a      	mov	r2, r3
 800818e:	4603      	mov	r3, r0
 8008190:	70fb      	strb	r3, [r7, #3]
 8008192:	460b      	mov	r3, r1
 8008194:	70bb      	strb	r3, [r7, #2]
 8008196:	4613      	mov	r3, r2
 8008198:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800819a:	7878      	ldrb	r0, [r7, #1]
 800819c:	78ba      	ldrb	r2, [r7, #2]
 800819e:	78f9      	ldrb	r1, [r7, #3]
 80081a0:	8b3b      	ldrh	r3, [r7, #24]
 80081a2:	9302      	str	r3, [sp, #8]
 80081a4:	7d3b      	ldrb	r3, [r7, #20]
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	7c3b      	ldrb	r3, [r7, #16]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4603      	mov	r3, r0
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa53 	bl	800865a <USBH_LL_OpenPipe>

  return USBH_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa72 	bl	80086b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f836 	bl	800825c <USBH_GetFreePipe>
 80081f0:	4603      	mov	r3, r0
 80081f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081f4:	89fb      	ldrh	r3, [r7, #14]
 80081f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00a      	beq.n	8008214 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80081fe:	78fa      	ldrb	r2, [r7, #3]
 8008200:	89fb      	ldrh	r3, [r7, #14]
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	33e0      	adds	r3, #224	; 0xe0
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	440b      	add	r3, r1
 8008212:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008214:	89fb      	ldrh	r3, [r7, #14]
 8008216:	b2db      	uxtb	r3, r3
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	2b0a      	cmp	r3, #10
 8008230:	d80d      	bhi.n	800824e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008232:	78fb      	ldrb	r3, [r7, #3]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	33e0      	adds	r3, #224	; 0xe0
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	33e0      	adds	r3, #224	; 0xe0
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
 800826c:	e00f      	b.n	800828e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	33e0      	adds	r3, #224	; 0xe0
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d102      	bne.n	8008288 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	b29b      	uxth	r3, r3
 8008286:	e007      	b.n	8008298 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	3301      	adds	r3, #1
 800828c:	73fb      	strb	r3, [r7, #15]
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	2b0a      	cmp	r3, #10
 8008292:	d9ec      	bls.n	800826e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008294:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80082a8:	2201      	movs	r2, #1
 80082aa:	490e      	ldr	r1, [pc, #56]	; (80082e4 <MX_USB_HOST_Init+0x40>)
 80082ac:	480e      	ldr	r0, [pc, #56]	; (80082e8 <MX_USB_HOST_Init+0x44>)
 80082ae:	f7fe fca1 	bl	8006bf4 <USBH_Init>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80082b8:	f7f8 fbaa 	bl	8000a10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80082bc:	490b      	ldr	r1, [pc, #44]	; (80082ec <MX_USB_HOST_Init+0x48>)
 80082be:	480a      	ldr	r0, [pc, #40]	; (80082e8 <MX_USB_HOST_Init+0x44>)
 80082c0:	f7fe fd26 	bl	8006d10 <USBH_RegisterClass>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80082ca:	f7f8 fba1 	bl	8000a10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80082ce:	4806      	ldr	r0, [pc, #24]	; (80082e8 <MX_USB_HOST_Init+0x44>)
 80082d0:	f7fe fdaa 	bl	8006e28 <USBH_Start>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80082da:	f7f8 fb99 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80082de:	bf00      	nop
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	08008305 	.word	0x08008305
 80082e8:	200001fc 	.word	0x200001fc
 80082ec:	2000000c 	.word	0x2000000c

080082f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082f4:	4802      	ldr	r0, [pc, #8]	; (8008300 <MX_USB_HOST_Process+0x10>)
 80082f6:	f7fe fda7 	bl	8006e48 <USBH_Process>
}
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200001fc 	.word	0x200001fc

08008304 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	3b01      	subs	r3, #1
 8008314:	2b04      	cmp	r3, #4
 8008316:	d819      	bhi.n	800834c <USBH_UserProcess+0x48>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <USBH_UserProcess+0x1c>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	0800834d 	.word	0x0800834d
 8008324:	0800833d 	.word	0x0800833d
 8008328:	0800834d 	.word	0x0800834d
 800832c:	08008345 	.word	0x08008345
 8008330:	08008335 	.word	0x08008335
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <USBH_UserProcess+0x58>)
 8008336:	2203      	movs	r2, #3
 8008338:	701a      	strb	r2, [r3, #0]
  break;
 800833a:	e008      	b.n	800834e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800833c:	4b07      	ldr	r3, [pc, #28]	; (800835c <USBH_UserProcess+0x58>)
 800833e:	2202      	movs	r2, #2
 8008340:	701a      	strb	r2, [r3, #0]
  break;
 8008342:	e004      	b.n	800834e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008344:	4b05      	ldr	r3, [pc, #20]	; (800835c <USBH_UserProcess+0x58>)
 8008346:	2201      	movs	r2, #1
 8008348:	701a      	strb	r2, [r3, #0]
  break;
 800834a:	e000      	b.n	800834e <USBH_UserProcess+0x4a>

  default:
  break;
 800834c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	200000b0 	.word	0x200000b0

08008360 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008368:	f107 0314 	add.w	r3, r7, #20
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	605a      	str	r2, [r3, #4]
 8008372:	609a      	str	r2, [r3, #8]
 8008374:	60da      	str	r2, [r3, #12]
 8008376:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008380:	d147      	bne.n	8008412 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008382:	2300      	movs	r3, #0
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	4b25      	ldr	r3, [pc, #148]	; (800841c <HAL_HCD_MspInit+0xbc>)
 8008388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838a:	4a24      	ldr	r2, [pc, #144]	; (800841c <HAL_HCD_MspInit+0xbc>)
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	6313      	str	r3, [r2, #48]	; 0x30
 8008392:	4b22      	ldr	r3, [pc, #136]	; (800841c <HAL_HCD_MspInit+0xbc>)
 8008394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800839e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80083ac:	f107 0314 	add.w	r3, r7, #20
 80083b0:	4619      	mov	r1, r3
 80083b2:	481b      	ldr	r0, [pc, #108]	; (8008420 <HAL_HCD_MspInit+0xc0>)
 80083b4:	f7f8 ff10 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80083b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80083bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083be:	2302      	movs	r3, #2
 80083c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083c6:	2300      	movs	r3, #0
 80083c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083ca:	230a      	movs	r3, #10
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ce:	f107 0314 	add.w	r3, r7, #20
 80083d2:	4619      	mov	r1, r3
 80083d4:	4812      	ldr	r0, [pc, #72]	; (8008420 <HAL_HCD_MspInit+0xc0>)
 80083d6:	f7f8 feff 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083da:	4b10      	ldr	r3, [pc, #64]	; (800841c <HAL_HCD_MspInit+0xbc>)
 80083dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083de:	4a0f      	ldr	r2, [pc, #60]	; (800841c <HAL_HCD_MspInit+0xbc>)
 80083e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e4:	6353      	str	r3, [r2, #52]	; 0x34
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	4b0c      	ldr	r3, [pc, #48]	; (800841c <HAL_HCD_MspInit+0xbc>)
 80083ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ee:	4a0b      	ldr	r2, [pc, #44]	; (800841c <HAL_HCD_MspInit+0xbc>)
 80083f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083f4:	6453      	str	r3, [r2, #68]	; 0x44
 80083f6:	4b09      	ldr	r3, [pc, #36]	; (800841c <HAL_HCD_MspInit+0xbc>)
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008402:	2200      	movs	r2, #0
 8008404:	2100      	movs	r1, #0
 8008406:	2043      	movs	r0, #67	; 0x43
 8008408:	f7f8 feaf 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800840c:	2043      	movs	r0, #67	; 0x43
 800840e:	f7f8 fec8 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008412:	bf00      	nop
 8008414:	3728      	adds	r7, #40	; 0x28
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	40023800 	.word	0x40023800
 8008420:	40020000 	.word	0x40020000

08008424 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff f8db 	bl	80075ee <USBH_LL_IncTimer>
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff f913 	bl	800767a <USBH_LL_Connect>
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff f91c 	bl	80076a8 <USBH_LL_Disconnect>
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
 8008484:	4613      	mov	r3, r2
 8008486:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff f8cd 	bl	8007642 <USBH_LL_PortEnabled>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff f8cd 	bl	800765e <USBH_LL_PortDisabled>
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d12a      	bne.n	8008534 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80084de:	4a18      	ldr	r2, [pc, #96]	; (8008540 <USBH_LL_Init+0x74>)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a15      	ldr	r2, [pc, #84]	; (8008540 <USBH_LL_Init+0x74>)
 80084ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084ee:	4b14      	ldr	r3, [pc, #80]	; (8008540 <USBH_LL_Init+0x74>)
 80084f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <USBH_LL_Init+0x74>)
 80084f8:	2208      	movs	r2, #8
 80084fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084fc:	4b10      	ldr	r3, [pc, #64]	; (8008540 <USBH_LL_Init+0x74>)
 80084fe:	2201      	movs	r2, #1
 8008500:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008502:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <USBH_LL_Init+0x74>)
 8008504:	2200      	movs	r2, #0
 8008506:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008508:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <USBH_LL_Init+0x74>)
 800850a:	2202      	movs	r2, #2
 800850c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800850e:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <USBH_LL_Init+0x74>)
 8008510:	2200      	movs	r2, #0
 8008512:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008514:	480a      	ldr	r0, [pc, #40]	; (8008540 <USBH_LL_Init+0x74>)
 8008516:	f7f9 f814 	bl	8001542 <HAL_HCD_Init>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008520:	f7f8 fa76 	bl	8000a10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008524:	4806      	ldr	r0, [pc, #24]	; (8008540 <USBH_LL_Init+0x74>)
 8008526:	f7f9 fbf8 	bl	8001d1a <HAL_HCD_GetCurrentFrame>
 800852a:	4603      	mov	r3, r0
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff f84e 	bl	80075d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	200005d4 	.word	0x200005d4

08008544 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800855a:	4618      	mov	r0, r3
 800855c:	f7f9 fb67 	bl	8001c2e <HAL_HCD_Start>
 8008560:	4603      	mov	r3, r0
 8008562:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 f95c 	bl	8008824 <USBH_Get_USB_Status>
 800856c:	4603      	mov	r3, r0
 800856e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008570:	7bbb      	ldrb	r3, [r7, #14]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008590:	4618      	mov	r0, r3
 8008592:	f7f9 fb6f 	bl	8001c74 <HAL_HCD_Stop>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f941 	bl	8008824 <USBH_Get_USB_Status>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80085b8:	2301      	movs	r3, #1
 80085ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7f9 fbb7 	bl	8001d36 <HAL_HCD_GetCurrentSpeed>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d00c      	beq.n	80085e8 <USBH_LL_GetSpeed+0x38>
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d80d      	bhi.n	80085ee <USBH_LL_GetSpeed+0x3e>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <USBH_LL_GetSpeed+0x2c>
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d003      	beq.n	80085e2 <USBH_LL_GetSpeed+0x32>
 80085da:	e008      	b.n	80085ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
    break;
 80085e0:	e008      	b.n	80085f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80085e2:	2301      	movs	r3, #1
 80085e4:	73fb      	strb	r3, [r7, #15]
    break;
 80085e6:	e005      	b.n	80085f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80085e8:	2302      	movs	r3, #2
 80085ea:	73fb      	strb	r3, [r7, #15]
    break;
 80085ec:	e002      	b.n	80085f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80085ee:	2301      	movs	r3, #1
 80085f0:	73fb      	strb	r3, [r7, #15]
    break;
 80085f2:	bf00      	nop
  }
  return  speed;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008614:	4618      	mov	r0, r3
 8008616:	f7f9 fb4a 	bl	8001cae <HAL_HCD_ResetPort>
 800861a:	4603      	mov	r3, r0
 800861c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	4618      	mov	r0, r3
 8008622:	f000 f8ff 	bl	8008824 <USBH_Get_USB_Status>
 8008626:	4603      	mov	r3, r0
 8008628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800862a:	7bbb      	ldrb	r3, [r7, #14]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f7f9 fb51 	bl	8001cf2 <HAL_HCD_HC_GetXferCount>
 8008650:	4603      	mov	r3, r0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800865a:	b590      	push	{r4, r7, lr}
 800865c:	b089      	sub	sp, #36	; 0x24
 800865e:	af04      	add	r7, sp, #16
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	4608      	mov	r0, r1
 8008664:	4611      	mov	r1, r2
 8008666:	461a      	mov	r2, r3
 8008668:	4603      	mov	r3, r0
 800866a:	70fb      	strb	r3, [r7, #3]
 800866c:	460b      	mov	r3, r1
 800866e:	70bb      	strb	r3, [r7, #2]
 8008670:	4613      	mov	r3, r2
 8008672:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008682:	787c      	ldrb	r4, [r7, #1]
 8008684:	78ba      	ldrb	r2, [r7, #2]
 8008686:	78f9      	ldrb	r1, [r7, #3]
 8008688:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800868a:	9302      	str	r3, [sp, #8]
 800868c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	4623      	mov	r3, r4
 800869a:	f7f8 ffb4 	bl	8001606 <HAL_HCD_HC_Init>
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f8bd 	bl	8008824 <USBH_Get_USB_Status>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd90      	pop	{r4, r7, pc}

080086b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f9 f824 	bl	8001724 <HAL_HCD_HC_Halt>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f89e 	bl	8008824 <USBH_Get_USB_Status>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086f6:	b590      	push	{r4, r7, lr}
 80086f8:	b089      	sub	sp, #36	; 0x24
 80086fa:	af04      	add	r7, sp, #16
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	461a      	mov	r2, r3
 8008704:	4603      	mov	r3, r0
 8008706:	70fb      	strb	r3, [r7, #3]
 8008708:	460b      	mov	r3, r1
 800870a:	70bb      	strb	r3, [r7, #2]
 800870c:	4613      	mov	r3, r2
 800870e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800871e:	787c      	ldrb	r4, [r7, #1]
 8008720:	78ba      	ldrb	r2, [r7, #2]
 8008722:	78f9      	ldrb	r1, [r7, #3]
 8008724:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800872c:	9302      	str	r3, [sp, #8]
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4623      	mov	r3, r4
 800873a:	f7f9 f817 	bl	800176c <HAL_HCD_HC_SubmitRequest>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	4618      	mov	r0, r3
 8008746:	f000 f86d 	bl	8008824 <USBH_Get_USB_Status>
 800874a:	4603      	mov	r3, r0
 800874c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800874e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	bd90      	pop	{r4, r7, pc}

08008758 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800876a:	78fa      	ldrb	r2, [r7, #3]
 800876c:	4611      	mov	r1, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f7f9 faab 	bl	8001cca <HAL_HCD_HC_GetURBState>
 8008774:	4603      	mov	r3, r0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008790:	2b01      	cmp	r3, #1
 8008792:	d103      	bne.n	800879c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f870 	bl	800887c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800879c:	20c8      	movs	r0, #200	; 0xc8
 800879e:	f7f8 fbe5 	bl	8000f6c <HAL_Delay>
  return USBH_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
 80087b8:	4613      	mov	r3, r2
 80087ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	212c      	movs	r1, #44	; 0x2c
 80087ca:	fb01 f303 	mul.w	r3, r1, r3
 80087ce:	4413      	add	r3, r2
 80087d0:	333b      	adds	r3, #59	; 0x3b
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	212c      	movs	r1, #44	; 0x2c
 80087de:	fb01 f303 	mul.w	r3, r1, r3
 80087e2:	4413      	add	r3, r2
 80087e4:	3354      	adds	r3, #84	; 0x54
 80087e6:	78ba      	ldrb	r2, [r7, #2]
 80087e8:	701a      	strb	r2, [r3, #0]
 80087ea:	e008      	b.n	80087fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80087ec:	78fb      	ldrb	r3, [r7, #3]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	212c      	movs	r1, #44	; 0x2c
 80087f2:	fb01 f303 	mul.w	r3, r1, r3
 80087f6:	4413      	add	r3, r2
 80087f8:	3355      	adds	r3, #85	; 0x55
 80087fa:	78ba      	ldrb	r2, [r7, #2]
 80087fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7f8 fba9 	bl	8000f6c <HAL_Delay>
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	2b03      	cmp	r3, #3
 8008836:	d817      	bhi.n	8008868 <USBH_Get_USB_Status+0x44>
 8008838:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <USBH_Get_USB_Status+0x1c>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	08008851 	.word	0x08008851
 8008844:	08008857 	.word	0x08008857
 8008848:	0800885d 	.word	0x0800885d
 800884c:	08008863 	.word	0x08008863
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
    break;
 8008854:	e00b      	b.n	800886e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]
    break;
 800885a:	e008      	b.n	800886e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800885c:	2301      	movs	r3, #1
 800885e:	73fb      	strb	r3, [r7, #15]
    break;
 8008860:	e005      	b.n	800886e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008862:	2302      	movs	r3, #2
 8008864:	73fb      	strb	r3, [r7, #15]
    break;
 8008866:	e002      	b.n	800886e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008868:	2302      	movs	r3, #2
 800886a:	73fb      	strb	r3, [r7, #15]
    break;
 800886c:	bf00      	nop
  }
  return usb_status;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
 8008894:	e001      	b.n	800889a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	461a      	mov	r2, r3
 800889e:	2101      	movs	r1, #1
 80088a0:	4803      	ldr	r0, [pc, #12]	; (80088b0 <MX_DriverVbusFS+0x34>)
 80088a2:	f7f8 fe35 	bl	8001510 <HAL_GPIO_WritePin>
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40020800 	.word	0x40020800

080088b4 <__errno>:
 80088b4:	4b01      	ldr	r3, [pc, #4]	; (80088bc <__errno+0x8>)
 80088b6:	6818      	ldr	r0, [r3, #0]
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	2000002c 	.word	0x2000002c

080088c0 <__libc_init_array>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	4d0d      	ldr	r5, [pc, #52]	; (80088f8 <__libc_init_array+0x38>)
 80088c4:	4c0d      	ldr	r4, [pc, #52]	; (80088fc <__libc_init_array+0x3c>)
 80088c6:	1b64      	subs	r4, r4, r5
 80088c8:	10a4      	asrs	r4, r4, #2
 80088ca:	2600      	movs	r6, #0
 80088cc:	42a6      	cmp	r6, r4
 80088ce:	d109      	bne.n	80088e4 <__libc_init_array+0x24>
 80088d0:	4d0b      	ldr	r5, [pc, #44]	; (8008900 <__libc_init_array+0x40>)
 80088d2:	4c0c      	ldr	r4, [pc, #48]	; (8008904 <__libc_init_array+0x44>)
 80088d4:	f000 f8f8 	bl	8008ac8 <_init>
 80088d8:	1b64      	subs	r4, r4, r5
 80088da:	10a4      	asrs	r4, r4, #2
 80088dc:	2600      	movs	r6, #0
 80088de:	42a6      	cmp	r6, r4
 80088e0:	d105      	bne.n	80088ee <__libc_init_array+0x2e>
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e8:	4798      	blx	r3
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7ee      	b.n	80088cc <__libc_init_array+0xc>
 80088ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f2:	4798      	blx	r3
 80088f4:	3601      	adds	r6, #1
 80088f6:	e7f2      	b.n	80088de <__libc_init_array+0x1e>
 80088f8:	08008b04 	.word	0x08008b04
 80088fc:	08008b04 	.word	0x08008b04
 8008900:	08008b04 	.word	0x08008b04
 8008904:	08008b08 	.word	0x08008b08

08008908 <malloc>:
 8008908:	4b02      	ldr	r3, [pc, #8]	; (8008914 <malloc+0xc>)
 800890a:	4601      	mov	r1, r0
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	f000 b863 	b.w	80089d8 <_malloc_r>
 8008912:	bf00      	nop
 8008914:	2000002c 	.word	0x2000002c

08008918 <free>:
 8008918:	4b02      	ldr	r3, [pc, #8]	; (8008924 <free+0xc>)
 800891a:	4601      	mov	r1, r0
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f000 b80b 	b.w	8008938 <_free_r>
 8008922:	bf00      	nop
 8008924:	2000002c 	.word	0x2000002c

08008928 <memset>:
 8008928:	4402      	add	r2, r0
 800892a:	4603      	mov	r3, r0
 800892c:	4293      	cmp	r3, r2
 800892e:	d100      	bne.n	8008932 <memset+0xa>
 8008930:	4770      	bx	lr
 8008932:	f803 1b01 	strb.w	r1, [r3], #1
 8008936:	e7f9      	b.n	800892c <memset+0x4>

08008938 <_free_r>:
 8008938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800893a:	2900      	cmp	r1, #0
 800893c:	d048      	beq.n	80089d0 <_free_r+0x98>
 800893e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008942:	9001      	str	r0, [sp, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f1a1 0404 	sub.w	r4, r1, #4
 800894a:	bfb8      	it	lt
 800894c:	18e4      	addlt	r4, r4, r3
 800894e:	f000 f8ad 	bl	8008aac <__malloc_lock>
 8008952:	4a20      	ldr	r2, [pc, #128]	; (80089d4 <_free_r+0x9c>)
 8008954:	9801      	ldr	r0, [sp, #4]
 8008956:	6813      	ldr	r3, [r2, #0]
 8008958:	4615      	mov	r5, r2
 800895a:	b933      	cbnz	r3, 800896a <_free_r+0x32>
 800895c:	6063      	str	r3, [r4, #4]
 800895e:	6014      	str	r4, [r2, #0]
 8008960:	b003      	add	sp, #12
 8008962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008966:	f000 b8a7 	b.w	8008ab8 <__malloc_unlock>
 800896a:	42a3      	cmp	r3, r4
 800896c:	d90b      	bls.n	8008986 <_free_r+0x4e>
 800896e:	6821      	ldr	r1, [r4, #0]
 8008970:	1862      	adds	r2, r4, r1
 8008972:	4293      	cmp	r3, r2
 8008974:	bf04      	itt	eq
 8008976:	681a      	ldreq	r2, [r3, #0]
 8008978:	685b      	ldreq	r3, [r3, #4]
 800897a:	6063      	str	r3, [r4, #4]
 800897c:	bf04      	itt	eq
 800897e:	1852      	addeq	r2, r2, r1
 8008980:	6022      	streq	r2, [r4, #0]
 8008982:	602c      	str	r4, [r5, #0]
 8008984:	e7ec      	b.n	8008960 <_free_r+0x28>
 8008986:	461a      	mov	r2, r3
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	b10b      	cbz	r3, 8008990 <_free_r+0x58>
 800898c:	42a3      	cmp	r3, r4
 800898e:	d9fa      	bls.n	8008986 <_free_r+0x4e>
 8008990:	6811      	ldr	r1, [r2, #0]
 8008992:	1855      	adds	r5, r2, r1
 8008994:	42a5      	cmp	r5, r4
 8008996:	d10b      	bne.n	80089b0 <_free_r+0x78>
 8008998:	6824      	ldr	r4, [r4, #0]
 800899a:	4421      	add	r1, r4
 800899c:	1854      	adds	r4, r2, r1
 800899e:	42a3      	cmp	r3, r4
 80089a0:	6011      	str	r1, [r2, #0]
 80089a2:	d1dd      	bne.n	8008960 <_free_r+0x28>
 80089a4:	681c      	ldr	r4, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	6053      	str	r3, [r2, #4]
 80089aa:	4421      	add	r1, r4
 80089ac:	6011      	str	r1, [r2, #0]
 80089ae:	e7d7      	b.n	8008960 <_free_r+0x28>
 80089b0:	d902      	bls.n	80089b8 <_free_r+0x80>
 80089b2:	230c      	movs	r3, #12
 80089b4:	6003      	str	r3, [r0, #0]
 80089b6:	e7d3      	b.n	8008960 <_free_r+0x28>
 80089b8:	6825      	ldr	r5, [r4, #0]
 80089ba:	1961      	adds	r1, r4, r5
 80089bc:	428b      	cmp	r3, r1
 80089be:	bf04      	itt	eq
 80089c0:	6819      	ldreq	r1, [r3, #0]
 80089c2:	685b      	ldreq	r3, [r3, #4]
 80089c4:	6063      	str	r3, [r4, #4]
 80089c6:	bf04      	itt	eq
 80089c8:	1949      	addeq	r1, r1, r5
 80089ca:	6021      	streq	r1, [r4, #0]
 80089cc:	6054      	str	r4, [r2, #4]
 80089ce:	e7c7      	b.n	8008960 <_free_r+0x28>
 80089d0:	b003      	add	sp, #12
 80089d2:	bd30      	pop	{r4, r5, pc}
 80089d4:	200000b4 	.word	0x200000b4

080089d8 <_malloc_r>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	1ccd      	adds	r5, r1, #3
 80089dc:	f025 0503 	bic.w	r5, r5, #3
 80089e0:	3508      	adds	r5, #8
 80089e2:	2d0c      	cmp	r5, #12
 80089e4:	bf38      	it	cc
 80089e6:	250c      	movcc	r5, #12
 80089e8:	2d00      	cmp	r5, #0
 80089ea:	4606      	mov	r6, r0
 80089ec:	db01      	blt.n	80089f2 <_malloc_r+0x1a>
 80089ee:	42a9      	cmp	r1, r5
 80089f0:	d903      	bls.n	80089fa <_malloc_r+0x22>
 80089f2:	230c      	movs	r3, #12
 80089f4:	6033      	str	r3, [r6, #0]
 80089f6:	2000      	movs	r0, #0
 80089f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fa:	f000 f857 	bl	8008aac <__malloc_lock>
 80089fe:	4921      	ldr	r1, [pc, #132]	; (8008a84 <_malloc_r+0xac>)
 8008a00:	680a      	ldr	r2, [r1, #0]
 8008a02:	4614      	mov	r4, r2
 8008a04:	b99c      	cbnz	r4, 8008a2e <_malloc_r+0x56>
 8008a06:	4f20      	ldr	r7, [pc, #128]	; (8008a88 <_malloc_r+0xb0>)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	b923      	cbnz	r3, 8008a16 <_malloc_r+0x3e>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f83c 	bl	8008a8c <_sbrk_r>
 8008a14:	6038      	str	r0, [r7, #0]
 8008a16:	4629      	mov	r1, r5
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 f837 	bl	8008a8c <_sbrk_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	d123      	bne.n	8008a6a <_malloc_r+0x92>
 8008a22:	230c      	movs	r3, #12
 8008a24:	6033      	str	r3, [r6, #0]
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 f846 	bl	8008ab8 <__malloc_unlock>
 8008a2c:	e7e3      	b.n	80089f6 <_malloc_r+0x1e>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	1b5b      	subs	r3, r3, r5
 8008a32:	d417      	bmi.n	8008a64 <_malloc_r+0x8c>
 8008a34:	2b0b      	cmp	r3, #11
 8008a36:	d903      	bls.n	8008a40 <_malloc_r+0x68>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	441c      	add	r4, r3
 8008a3c:	6025      	str	r5, [r4, #0]
 8008a3e:	e004      	b.n	8008a4a <_malloc_r+0x72>
 8008a40:	6863      	ldr	r3, [r4, #4]
 8008a42:	42a2      	cmp	r2, r4
 8008a44:	bf0c      	ite	eq
 8008a46:	600b      	streq	r3, [r1, #0]
 8008a48:	6053      	strne	r3, [r2, #4]
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f000 f834 	bl	8008ab8 <__malloc_unlock>
 8008a50:	f104 000b 	add.w	r0, r4, #11
 8008a54:	1d23      	adds	r3, r4, #4
 8008a56:	f020 0007 	bic.w	r0, r0, #7
 8008a5a:	1ac2      	subs	r2, r0, r3
 8008a5c:	d0cc      	beq.n	80089f8 <_malloc_r+0x20>
 8008a5e:	1a1b      	subs	r3, r3, r0
 8008a60:	50a3      	str	r3, [r4, r2]
 8008a62:	e7c9      	b.n	80089f8 <_malloc_r+0x20>
 8008a64:	4622      	mov	r2, r4
 8008a66:	6864      	ldr	r4, [r4, #4]
 8008a68:	e7cc      	b.n	8008a04 <_malloc_r+0x2c>
 8008a6a:	1cc4      	adds	r4, r0, #3
 8008a6c:	f024 0403 	bic.w	r4, r4, #3
 8008a70:	42a0      	cmp	r0, r4
 8008a72:	d0e3      	beq.n	8008a3c <_malloc_r+0x64>
 8008a74:	1a21      	subs	r1, r4, r0
 8008a76:	4630      	mov	r0, r6
 8008a78:	f000 f808 	bl	8008a8c <_sbrk_r>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d1dd      	bne.n	8008a3c <_malloc_r+0x64>
 8008a80:	e7cf      	b.n	8008a22 <_malloc_r+0x4a>
 8008a82:	bf00      	nop
 8008a84:	200000b4 	.word	0x200000b4
 8008a88:	200000b8 	.word	0x200000b8

08008a8c <_sbrk_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d06      	ldr	r5, [pc, #24]	; (8008aa8 <_sbrk_r+0x1c>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7f8 f984 	bl	8000da4 <_sbrk>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_sbrk_r+0x1a>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_sbrk_r+0x1a>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	200008d8 	.word	0x200008d8

08008aac <__malloc_lock>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__malloc_lock+0x8>)
 8008aae:	f000 b809 	b.w	8008ac4 <__retarget_lock_acquire_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	200008e0 	.word	0x200008e0

08008ab8 <__malloc_unlock>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	; (8008ac0 <__malloc_unlock+0x8>)
 8008aba:	f000 b804 	b.w	8008ac6 <__retarget_lock_release_recursive>
 8008abe:	bf00      	nop
 8008ac0:	200008e0 	.word	0x200008e0

08008ac4 <__retarget_lock_acquire_recursive>:
 8008ac4:	4770      	bx	lr

08008ac6 <__retarget_lock_release_recursive>:
 8008ac6:	4770      	bx	lr

08008ac8 <_init>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	bf00      	nop
 8008acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ace:	bc08      	pop	{r3}
 8008ad0:	469e      	mov	lr, r3
 8008ad2:	4770      	bx	lr

08008ad4 <_fini>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr
